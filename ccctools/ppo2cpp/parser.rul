// Reprint of input file "parser.lem".
// Symbols:
//   0 $                47 NEW              94 ldotsymbol     
//   1 LOWPRECEDENCE    48 ATTRIB           95 lnewline       
//   2 UNEXPECTEDCHAR   49 METHOD           96 using          
//   3 INVALIDENCODING  50 FUNCTION         97 ddotsymbol     
//   4 NL               51 STFUNCTION       98 statdefin      
//   5 DOT              52 LOCAL            99 statdef        
//   6 DOTDOT           53 QUIT            100 expr           
//   7 COMMA            54 RETURN          101 function       
//   8 ASSIGN           55 END             102 classid        
//   9 ADDASS           56 WHILE           103 ldsym          
//  10 SUBASS           57 FOR             104 newspec        
//  11 MULASS           58 TO              105 lslot          
//  12 DIVASS           59 LOOP            106 slot           
//  13 MODASS           60 EXIT            107 forw           
//  14 COLCOLASS        61 BEGSEQ          108 funcid         
//  15 OR               62 RECOVER         109 argument       
//  16 AND              63 FINALLY         110 newline        
//  17 NOT              64 IF              111 body           
//  18 EQ               65 DOCASE          112 larg           
//  19 EQEQ             66 CASE            113 arg            
//  20 GTEQ             67 ELSEIF          114 bargument      
//  21 LTEQ             68 ELSE            115 lbarg          
//  22 EXEQ             69 OTHERWISE       116 llocdefin      
//  23 GT               70 STEP            117 lstatement     
//  24 LT               71 RBRACKET        118 locdline       
//  25 DOLLAR           72 AT              119 locdefin       
//  26 PLUS             73 NUMBER          120 locdef         
//  27 MINUS            74 STRING          121 statement      
//  28 STAR             75 NLSTEXT         122 begseq         
//  29 SLASH            76 BINARYX         123 lrecov         
//  30 MODULO           77 BINARYA         124 finally        
//  31 DBSTAR           78 TRUE            125 if             
//  32 DBPLUS           79 FALSE           126 lelseif        
//  33 DBMINUS          80 NIL             127 else           
//  34 LBRACKET         81 LBRACE          128 endif          
//  35 COLON            82 PIPE            129 forstep        
//  36 COLCOL           83 RBRACE          130 recov          
//  37 ARROW            84 error           131 elseif         
//  38 HIGHPRECEDENCE   85 prg             132 lfuncpar       
//  39 NAMESPACE        86 header          133 parexpr        
//  40 USING            87 lfunction       134 lfuncpar0      
//  41 SYMBOL           88 lnewline0       135 parexpr0       
//  42 STATIC           89 namespace       136 lexpr          
//  43 LPAR             90 lusing          137 lexpr0         
//  44 RPAR             91 lstatdefin      138 expr0          
//  45 CLASS            92 dotsymbol       139 msgpar         
//  46 STCLASS          93 nsalias        
prg ::= header lfunction.
header ::= lnewline0 namespace lusing lstatdefin.
namespace ::=.
namespace ::= NAMESPACE dotsymbol nsalias ldotsymbol lnewline.
lusing ::=.
lusing ::= lusing using.
using ::= USING dotsymbol nsalias ldotsymbol lnewline.
nsalias ::=.
nsalias ::= EQ SYMBOL.
dotsymbol ::= SYMBOL.
dotsymbol ::= dotsymbol DOT SYMBOL.
ldotsymbol ::=.
ldotsymbol ::= ldotsymbol dotsymbol.
ddotsymbol ::= dotsymbol.
ddotsymbol ::= DOT dotsymbol.
lstatdefin ::=.
lstatdefin ::= lstatdefin STATIC statdefin lnewline.
statdefin ::= statdef.
statdefin ::= statdefin COMMA statdef.
statdef ::= SYMBOL.
statdef ::= SYMBOL ASSIGN expr.
lfunction ::= function.
lfunction ::= lfunction function.
function ::= classid LPAR ldsym RPAR newspec lnewline lslot.
classid ::= CLASS dotsymbol.
classid ::= STCLASS dotsymbol.
newspec ::=.
newspec ::= NEW COLON.
newspec ::= NEW COLON SYMBOL.
lslot ::=.
lslot ::= lslot slot lnewline.
slot ::= ATTRIB SYMBOL.
slot ::= METHOD SYMBOL.
slot ::= METHOD SYMBOL expr.
slot ::= METHOD SYMBOL forw.
forw ::= COLON SYMBOL.
forw ::= forw COLON SYMBOL.
ldsym ::= dotsymbol.
ldsym ::= ldsym COMMA dotsymbol.
function ::= funcid LPAR argument RPAR newline body.
funcid ::= FUNCTION dotsymbol.
funcid ::= STFUNCTION dotsymbol.
argument ::=.
argument ::= STAR.
argument ::= larg.
argument ::= larg COMMA STAR.
larg ::= arg.
larg ::= larg COMMA arg.
arg ::= SYMBOL.
arg ::= SYMBOL ASSIGN expr.
bargument ::=.
bargument ::= lbarg.
bargument ::= STAR.
bargument ::= lbarg COMMA STAR.
lbarg ::= SYMBOL.
lbarg ::= lbarg COMMA SYMBOL.
body ::= llocdefin lstatement.
llocdefin ::=.
llocdefin ::= llocdefin newline.
llocdefin ::= llocdefin locdline newline.
locdline ::= STATIC statdefin.
locdline ::= LOCAL locdefin.
locdefin ::= locdef.
locdefin ::= locdefin COMMA locdef.
locdef ::= SYMBOL.
locdef ::= SYMBOL ASSIGN expr.
lstatement ::=. [LOWPRECEDENCE]
lstatement ::= lstatement newline.
lstatement ::= lstatement statement newline.
statement ::= QUIT.
statement ::= RETURN expr.
statement ::= begseq lrecov finally END.
statement ::= if lelseif else endif.
statement ::= WHILE expr newline lstatement END.
statement ::= FOR SYMBOL ASSIGN expr TO expr forstep newline lstatement END.
statement ::= LOOP.
statement ::= EXIT.
statement ::= expr.
begseq ::= BEGSEQ newline lstatement.
lrecov ::=.
lrecov ::= lrecov recov.
recov ::= RECOVER newline lstatement.
recov ::= RECOVER SYMBOL newline lstatement.
recov ::= RECOVER SYMBOL expr newline lstatement.
recov ::= RECOVER SYMBOL LT dotsymbol GT newline lstatement.
finally ::=.
finally ::= FINALLY newline lstatement.
if ::= IF expr newline lstatement.
if ::= DOCASE lnewline CASE expr newline lstatement.
lelseif ::=.
lelseif ::= lelseif elseif.
elseif ::= ELSEIF expr newline lstatement.
elseif ::= CASE expr newline lstatement.
else ::=.
else ::= ELSE newline lstatement.
else ::= OTHERWISE newline lstatement.
endif ::= END.
forstep ::=.
forstep ::= STEP expr.
lfuncpar ::=.
lfuncpar ::= parexpr.
lfuncpar ::= lfuncpar0 COMMA parexpr0.
lfuncpar0 ::= parexpr0.
lfuncpar0 ::= lfuncpar0 COMMA parexpr0.
parexpr0 ::=.
parexpr0 ::= parexpr.
parexpr ::= expr.
parexpr ::= STAR.
parexpr ::= STAR LBRACKET parexpr0 DOTDOT parexpr0 RBRACKET.
parexpr ::= AT SYMBOL.
lexpr ::=.
lexpr ::= expr.
lexpr ::= lexpr0 COMMA expr0.
lexpr0 ::= expr0.
lexpr0 ::= lexpr0 COMMA expr0.
expr0 ::=.
expr0 ::= expr. [LOWPRECEDENCE]
msgpar ::=. [LOWPRECEDENCE]
msgpar ::= ASSIGN expr.
msgpar ::= LPAR lfuncpar RPAR. [LOWPRECEDENCE]
msgpar ::= LPAR lfuncpar RPAR ASSIGN expr.
lnewline ::= newline.
lnewline ::= lnewline newline.
lnewline0 ::=.
lnewline0 ::= lnewline0 newline.
newline ::= NL.
expr ::= NUMBER.
expr ::= STRING.
expr ::= NLSTEXT.
expr ::= BINARYX.
expr ::= BINARYA.
expr ::= TRUE.
expr ::= FALSE.
expr ::= NIL.
expr ::= SYMBOL.
expr ::= SYMBOL ARROW SYMBOL.
expr ::= expr COLON SYMBOL msgpar.
expr ::= expr COLON LPAR dotsymbol RPAR SYMBOL msgpar.
expr ::= expr COLON LPAR dotsymbol AT dotsymbol RPAR SYMBOL msgpar.
expr ::= ddotsymbol LPAR lfuncpar RPAR.
expr ::= expr COLCOL expr.
expr ::= expr COLCOLASS expr.
expr ::= LPAR lexpr RPAR.
expr ::= LBRACE PIPE bargument PIPE lexpr RBRACE.
expr ::= IF LPAR expr COMMA expr COMMA expr RPAR.
expr ::= LBRACE lfuncpar RBRACE.
expr ::= expr LBRACKET expr RBRACKET.
expr ::= expr LBRACKET parexpr0 DOTDOT parexpr0 RBRACKET.
expr ::= expr ASSIGN expr.
expr ::= expr ADDASS expr.
expr ::= expr SUBASS expr.
expr ::= expr MULASS expr.
expr ::= expr DIVASS expr.
expr ::= expr MODASS expr.
expr ::= DBMINUS expr.
expr ::= DBPLUS expr.
expr ::= expr DBMINUS.
expr ::= expr DBPLUS.
expr ::= expr PLUS expr.
expr ::= expr MINUS expr.
expr ::= expr STAR expr.
expr ::= expr SLASH expr.
expr ::= expr MODULO expr.
expr ::= expr DBSTAR expr.
expr ::= MINUS expr. [DBMINUS]
expr ::= PLUS expr. [DBPLUS]
expr ::= expr EQEQ expr.
expr ::= expr EXEQ expr.
expr ::= expr GTEQ expr.
expr ::= expr LTEQ expr.
expr ::= expr GT expr.
expr ::= expr LT expr.
expr ::= expr DOLLAR expr.
expr ::= expr OR expr.
expr ::= expr AND expr.
expr ::= NOT expr.
