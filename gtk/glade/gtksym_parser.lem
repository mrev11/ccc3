
/*
 *  CCC - The Clipper to C++ Compiler
 *  Copyright (C) 2005 ComFirm BT.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

%include{ 

#ifdef EMLEKEZTETO
  Az a probléma, hogy a glade fájlokban szimbolikus konstansokkal
  végzett műveletekkel magadott értékek vannak (néha az XML tag
  szövegeként, néha egy attribútum értékeként). Például:
    
  <accelerator key="P" modifiers="GDK_SHIFT_MASK | GDK_MOD1_MASK" signal="activate"/>
    
  C kód generálására ez jó, minden más esetben nehézséget okoz, 
  hogy megkapjuk a konkrét számértéket. A konkrét számok kiszámítására 
  való ez a kis elemző.
#endif

#include <stdio.h>
#include <gtksym_lexer.h>
#include <cccapi.h>

extern void* gtksym_parserAlloc(void*(*)(size_t)); 
extern void  gtksym_parserFree(void*,void(*)(void*)); 
extern void  gtksym_parserTrace(FILE*,char*); 
extern void  gtksym_parser(void*,int,int,int*); //3th arg: %token_type {int} 


//---------------------------------------------------------------------------
void _clp_gtksym(int argno)
{
    CCC_PROLOG("gtksym",1);
    str2bin(base);
    char *buffer=_parb(1);
    int size=_parblen(1);
    
    gtksym_lexer* lexer=new gtksym_lexer(buffer,size);

    void *parser=gtksym_parserAlloc(malloc);
    //gtksym_parserTrace(stdout,">> ");
    int EXPRVAL=0;
    int id=0,token=0;
    while( 0!=(id=lexer->getnext(&token)) )
    {
        gtksym_parser(parser,id,token,&EXPRVAL);
    }
    gtksym_parser(parser,0,0,&EXPRVAL);
    gtksym_parserFree(parser,free);
    delete lexer;
    _retni(EXPRVAL);
    CCC_EPILOG();
}

//---------------------------------------------------------------------------
}//%include


%name gtksym_parser

%extra_argument{ int* EXPRVAL }

%syntax_error{
//    printf("Syntax error.\n");
}

%parse_accept{
//    printf("Parsing complete.\n");
}


%token_type{int}

start   ::= expr(X). {*EXPRVAL=X;}
expr(X) ::= NUMBER(N).{X=N;}  
expr(X) ::= expr(L) PLUS expr(R).{X=L+R;}  
expr(X) ::= expr(L) MINUS expr(R).{X=L-R;}  
expr(X) ::= expr(L) OR expr(R).{X=L|R;}  
expr(X) ::= expr(L) AND expr(R).{X=L&R;}  
expr(X) ::= LPAR expr(L) RPAR.{X=L;}  



