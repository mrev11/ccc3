#line 2 "ppo/lexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else        /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif       /* __STDC__ */
#endif       /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *   if ( condition_holds )
 *           yyless( 5 );
 *   else
 *           do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
     do \
             { \
             /* Undo effects of setting up yytext. */ \
             *yy_cp = yy_hold_char; \
             YY_RESTORE_YY_MORE_OFFSET \
             yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
             YY_DO_BEFORE_ACTION; /* set up yytext again */ \
             } \
     while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
     {
     std::istream* yy_input_file;

     char *yy_ch_buf;                /* input buffer */
     char *yy_buf_pos;               /* current position in input buffer */

     /* Size of input buffer in bytes, not including room for EOB
      * characters.
      */
     yy_size_t yy_buf_size;

     /* Number of characters read into yy_ch_buf, not including EOB
      * characters.
      */
     int yy_n_chars;

     /* Whether we "own" the buffer - i.e., we know we created it,
      * and can realloc() it to grow it, and should free() it to
      * delete it.
      */
     int yy_is_our_buffer;

     /* Whether this is an "interactive" input source; if so, and
      * if we're using stdio for input, then we want to use getc()
      * instead of fread(), to make sure we stop fetching input after
      * each newline.
      */
     int yy_is_interactive;

     /* Whether we're considered to be at the beginning of a line.
      * If so, '^' rules will be active on the next match, otherwise
      * not.
      */
     int yy_at_bol;

     /* Whether to try to fill the input buffer when we reach the
      * end of it.
      */
     int yy_fill_buffer;

     int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
     /* When an EOF's been seen but there's still some text to process
      * then we mark the buffer as YY_EOF_PENDING, to indicate that we
      * shouldn't try reading from the input source any more.  We might
      * still have a bunch of tokens to match, though, because of
      * possible backing-up.
      *
      * When we actually see the EOF, we change the status to "new"
      * (via yyrestart()), so that the user can continue scanning by
      * just pointing yyin at a new input file.
      */
#define YY_BUFFER_EOF_PENDING 2
     };


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
     { \
     if ( ! yy_current_buffer ) \
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
     yy_current_buffer->yy_is_interactive = is_interactive; \
     }

#define yy_set_bol(at_bol) \
     { \
     if ( ! yy_current_buffer ) \
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
     yy_current_buffer->yy_at_bol = at_bol; \
     }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <flexlexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int ppo2cpp_lexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
     yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
     yy_hold_char = *yy_cp; \
     *yy_cp = '\0'; \
     yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 143
#define YY_END_OF_BUFFER 144
static yyconst short int yy_acclist[506] =
    {   0,
      141,  141,    4,    4,   66,   66,  144,  142,  143,  141,
      142,  143,   97,  143,   51,  142,  143,  142,  143,  142,
      143,   29,  142,  143,   34,  142,  143,  142,  143,   40,
      142,  143,   41,  142,  143,   32,  142,  143,   30,  142,
      143,   14,  142,  143,   31,  142,  143,   12,  142,  143,
       33,  142,  143,  103,  142,  143,  103,  142,  143,   15,
      142,  143,   96,  142,  143,   28,  142,  143,   22,  142,
      143,   27,  142,  143,   42,  142,  143,  106,  142,  143,
      106,  142,  143,  106,  142,  143,  106,  142,  143,  106,
      142,  143,  106,  142,  143,  106,  142,  143,  106,  142,

      143,  106,  142,  143,  106,  142,  143,  106,  142,  143,
      106,  142,  143,  106,  142,  143,  106,  142,  143,  106,
      142,  143,  106,  142,  143,  106,  142,  143,  106,  142,
      143,  106,  142,  143,  106,  142,  143,   38,  142,  143,
       46,  142,  143,   35,  142,  143,  106,  142,  143,   43,
      142,  143,   44,  142,  143,   45,  142,  143,  143,    4,
      143,    5,  143,  143,  143,    2,  143,   11,  143,   10,
      143,    9,   11,  143,   11,  143,    8,   11,  143,   67,
      143,   66,   67,  143,   65,   67,  143,  141,   26,   99,
       21,   35,   19,   36,   17,   37,   18,   39,   13,  107,

      107,  107,  107,  107,  107,   20,  103,   16,  108,   25,
       23,   24,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,   80,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,   76,  106,  106,  106,
        4,    3,    2,   66,   65,  107,  107,   48,  107,  107,
       47,   98,  103,  105,  104,  108,  100,  106,  106,  106,
      106,  106,  106,  106,   72,  106,  106,  106,   75,  106,
      106,  106,  106,  106,  106,   62,  106,  106,   59,  106,
      106,  106,  106,  106,  106,  106,  106,  128,  106,  106,
      102,  101,    2,  107,  107,   49,  111,  106,  106,   85,

      106,  106,  106,  106,   82,  106,  124,  106,  106,  106,
      106,  106,  106,   70,  106,  106,  127,  106,  106,   71,
      106,  106,  106,  119,   78,  106,  117,  106,  106,   58,
      106,  106,  106,  106,   77,  106,  106,  106,    1,   50,
       51,  109,    6,  111,  106,   88,  106,   61,  106,  106,
      106,  132,  106,  106,   73,  106,  106,   83,  106,  106,
      106,  122,  106,  106,   57,  106,  123,  106,  106,  130,
      106,  106,  116,  106,  106,  106,  129,   95,  106,   69,
      106,    7,  109,   63,  106,  136,  106,  118,   84,  106,
      106,   81,  106,  106,  125,   79,  106,  133,  106,  106,

      106,  106,  115,   64,  106,  106,  106,  106,  106,   60,
      106,   56,  106,  140,  109,  109,  110,  120,  106,   84,
       68,  106,   87,  106,  131,  106,  106,   92,  106,  106,
      121,  106,  106,  106,   90,  106,  114,  106,  106,  109,
      110,  106,   68,  135,  106,   74,  106,  138,   52,  106,
      106,  106,  106,  137,  106,  106,  106,  109,  110,  106,
      106,  126,  112,   94,  106,   86,  106,   53,  106,  106,
      106,  106,  106,  106,  139,  134,  113,  106,  106,  106,
      106,   93,  106,  106,  106,  106,  106,   93,   91,  106,
      106,  106,   89,  106,   91,  106,  106,   89,   54,  106,

      106,   54,   55,  106,   55
    } ;

static yyconst short int yy_accept[483] =
    {   0,
        1,    2,    3,    4,    5,    5,    5,    6,    7,    8,
       10,   13,   15,   18,   20,   22,   25,   28,   30,   33,
       36,   39,   42,   45,   48,   51,   54,   57,   60,   63,
       66,   69,   72,   75,   78,   81,   84,   87,   90,   93,
       96,   99,  102,  105,  108,  111,  114,  117,  120,  123,
      126,  129,  132,  135,  138,  141,  144,  147,  150,  153,
      156,  159,  160,  162,  164,  165,  166,  168,  170,  172,
      175,  177,  180,  182,  185,  188,  189,  190,  190,  191,
      191,  192,  192,  193,  194,  195,  196,  197,  198,  199,
      200,  201,  202,  203,  204,  205,  206,  206,  207,  207,

      208,  208,  208,  208,  209,  210,  210,  211,  212,  213,
      213,  213,  213,  214,  215,  216,  217,  218,  219,  220,
      221,  222,  223,  224,  225,  227,  228,  229,  230,  231,
      232,  233,  234,  235,  236,  237,  239,  240,  241,  241,
      241,  241,  241,  242,  242,  243,  243,  243,  244,  244,
      245,  246,  246,  247,  248,  249,  250,  251,  252,  252,
      253,  254,  255,  256,  256,  257,  257,  257,  258,  258,
      258,  259,  260,  261,  262,  262,  263,  264,  265,  267,
      268,  269,  271,  272,  273,  274,  275,  276,  278,  279,
      281,  282,  283,  284,  285,  286,  287,  288,  288,  289,

      290,  291,  292,  292,  292,  292,  293,  293,  294,  294,
      294,  295,  296,  297,  297,  297,  297,  297,  297,  297,
      298,  299,  300,  302,  303,  303,  303,  304,  305,  307,
      307,  308,  309,  310,  311,  312,  313,  314,  316,  317,
      317,  318,  319,  320,  322,  323,  324,  324,  325,  327,
      327,  328,  329,  330,  332,  333,  334,  335,  337,  338,
      339,  339,  339,  339,  339,  340,  341,  342,  342,  343,
      343,  343,  344,  345,  346,  348,  350,  350,  350,  351,
      352,  352,  353,  354,  354,  355,  357,  358,  360,  361,
      362,  362,  363,  364,  365,  367,  367,  368,  369,  370,

      370,  371,  372,  373,  373,  374,  375,  376,  377,  377,
      378,  380,  382,  383,  383,  384,  384,  384,  384,  384,
      384,  384,  386,  386,  387,  388,  388,  389,  389,  389,
      391,  392,  394,  394,  395,  395,  396,  398,  398,  399,
      400,  401,  402,  403,  403,  404,  406,  407,  408,  409,
      410,  412,  414,  414,  415,  415,  416,  416,  418,  418,
      418,  418,  419,  419,  420,  421,  421,  423,  423,  425,
      425,  426,  427,  428,  430,  431,  431,  432,  433,  434,
      435,  437,  437,  438,  439,  440,  440,  442,  442,  442,
      442,  443,  444,  444,  444,  445,  446,  448,  448,  449,

      451,  452,  453,  454,  454,  455,  456,  456,  456,  457,
      458,  458,  460,  460,  461,  461,  462,  462,  463,  463,
      464,  466,  468,  470,  470,  471,  471,  471,  472,  473,
      473,  474,  474,  475,  475,  476,  476,  477,  477,  478,
      478,  479,  479,  479,  480,  481,  481,  482,  482,  484,
      484,  485,  485,  485,  486,  487,  487,  488,  489,  489,
      491,  491,  491,  492,  493,  493,  495,  496,  496,  496,
      497,  498,  499,  499,  499,  501,  502,  503,  503,  505,
      506,  506
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   36,
       51,   52,   53,   54,   36,    1,   55,   28,   29,   30,

       56,   32,   33,   34,   57,   36,   36,   58,   38,   59,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   36,   60,   61,   62,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[63] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    1,    3,    4,
        1,    1,    1,    1,    5,    6,    1,    7,    7,    7,
        1,    1,    1,    4,    8,    1,    9,    9,    9,    9,
        9,    9,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1,    1,    1,    1,    9,    9,   10,   10,   10,    1,
        1,    1
    } ;

static yyconst short int yy_base[517] =
    {   0,
        0,    0,   61,   66,   69,   73,  125,    0, 1791, 1792,
     1788, 1792, 1765, 1783, 1721, 1792, 1742, 1754, 1792, 1792,
       53,   69, 1792,   73,  172,   66,  173,   83,   63, 1792,
       81, 1708, 1706,   86,   74,  179,  181,  175,  191,  198,
     1714,   79,  180,  185,  227,  187,  182,  183,  190,  192,
      194,  199,  211,  103, 1792, 1792, 1792,  242, 1792, 1792,
     1792, 1792, 1726, 1792, 1720, 1714,   97, 1792, 1792, 1792,
     1699, 1792, 1792, 1719,    0, 1718, 1792, 1689, 1792, 1632,
     1792, 1666, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
       61,    0, 1655, 1607, 1602, 1625, 1637, 1792,  104,  245,

       91,    0,    0, 1792,    0,    0, 1792, 1792, 1792, 1634,
     1629, 1609, 1618,  208,  233,  237,  241,  257,  245,  255,
      256,  258,  252,  259, 1575,  261,  254,  262,  260,  265,
      273,  263,  277,  291,  295,  309,  300,  304, 1583, 1578,
     1581, 1576, 1582, 1578, 1792, 1573,  309,  322,    0, 1579,
        0, 1521,    0, 1548, 1792, 1531, 1559, 1792, 1570, 1792,
      312,  275,    0,  361,    0, 1547, 1558, 1792, 1553,    0,
      301,  409,  411,  289,  423,  413,  322,  414,  470,  412,
      419,  343,  331,  420,  306,  415,  417,  448,  416,  441,
      422,  426,  424,  439,  444,  447,  450,  479, 1792,  445,

      461, 1792,    0,    0, 1555, 1792, 1479,  469, 1456, 1380,
     1386, 1385, 1792,    0,    0,  501,    0, 1344, 1245,    0,
      468,  462, 1193,  299,  455, 1105,  478,  537,  551,  510,
     1792,  547,  540,  548,  479,  550,  481,  567,  553,  506,
     1792,  555,  556,  582,  549,  482,  507, 1792,  589,  577,
     1792,  558,  581,  605,  563,  560,  594,  611,  491,  601,
     1128, 1123, 1071, 1012, 1792, 1792, 1792,  657,  719,  781,
      843, 1792,    0,  602,  904,  623,  991,  583,  604,  892,
      621, 1792,  609,  591,  893,  634,  613,  907,  896,  895,
      632, 1792,  897,  900,  911,  643, 1792,  334,  901,  644,

     1792,  903,  909,  923, 1792,  913,  917,  916,  938, 1792,
      951,  987, 1792,  950,  983,    0,    0,    0,    0, 1016,
        0,  958,  960, 1792, 1052,  939, 1792,  915,  166,  944,
     1053,  943,  804, 1054,  962, 1792, 1076, 1077, 1792,  988,
     1061,  986, 1055, 1078, 1792, 1087, 1066, 1079, 1067,  932,
      769, 1102, 1097, 1792,    0,    0, 1143, 1205, 1267, 1303,
     1113, 1792, 1069,  921, 1792, 1070,  707,  609, 1114, 1118,
     1792, 1075, 1339, 1125, 1340, 1136, 1792, 1342, 1341, 1062,
     1362, 1364, 1792, 1096, 1348, 1382, 1415,    0,    0,  610,
     1352, 1792, 1334, 1366, 1792, 1451, 1371, 1373, 1792, 1378,

     1452, 1453, 1460, 1387, 1792, 1391,  602,  600, 1454, 1367,
        0,    0,  549, 1461, 1345, 1465, 1390, 1792, 1475, 1792,
     1485, 1487, 1496,  541, 1464, 1465,  536, 1467, 1490, 1476,
     1499,  494, 1500, 1476, 1792, 1516, 1792, 1518, 1792,  908,
     1507,  484,  478, 1508, 1512, 1486, 1515, 1498,  423, 1496,
     1518,  391, 1503, 1522, 1107,  404, 1521, 1792,  322,  339,
     1504,  322, 1525, 1388, 1511,  333, 1792,  239,  173, 1532,
     1526, 1792, 1511,   71,   92, 1533, 1792, 1518,   52, 1792,
     1792, 1591, 1601, 1611, 1621, 1626, 1633, 1639, 1649, 1659,
     1663, 1667, 1677, 1681, 1682, 1686, 1688, 1698, 1708, 1717,

     1724, 1733, 1743, 1745, 1749, 1751, 1755, 1758, 1761, 1763,
     1765, 1767, 1771, 1773, 1775, 1777
    } ;

static yyconst short int yy_def[517] =
    {   0,
      481,    1,  482,  482,  483,  483,  481,    7,  481,  481,
      481,  481,  481,  484,  481,  481,  481,  485,  481,  481,
      481,  481,  481,  481,  486,  481,  481,  481,  487,  481,
      481,  481,  481,  481,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  481,  481,  481,  488,  481,  481,
      481,  481,  481,  481,  489,  490,  481,  481,  481,  481,
      481,  481,  481,  481,  491,  481,  481,  484,  481,  481,
      481,  485,  481,  481,  481,  481,  481,  481,  481,  481,
      492,  492,  492,  492,  492,  492,  493,  481,  481,  481,

      481,  494,  495,  481,  496,  497,  481,  481,  481,  498,
      499,  481,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  500,  501,
      502,  503,  481,  489,  481,  490,  481,  481,  504,  481,
      491,  481,  492,  492,  481,  492,  492,  481,  493,  481,
      481,  481,  494,  481,  496,  505,  498,  481,  499,  506,
      488,  488,  488,  488,  481,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  481,  481,  488,

      488,  481,  507,  508,  502,  481,  503,  481,  509,  481,
      492,  492,  481,  510,  511,  164,  512,  505,  481,  513,
      488,  488,  488,  488,  481,  481,  488,  488,  488,  481,
      481,  488,  488,  488,  488,  488,  488,  488,  488,  481,
      481,  488,  488,  488,  488,  488,  481,  481,  488,  481,
      481,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      500,  501,  509,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  513,  488,  488,  488,  481,  481,  488,  488,
      481,  481,  488,  481,  488,  488,  488,  488,  488,  488,
      481,  481,  488,  488,  488,  481,  481,  488,  488,  481,

      481,  488,  488,  481,  481,  488,  488,  488,  481,  481,
      488,  488,  481,  268,  269,  270,  270,  514,  515,  271,
      516,  488,  481,  481,  488,  481,  481,  481,  481,  488,
      488,  488,  481,  488,  481,  481,  488,  481,  481,  488,
      488,  488,  488,  481,  481,  488,  488,  488,  488,  488,
      488,  488,  481,  481,  314,  315,  481,  481,  481,  359,
      481,  481,  481,  488,  481,  481,  488,  481,  488,  481,
      481,  488,  488,  488,  488,  481,  481,  488,  488,  488,
      488,  481,  481,  488,  488,  357,  358,  359,  359,  481,
      488,  481,  481,  481,  481,  488,  488,  481,  481,  488,

      488,  488,  488,  481,  481,  488,  481,  481,  488,  488,
      386,  387,  481,  488,  481,  488,  481,  481,  481,  481,
      488,  488,  488,  481,  488,  481,  481,  488,  488,  481,
      488,  481,  488,  481,  481,  481,  481,  481,  481,  481,
      488,  481,  481,  488,  488,  481,  488,  481,  488,  481,
      488,  481,  481,  488,  488,  481,  488,  481,  481,  488,
      481,  481,  488,  488,  481,  488,  481,  481,  481,  488,
      488,  481,  481,  481,  488,  488,  481,  481,  488,  481,
        0,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481
    } ;

static yyconst short int yy_nxt[1855] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   41,   42,   41,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   41,   53,   54,   41,
       55,   10,   56,   57,   58,   39,   42,   43,   45,   59,
       60,   61,   63,   64,   83,   65,  112,   63,   64,   66,
       65,   69,  103,   70,   66,   69,   84,   70,   67,   67,
       67,   85,   97,   67,   67,   67,  104,   87,  112,   98,
      110,   71,   86,  112,  111,   71,   88,   89,   99,  154,

      100,  100,  100,  106,  107,   77,  112,  139,  162,  162,
      125,  140,  147,  478,  148,  148,  148,  112,  114,  154,
       72,  161,  161,  161,   72,   73,   74,   62,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   73,   73,   73,   73,   75,
       75,   75,   75,   75,   73,   73,   73,   90,   99,  112,
      100,  100,  100,  112,  112,  112,  112,  112,   91,  112,

      101,  112,  366,   93,  112,  112,  112,  116,  112,  115,
       94,   95,  112,  112,  118,  127,   96,  117,  474,  126,
      134,  102,  112,  366,  132,  112,   91,  119,  133,  120,
       94,  131,  122,  136,  115,  116,  135,  123,  117,  121,
      127,  112,  137,  124,  138,  134,  141,  112,  119,  120,
      142,  112,  171,  128,  122,  112,  112,  129,  175,  112,
       99,  130,  100,  100,  100,  172,  112,  174,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  473,  112,
      173,  128,  129,  130,  179,  176,  114,  112,  178,  184,
      180,  112,  162,  162,  182,  174,  181,  183,  186,  187,

      185,  190,  192,  112,  177,  112,  191,  188,  189,  112,
      198,  193,  180,  112,  112,  112,  181,  183,  112,  194,
      112,  196,  190,  112,  199,  197,  208,  208,  208,  161,
      161,  161,  224,  193,  200,  195,  112,  147,  201,  148,
      148,  148,  276,  221,  240,  112,  244,  112,  112,  196,
      197,  469,  241,  112,  467,  228,  200,  112,  241,  242,
      201,  214,  214,  346,  214,  214,  214,  214,  214,  214,
      214,  215,  214,  214,  214,  214,  214,  214,  216,  216,
      216,  214,  214,  214,  214,  214,  217,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  214,  214,  214,  214,  216,  216,  216,  216,  216,
      214,  214,  214,  112,  175,  112,  112,  112,  112,  112,
      112,  112,  465,  112,  112,  461,  112,  112,  112,  227,
      112,  223,  250,  222,  229,  239,  243,  246,  245,  247,
      251,  225,  252,  112,  253,  112,  238,  248,  112,  112,
      249,  112,  112,  248,  112,  222,  223,  227,  254,  229,
      226,  230,  246,  239,  243,  112,  112,  252,  255,  231,
      198,  277,  112,  259,  112,  231,  208,  208,  208,  256,
      258,  257,  112,  112,  199,  112,  112,  260,  232,  233,

      275,  234,  274,  259,  235,  112,  453,  240,  247,  277,
      288,  230,  452,  236,  290,  241,  248,  237,  260,  231,
      275,  279,  448,  311,  274,  299,  235,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  112,  281,  284,  112,  270,  270,  270,  270,  270,
      282,  112,  112,  112,  112,  112,  282,  112,  291,  112,
      112,  280,  112,  285,  112,  443,  292,  112,  250,  286,
      289,  112,  292,  296,  440,  283,  251,  287,  298,  293,
      300,  297,  295,  280,  430,  112,  112,  297,  301,  294,

      302,  285,  307,  112,  301,  289,  304,  283,  112,  306,
      293,  303,  309,  295,  305,  112,  112,  329,  112,  112,
      305,  333,  281,  112,  326,  112,  310,  112,  308,  322,
      282,  312,  327,  291,  330,  335,  303,  112,  327,  329,
      332,  292,  427,  336,  296,  300,  333,  426,  112,  336,
      308,  413,  297,  301,  393,  337,  312,  214,  214,  330,
      214,  214,  214,  214,  214,  214,  214,  215,  214,  214,
      214,  214,  214,  214,  314,  314,  314,  214,  214,  214,
      214,  214,  217,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  214,  214,  214,
      214,  314,  314,  314,  314,  314,  214,  214,  214,  214,
      214,  112,  214,  214,  214,  214,  214,  214,  214,  215,
      214,  214,  214,  214,  214,  214,  315,  315,  315,  214,
      214,  214,  214,  214,  217,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  214,
      214,  214,  214,  315,  315,  315,  315,  315,  214,  214,
      214,  214,  214,  112,  214,  214,  214,  214,  214,  214,
      214,  215,  214,  214,  214,  214,  214,  214,  316,  316,

      316,  214,  214,  214,  214,  214,  217,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  214,  214,  214,  214,  317,  317,  317,  317,  317,
      214,  214,  214,  318,  318,  368,  318,  318,  318,  318,
      318,  318,  318,  319,  318,  318,  318,  318,  318,  318,
      320,  320,  320,  318,  318,  318,  318,  318,  321,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  318,  318,  318,  318,  320,  320,  320,

      320,  320,  318,  318,  318,  323,  112,  112,  338,  112,
      112,  112,  344,  324,  112,  112,  339,  112,  112,  324,
      345,  112,  339,  112,  304,  112,  345,  112,  331,  341,
      112,  112,  305,  342,  343,  112,  334,  340,  349,  309,
      326,  347,  450,  350,  352,  365,  112,  325,  327,  331,
      348,  341,  353,  310,  342,  351,  343,  112,  112,  361,
      354,  323,  391,  335,  450,  112,  354,  362,  350,  324,
      365,  336,  112,  362,  381,  351,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,

      112,  112,  112,  363,  355,  355,  355,  355,  355,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  372,  328,  374,  313,  356,  356,  356,
      356,  356,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  112,  112,  112,  112,
      359,  359,  359,  359,  359,  112,  112,  370,  338,  344,
      112,  112,  364,  367,  369,  371,  339,  345,  376,  112,
      112,  371,  378,  112,  375,  264,  377,  373,  353,  390,

      392,  112,  377,  382,  403,  396,  354,  364,  367,  369,
      112,  383,  380,  379,  361,  394,  112,  383,  373,  370,
      378,  112,  362,  395,  390,  392,  398,  371,  112,  395,
      396,  202,  202,  384,  399,  379,  464,  376,  278,  112,
      399,  409,  385,  318,  318,  377,  318,  318,  318,  318,
      318,  318,  318,  319,  318,  318,  318,  318,  318,  318,
      386,  386,  386,  318,  318,  318,  318,  318,  321,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  318,  318,  318,  318,  386,  386,  386,

      386,  386,  318,  318,  318,  318,  318,  112,  318,  318,
      318,  318,  318,  318,  318,  319,  318,  318,  318,  318,
      318,  318,  387,  387,  387,  318,  318,  318,  318,  318,
      321,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  318,  318,  318,  318,  387,
      387,  387,  387,  387,  318,  318,  318,  318,  318,  272,
      318,  318,  318,  318,  318,  318,  318,  319,  318,  318,
      318,  318,  318,  318,  388,  388,  388,  318,  318,  318,
      318,  318,  321,  389,  389,  389,  389,  389,  389,  389,

      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  318,  318,  318,
      318,  389,  389,  389,  389,  389,  318,  318,  318,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  112,  112,  112,  112,  388,  388,  388,
      388,  388,  112,  404,  415,  382,  112,  394,  219,  397,
      401,  405,  417,  383,  398,  395,  112,  405,  400,  419,
      418,  112,  399,  432,  402,  112,  418,  420,  404,  415,
      410,  417,  112,  420,  397,  407,  405,  414,  400,  418,

      267,  266,  112,  432,  408,  112,  429,  406,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  424,  471,  425,  265,  411,  411,  411,  411,
      411,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  112,  112,  112,  112,  412,
      412,  412,  412,  412,  112,  112,  419,  434,  112,  112,
      264,  112,  421,  422,  420,  435,  434,  206,  436,  416,
      423,  431,  428,  433,  435,  444,  437,  438,  441,  112,

      435,  112,  437,  442,  112,  439,  446,  421,  422,  416,
      112,  439,  428,  112,  112,  423,  431,  436,  445,  438,
      441,  112,  112,  442,  456,  437,  112,  439,  458,  112,
      449,  446,  112,  462,  459,  112,  112,  447,  468,  112,
      112,  472,  455,  457,  456,  451,  112,  112,  480,  477,
      460,  466,  454,  458,  459,  449,  463,  447,  462,  206,
      468,  168,  168,  479,  470,  451,  472,  455,  476,  477,
      475,  219,  160,  480,  213,  212,  466,  211,  463,  210,
      150,  145,  145,  143,  206,  206,  202,  202,  479,  112,
      475,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   92,  112,  170,   92,   92,  105,  168,  168,  160,
      158,  105,  105,  113,  157,  113,  156,  113,  113,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  151,
      155,  151,  151,  153,   79,  153,  153,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  163,  152,  163,
      164,  164,  165,   79,  165,  165,  166,  166,  167,  167,

      167,  167,  167,  167,  167,  167,  167,  167,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  203,   76,
      150,  149,  145,  203,  145,  203,  204,  143,  112,  109,
      204,  108,  204,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  209,  209,  218,  218,  218,  218,  220,
      220,  261,   79,  261,  262,   81,  262,  263,  263,  263,
      263,  268,  268,  269,  269,  271,  271,  273,   80,  273,
      273,  357,  357,  358,  358,  360,  360,   79,   77,   76,
      481,    9,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481
    } ;

static yyconst short int yy_chk[1855] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,   21,    3,  479,    4,    4,    3,
        4,    5,   29,    5,    4,    6,   21,    6,    3,    3,
        3,   22,   26,    4,    4,    4,   29,   24,   35,   26,
       34,    5,   22,   42,   34,    6,   24,   24,   28,   91,

       28,   28,   28,   31,   31,   31,  475,   54,  101,  101,
       42,   54,   67,  474,   67,   67,   67,   54,   35,   91,
        5,   99,   99,   99,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,   25,   27,   38,
       27,   27,   27,   36,   43,   37,   47,   48,   25,   44,

       27,   46,  329,   25,   49,   39,   50,   37,   51,   36,
       25,   25,   40,   52,   38,   44,   25,   37,  469,   43,
       49,   27,  114,  329,   47,   53,   25,   39,   48,   39,
       25,   46,   40,   51,   36,   37,   50,   40,   37,   39,
       44,   45,   52,   40,   53,   49,   58,  115,   39,   39,
       58,  116,  114,   45,   40,  117,   58,   45,  118,  119,
      100,   45,  100,  100,  100,  115,  123,  117,  127,  120,
      121,  118,  122,  124,  129,  126,  128,  132,  468,  130,
      116,   45,   45,   45,  120,  118,   58,  131,  119,  126,
      121,  133,  162,  162,  123,  117,  122,  124,  127,  128,

      126,  130,  132,  174,  118,  134,  131,  129,  129,  135,
      136,  133,  121,  224,  137,  171,  122,  124,  138,  134,
      185,  135,  130,  136,  136,  135,  147,  147,  147,  161,
      161,  161,  174,  133,  137,  134,  177,  148,  138,  148,
      148,  148,  224,  171,  182,  183,  185,  466,  298,  135,
      135,  462,  182,  460,  459,  177,  137,  182,  182,  183,
      138,  164,  164,  298,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  172,  175,  173,  180,  176,  178,  186,
      189,  187,  456,  181,  184,  452,  191,  449,  193,  176,
      192,  173,  190,  172,  178,  181,  184,  187,  186,  188,
      190,  175,  191,  194,  192,  190,  180,  188,  195,  200,
      189,  196,  188,  188,  197,  172,  173,  176,  193,  178,
      175,  179,  187,  181,  184,  201,  222,  191,  194,  179,
      198,  225,  221,  200,  179,  179,  208,  208,  208,  195,
      197,  196,  227,  235,  198,  237,  246,  201,  179,  179,

      222,  179,  221,  200,  179,  259,  443,  240,  247,  225,
      235,  230,  442,  179,  237,  240,  247,  179,  201,  230,
      222,  227,  432,  259,  221,  246,  179,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  228,  229,  230,  233,  216,  216,  216,  216,  216,
      229,  232,  234,  245,  236,  229,  229,  239,  238,  242,
      243,  228,  252,  232,  256,  427,  238,  255,  250,  233,
      236,  238,  238,  244,  424,  229,  250,  234,  245,  239,
      249,  244,  243,  228,  413,  253,  244,  244,  249,  242,

      252,  232,  256,  249,  249,  236,  254,  229,  257,  255,
      239,  253,  258,  243,  254,  260,  274,  278,  279,  254,
      254,  284,  281,  283,  276,  258,  258,  287,  257,  274,
      281,  260,  276,  291,  279,  286,  253,  276,  276,  278,
      283,  291,  408,  286,  296,  300,  284,  407,  286,  286,
      257,  390,  296,  300,  368,  287,  260,  268,  268,  279,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  269,
      269,  367,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  270,  270,  351,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,

      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  271,  271,  333,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  275,  280,  285,  288,  290,
      289,  293,  295,  275,  294,  299,  288,  302,  275,  275,
      295,  288,  288,  303,  304,  295,  295,  306,  280,  290,
      308,  307,  304,  293,  294,  364,  285,  289,  303,  309,
      326,  299,  440,  306,  308,  328,  350,  275,  326,  280,
      302,  290,  311,  309,  293,  307,  294,  332,  330,  322,
      311,  323,  364,  335,  440,  311,  311,  322,  306,  323,
      328,  335,  322,  322,  350,  307,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      342,  312,  340,  323,  314,  314,  314,  314,  314,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  340,  277,  342,  264,  315,  315,  315,
      315,  315,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  325,  331,  334,  343,
      320,  320,  320,  320,  320,  341,  380,  337,  338,  344,
      347,  349,  325,  331,  334,  337,  338,  344,  346,  372,
      337,  337,  347,  348,  343,  263,  346,  341,  353,  363,

      366,  346,  346,  352,  380,  372,  353,  325,  331,  334,
      384,  352,  349,  348,  361,  369,  352,  352,  341,  370,
      347,  455,  361,  369,  363,  366,  374,  370,  369,  369,
      372,  262,  261,  352,  374,  348,  455,  376,  226,  374,
      374,  384,  352,  357,  357,  376,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,

      357,  357,  357,  357,  357,  358,  358,  223,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  359,  359,  219,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  373,  375,  379,  378,  360,  360,  360,
      360,  360,  385,  381,  393,  382,  391,  394,  218,  373,
      378,  381,  397,  382,  398,  394,  381,  381,  375,  400,
      397,  410,  398,  415,  379,  397,  397,  400,  404,  393,
      385,  417,  400,  400,  373,  382,  404,  391,  375,  417,

      212,  211,  464,  415,  382,  406,  410,  381,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  404,  464,  406,  210,  386,  386,  386,  386,
      386,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  396,  401,  402,  409,  387,
      387,  387,  387,  387,  403,  414,  419,  434,  425,  416,
      209,  428,  401,  402,  419,  434,  421,  207,  422,  396,
      403,  414,  409,  416,  421,  428,  422,  423,  425,  421,

      421,  422,  422,  426,  429,  423,  430,  401,  402,  396,
      423,  423,  409,  431,  433,  403,  414,  436,  429,  438,
      425,  441,  444,  426,  446,  436,  445,  438,  448,  447,
      433,  430,  451,  453,  450,  457,  454,  431,  461,  463,
      471,  465,  445,  447,  446,  441,  470,  476,  478,  473,
      451,  457,  444,  448,  450,  433,  454,  431,  453,  205,
      461,  169,  167,  476,  463,  441,  465,  445,  471,  473,
      470,  166,  159,  478,  157,  156,  457,  154,  454,  152,
      150,  146,  144,  143,  142,  141,  140,  139,  476,  125,
      470,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  486,  113,  112,  486,  486,  487,  111,  110,   97,
       96,  487,  487,  488,   95,  488,   94,  488,  488,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  491,
       93,  491,  491,  492,   82,  492,  492,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  494,   80,  494,
      495,  495,  496,   78,  496,  496,  497,  497,  498,  498,

      498,  498,  498,  498,  498,  498,  498,  498,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  500,   76,
       74,   71,   66,  500,   65,  500,  501,   63,   41,   33,
      501,   32,  501,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  504,  504,  505,  505,  505,  505,  506,
      506,  507,   18,  507,  508,   17,  508,  509,  509,  509,
      509,  510,  510,  511,  511,  512,  512,  513,   15,  513,
      513,  514,  514,  515,  515,  516,  516,   14,   13,   11,
        9,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./lexer.lex"
#define INITIAL 0
/*
 *  CCC - The Clipper to C++ Compiler
 *  Copyright (C) 2005 ComFirm BT.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
#line 22 "./lexer.lex"

#include <malloc.h>
#include <string.h>
#include <stdio.h>

#define INCLUDED_FROM_LEXER_LEX
#include <lexer.h>

#define line 1
#define raw 2
#define sym 3

#define YY_STACK_USED 1
#line 1006 "ppo/lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
     if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
             YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
     {
     register yy_state_type yy_current_state;
     register char *yy_cp, *yy_bp;
     register int yy_act;

#line 103 "./lexer.lex"


#line 1136 "ppo/lexer.cpp"

     if ( yy_init )
             {
             yy_init = 0;

#ifdef YY_USER_INIT
             YY_USER_INIT;
#endif

             if ( ! yy_start )
                     yy_start = 1;   /* first start state */

             if ( ! yyin )
                     yyin = &std::cin;

             if ( ! yyout )
                     yyout = &std::cout;

             if ( ! yy_current_buffer )
                     yy_current_buffer =
                             yy_create_buffer( yyin, YY_BUF_SIZE );

             yy_load_buffer_state();
             }

     while ( 1 )             /* loops until end-of-file is reached */
             {
             yy_cp = yy_c_buf_p;

             /* Support of yytext. */
             *yy_cp = yy_hold_char;

             /* yy_bp points to the position in yy_ch_buf of the start of
              * the current run.
              */
             yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 482 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1792 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

             YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:   /* This label is used only to access EOF actions. */


             switch ( yy_act )
     { /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 105 "./lexer.lex"
{yy_push_state(line);}
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 107 "./lexer.lex"
{setinputlineno();}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 108 "./lexer.lex"
{setinputfspec();}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 109 "./lexer.lex"
{} 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 110 "./lexer.lex"
{yy_pop_state();} 
	YY_BREAK

case 6:
YY_RULE_SETUP
#line 113 "./lexer.lex"
{yy_push_state(raw);raw_set();}
	YY_BREAK

case 7:
YY_RULE_SETUP
#line 115 "./lexer.lex"
{if(raw_cmp()){yy_pop_state();return STRING;}}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 116 "./lexer.lex"
{raw_cat("\\\\");}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 117 "./lexer.lex"
{raw_cat("\\\"");}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 118 "./lexer.lex"
{raw_cat("\\n\"\nL\"");/*darabol*/}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 119 "./lexer.lex"
{raw_cat();}
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 122 "./lexer.lex"
{return DOT;} 
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 123 "./lexer.lex"
{return DOTDOT;} 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 124 "./lexer.lex"
{return COMMA;} 
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 125 "./lexer.lex"
{return COLON;} 
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 126 "./lexer.lex"
{return ASSIGN;} 
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 127 "./lexer.lex"
{return ADDASS;} 
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 128 "./lexer.lex"
{return SUBASS;} 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 129 "./lexer.lex"
{return MULASS;} 
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 130 "./lexer.lex"
{return DIVASS;} 
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 131 "./lexer.lex"
{return MODASS;} 
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 132 "./lexer.lex"
{return EQ;} 
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 133 "./lexer.lex"
{return EQEQ;} 
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 134 "./lexer.lex"
{return GTEQ;} 
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 135 "./lexer.lex"
{return LTEQ;} 
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 136 "./lexer.lex"
{return EXEQ;} 
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 137 "./lexer.lex"
{return GT;} 
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 138 "./lexer.lex"
{return LT;} 
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 139 "./lexer.lex"
{return DOLLAR;} 
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 140 "./lexer.lex"
{return PLUS;} 
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 141 "./lexer.lex"
{return MINUS;} 
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 142 "./lexer.lex"
{return STAR;} 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 143 "./lexer.lex"
{return SLASH;} 
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 144 "./lexer.lex"
{return MODULO;} 
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 145 "./lexer.lex"
{return DBSTAR;} 
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 146 "./lexer.lex"
{return DBPLUS;} 
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 147 "./lexer.lex"
{return DBMINUS;} 
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 148 "./lexer.lex"
{return LBRACKET;} 
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 149 "./lexer.lex"
{return ARROW;} 
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 150 "./lexer.lex"
{return LPAR;} 
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 151 "./lexer.lex"
{return RPAR;} 
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 152 "./lexer.lex"
{return AT;} 
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 153 "./lexer.lex"
{return LBRACE;} 
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 154 "./lexer.lex"
{return PIPE;} 
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 155 "./lexer.lex"
{return RBRACE;} 
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 156 "./lexer.lex"
{return RBRACKET;} 
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 157 "./lexer.lex"
{return TRUE;} 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 158 "./lexer.lex"
{return FALSE;} 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 159 "./lexer.lex"
{return OR;} 
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 160 "./lexer.lex"
{return AND;} 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 161 "./lexer.lex"
{return NOT;} 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 163 "./lexer.lex"
{return FUNCTION;} 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 164 "./lexer.lex"
{return FUNCTION;} 
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 165 "./lexer.lex"
{return STFUNCTION;} 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 166 "./lexer.lex"
{return STFUNCTION;} 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 167 "./lexer.lex"
{return STATIC;} 
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 168 "./lexer.lex"
{return LOCAL;} 
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 169 "./lexer.lex"
{return QUIT;} 
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 170 "./lexer.lex"
{return NIL;} 
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 171 "./lexer.lex"
{return RETURN;} 
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 173 "./lexer.lex"
{return CLASS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 174 "./lexer.lex"
{return NEW;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 175 "./lexer.lex"
{yy_push_state(sym); return ATTRIB;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 176 "./lexer.lex"
{yy_push_state(sym); return METHOD;}
	YY_BREAK

case 65:
YY_RULE_SETUP
#line 178 "./lexer.lex"
{yy_pop_state();return SYMBOL;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 179 "./lexer.lex"
{}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 180 "./lexer.lex"
{return UNEXPECTEDCHAR;}
	YY_BREAK

case 68:
YY_RULE_SETUP
#line 183 "./lexer.lex"
{return WHILE;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 184 "./lexer.lex"
{return WHILE;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 185 "./lexer.lex"
{return EXIT;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 186 "./lexer.lex"
{return LOOP;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 187 "./lexer.lex"
{return END;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 188 "./lexer.lex"
{return END;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 189 "./lexer.lex"
{return END;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 191 "./lexer.lex"
{return FOR;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 192 "./lexer.lex"
{return TO;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 193 "./lexer.lex"
{return STEP;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 194 "./lexer.lex"
{return END;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 195 "./lexer.lex"
{return END;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 197 "./lexer.lex"
{return IF;} 
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 198 "./lexer.lex"
{return ELSEIF;} 
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 199 "./lexer.lex"
{return ELSE;} 
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 200 "./lexer.lex"
{return END;} 
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 202 "./lexer.lex"
{return DOCASE;} 
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 203 "./lexer.lex"
{return CASE;} 
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 204 "./lexer.lex"
{return OTHERWISE;} 
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 205 "./lexer.lex"
{return END;} 
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 207 "./lexer.lex"
{return BEGSEQ;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 208 "./lexer.lex"
{return BEGSEQ;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 209 "./lexer.lex"
{return RECOVER;} 
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 210 "./lexer.lex"
{return RECOVER;} 
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 211 "./lexer.lex"
{return FINALLY;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 212 "./lexer.lex"
{return END;} 
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 213 "./lexer.lex"
{return NAMESPACE;} 
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 214 "./lexer.lex"
{return USING;} 
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 216 "./lexer.lex"
{return NL;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 217 "./lexer.lex"
{incinputlineno();return NL;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 218 "./lexer.lex"
{incinputlineno();return NL;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 220 "./lexer.lex"
{return STRING;} 
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 221 "./lexer.lex"
{return NLSTEXT;} 
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 222 "./lexer.lex"
{return BINARYA;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 223 "./lexer.lex"
{return BINARYX;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 224 "./lexer.lex"
{return NUMBER;} 
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 225 "./lexer.lex"
{return NUMBER;} 
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 226 "./lexer.lex"
{return NUMBER;} 
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 227 "./lexer.lex"
{return SYMBOL;} 
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 229 "./lexer.lex"
{return COMPOUND;} 
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 230 "./lexer.lex"
{return COMPOUND;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 231 "./lexer.lex"
{return COMPOUND;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 232 "./lexer.lex"
{return COMPOUND;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 233 "./lexer.lex"
{return COMPOUND;}
	YY_BREAK
case 112:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 235 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 113:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 236 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 114:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 237 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 115:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 238 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 116:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 239 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 117:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 240 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 118:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 241 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 119:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 242 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 120:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 243 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 121:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 244 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 122:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 245 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 123:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 246 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 124:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 247 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 125:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 248 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 126:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 249 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 127:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 250 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 128:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 251 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 129:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 252 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 130:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 253 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 131:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 254 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 132:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 255 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 133:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 256 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 134:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 257 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 135:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 258 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 136:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 259 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 137:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 260 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 138:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 261 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 139:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 262 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 140:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 263 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 265 "./lexer.lex"
{}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 266 "./lexer.lex"
{return UNEXPECTEDCHAR;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 268 "./lexer.lex"
ECHO;
	YY_BREAK
#line 2035 "ppo/lexer.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(line):
			case YY_STATE_EOF(raw):
			case YY_STATE_EOF(sym):
				yyterminate();

     case YY_END_OF_BUFFER:
             {
             /* Amount of text matched not including the EOB char. */
             int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

             /* Undo the effects of YY_DO_BEFORE_ACTION. */
             *yy_cp = yy_hold_char;
             YY_RESTORE_YY_MORE_OFFSET

             if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
                     {
                     /* We're scanning a new file or input source.  It's
                      * possible that this happened because the user
                      * just pointed yyin at a new source and called
                      * yylex().  If so, then we have to assure
                      * consistency between yy_current_buffer and our
                      * globals.  Here is the right place to do so, because
                      * this is the first action (other than possibly a
                      * back-up) that will match for the new input source.
                      */
                     yy_n_chars = yy_current_buffer->yy_n_chars;
                     yy_current_buffer->yy_input_file = yyin;
                     yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
                     }

             /* Note that here we test for yy_c_buf_p "<=" to the position
              * of the first EOB in the buffer, since yy_c_buf_p will
              * already have been incremented past the NUL character
              * (since all states make transitions on EOB to the
              * end-of-buffer state).  Contrast this with the test
              * in input().
              */
             if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                     { /* This was really a NUL. */
                     yy_state_type yy_next_state;

                     yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                     yy_current_state = yy_get_previous_state();

                     /* Okay, we're now positioned to make the NUL
                      * transition.  We couldn't have
                      * yy_get_previous_state() go ahead and do it
                      * for us because it doesn't know how to deal
                      * with the possibility of jamming (and we don't
                      * want to build jamming into it because then it
                      * will run more slowly).
                      */

                     yy_next_state = yy_try_NUL_trans( yy_current_state );

                     yy_bp = yytext_ptr + YY_MORE_ADJ;

                     if ( yy_next_state )
                             {
                             /* Consume the NUL. */
                             yy_cp = ++yy_c_buf_p;
                             yy_current_state = yy_next_state;
                             goto yy_match;
                             }

                     else
                             {
				yy_cp = yy_c_buf_p;
                             goto yy_find_action;
                             }
                     }

             else switch ( yy_get_next_buffer() )
                     {
                     case EOB_ACT_END_OF_FILE:
                             {
                             yy_did_buffer_switch_on_eof = 0;

                             if ( yywrap() )
                                     {
                                     /* Note: because we've taken care in
                                      * yy_get_next_buffer() to have set up
                                      * yytext, we can now set up
                                      * yy_c_buf_p so that if some total
                                      * hoser (like flex itself) wants to
                                      * call the scanner after we return the
                                      * YY_NULL, it'll still work - another
                                      * YY_NULL will get returned.
                                      */
                                     yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                                     yy_act = YY_STATE_EOF(YY_START);
                                     goto do_action;
                                     }

                             else
                                     {
                                     if ( ! yy_did_buffer_switch_on_eof )
                                             YY_NEW_FILE;
                                     }
                             break;
                             }

                     case EOB_ACT_CONTINUE_SCAN:
                             yy_c_buf_p =
                                     yytext_ptr + yy_amount_of_matched_text;

                             yy_current_state = yy_get_previous_state();

                             yy_cp = yy_c_buf_p;
                             yy_bp = yytext_ptr + YY_MORE_ADJ;
                             goto yy_match;

                     case EOB_ACT_LAST_MATCH:
                             yy_c_buf_p =
                             &yy_current_buffer->yy_ch_buf[yy_n_chars];

                             yy_current_state = yy_get_previous_state();

                             yy_cp = yy_c_buf_p;
                             yy_bp = yytext_ptr + YY_MORE_ADJ;
                             goto yy_find_action;
                     }
             break;
             }

     default:
             YY_FATAL_ERROR(
                     "fatal flex scanner internal error--no action found" );
     } /* end of action switch */
             } /* end of scanning one token */
     } /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
     {
     yyin = arg_yyin;
     yyout = arg_yyout;
     yy_c_buf_p = 0;
     yy_init = 1;
     yy_start = 0;
     yy_flex_debug = 0;
     yylineno = 1;   // this will only get updated if %option yylineno

     yy_did_buffer_switch_on_eof = 0;

     yy_looking_for_trail_begin = 0;
     yy_more_flag = 0;
     yy_more_len = 0;
     yy_more_offset = yy_prev_more_offset = 0;

     yy_start_stack_ptr = yy_start_stack_depth = 0;
     yy_start_stack = 0;

     yy_current_buffer = 0;

#ifdef YY_USES_REJECT
     yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
     yy_state_buf = 0;
#endif
     }

yyFlexLexer::~yyFlexLexer()
     {
     delete yy_state_buf;
     yy_delete_buffer( yy_current_buffer );
     yy_flex_free( yy_start_stack );
     yy_start_stack=0;
     }

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
     {
     if ( new_in )
             {
             yy_delete_buffer( yy_current_buffer );
             yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
             }

     if ( new_out )
             yyout = new_out;
     }

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
     {
     if ( yyin->eof() || yyin->fail() )
             return 0;

#ifdef YY_INTERACTIVE
     yyin->get( buf[0] );

     if ( yyin->eof() )
             return 0;

     if ( yyin->bad() )
             return -1;

     return 1;

#else
     (void) yyin->read( buf, max_size );

     if ( yyin->bad() )
             return -1;
     else
             return yyin->gcount();
#endif
     }

void yyFlexLexer::LexerOutput( const char* buf, int size )
     {
     (void) yyout->write( buf, size );
     }

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *   EOB_ACT_LAST_MATCH -
 *   EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *   EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
     {
     register char *dest = yy_current_buffer->yy_ch_buf;
     register char *source = yytext_ptr;
     register int number_to_move, i;
     int ret_val;

     if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
             YY_FATAL_ERROR(
             "fatal flex scanner internal error--end of buffer missed" );

     if ( yy_current_buffer->yy_fill_buffer == 0 )
             { /* Don't try to fill the buffer, so this is an EOF. */
             if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
                     {
                     /* We matched a single character, the EOB, so
                      * treat this as a final EOF.
                      */
                     return EOB_ACT_END_OF_FILE;
                     }

             else
                     {
                     /* We matched some text prior to the EOB, first
                      * process it.
                      */
                     return EOB_ACT_LAST_MATCH;
                     }
             }

     /* Try to read more data. */

     /* First move last chars to start of buffer. */
     number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

     for ( i = 0; i < number_to_move; ++i )
             *(dest++) = *(source++);

     if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
             /* don't do the read, it's not guaranteed to return an EOF,
              * just force an EOF
              */
             yy_current_buffer->yy_n_chars = yy_n_chars = 0;

     else
             {
             int num_to_read =
                     yy_current_buffer->yy_buf_size - number_to_move - 1;

             while ( num_to_read <= 0 )
                     { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
                     YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

                     /* just a shorter name for the current buffer */
                     YY_BUFFER_STATE b = yy_current_buffer;

                     int yy_c_buf_p_offset =
                             (int) (yy_c_buf_p - b->yy_ch_buf);

                     if ( b->yy_is_our_buffer )
                             {
                             int new_size = b->yy_buf_size * 2;

                             if ( new_size <= 0 )
                                     b->yy_buf_size += b->yy_buf_size / 8;
                             else
                                     b->yy_buf_size *= 2;

                             b->yy_ch_buf = (char *)
                                     /* Include room in for 2 EOB chars. */
                                     yy_flex_realloc( (void *) b->yy_ch_buf,
                                                      b->yy_buf_size + 2 );
                             }
                     else
                             /* Can't grow it, we don't own it. */
                             b->yy_ch_buf = 0;

                     if ( ! b->yy_ch_buf )
                             YY_FATAL_ERROR(
                             "fatal error - scanner input buffer overflow" );

                     yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                     num_to_read = yy_current_buffer->yy_buf_size -
                                             number_to_move - 1;
#endif
                     }

             if ( num_to_read > YY_READ_BUF_SIZE )
                     num_to_read = YY_READ_BUF_SIZE;

             /* Read in more data. */
             YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
                     yy_n_chars, num_to_read );

             yy_current_buffer->yy_n_chars = yy_n_chars;
             }

     if ( yy_n_chars == 0 )
             {
             if ( number_to_move == YY_MORE_ADJ )
                     {
                     ret_val = EOB_ACT_END_OF_FILE;
                     yyrestart( yyin );
                     }

             else
                     {
                     ret_val = EOB_ACT_LAST_MATCH;
                     yy_current_buffer->yy_buffer_status =
                             YY_BUFFER_EOF_PENDING;
                     }
             }

     else
             ret_val = EOB_ACT_CONTINUE_SCAN;

     yy_n_chars += number_to_move;
     yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
     yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

     yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

     return ret_val;
     }


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
     {
     register yy_state_type yy_current_state;
     register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

     for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
             {
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 482 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
             }

     return yy_current_state;
     }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *   next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
     {
     register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 482 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 481);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

     return yy_is_jam ? 0 : yy_current_state;
     }


void yyFlexLexer::yyunput( int c, register char* yy_bp )
     {
     register char *yy_cp = yy_c_buf_p;

     /* undo effects of setting up yytext */
     *yy_cp = yy_hold_char;

     if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
             { /* need to shift things up to make room */
             /* +2 for EOB chars. */
             register int number_to_move = yy_n_chars + 2;
             register char *dest = &yy_current_buffer->yy_ch_buf[
                                     yy_current_buffer->yy_buf_size + 2];
             register char *source =
                             &yy_current_buffer->yy_ch_buf[number_to_move];

             while ( source > yy_current_buffer->yy_ch_buf )
                     *--dest = *--source;

             yy_cp += (int) (dest - source);
             yy_bp += (int) (dest - source);
             yy_current_buffer->yy_n_chars =
                     yy_n_chars = yy_current_buffer->yy_buf_size;

             if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                     YY_FATAL_ERROR( "flex scanner push-back overflow" );
             }

     *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

     yytext_ptr = yy_bp;
     yy_hold_char = *yy_cp;
     yy_c_buf_p = yy_cp;
     }


int yyFlexLexer::yyinput()
     {
     int c;

     *yy_c_buf_p = yy_hold_char;

     if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
             {
             /* yy_c_buf_p now points to the character we want to return.
              * If this occurs *before* the EOB characters, then it's a
              * valid NUL; if not, then we've hit the end of the buffer.
              */
             if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                     /* This was really a NUL. */
                     *yy_c_buf_p = '\0';

             else
                     { /* need more input */
                     int offset = yy_c_buf_p - yytext_ptr;
                     ++yy_c_buf_p;

                     switch ( yy_get_next_buffer() )
                             {
                             case EOB_ACT_LAST_MATCH:
                                     /* This happens because yy_g_n_b()
                                      * sees that we've accumulated a
                                      * token and flags that we need to
                                      * try matching the token before
                                      * proceeding.  But for input(),
                                      * there's no matching to consider.
                                      * So convert the EOB_ACT_LAST_MATCH
                                      * to EOB_ACT_END_OF_FILE.
                                      */

                                     /* Reset buffer status. */
                                     yyrestart( yyin );

                                     /* fall through */

                             case EOB_ACT_END_OF_FILE:
                                     {
                                     if ( yywrap() )
                                             return EOF;

                                     if ( ! yy_did_buffer_switch_on_eof )
                                             YY_NEW_FILE;
#ifdef __cplusplus
                                     return yyinput();
#else
                                     return input();
#endif
                                     }

                             case EOB_ACT_CONTINUE_SCAN:
                                     yy_c_buf_p = yytext_ptr + offset;
                                     break;
                             }
                     }
             }

     c = *(unsigned char *) yy_c_buf_p;      /* cast for 8-bit char's */
     *yy_c_buf_p = '\0';    /* preserve yytext */
     yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

     return c;
     }


void yyFlexLexer::yyrestart( std::istream* input_file )
     {
     if ( ! yy_current_buffer )
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

     yy_init_buffer( yy_current_buffer, input_file );
     yy_load_buffer_state();
     }


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
     {
     if ( yy_current_buffer == new_buffer )
             return;

     if ( yy_current_buffer )
             {
             /* Flush out information for old buffer. */
             *yy_c_buf_p = yy_hold_char;
             yy_current_buffer->yy_buf_pos = yy_c_buf_p;
             yy_current_buffer->yy_n_chars = yy_n_chars;
             }

     yy_current_buffer = new_buffer;
     yy_load_buffer_state();

     /* We don't actually know whether we did this switch during
      * EOF (yywrap()) processing, but the only time this flag
      * is looked at is after yywrap() is called, so it's safe
      * to go ahead and always set it.
      */
     yy_did_buffer_switch_on_eof = 1;
     }


void yyFlexLexer::yy_load_buffer_state()
     {
     yy_n_chars = yy_current_buffer->yy_n_chars;
     yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
     yyin = yy_current_buffer->yy_input_file;
     yy_hold_char = *yy_c_buf_p;
     }


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
     {
     YY_BUFFER_STATE b;

     b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
     if ( ! b )
             YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

     b->yy_buf_size = size;

     /* yy_ch_buf has to be 2 characters longer than the size given because
      * we need to put in 2 end-of-buffer characters.
      */
     b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
     if ( ! b->yy_ch_buf )
             YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

     b->yy_is_our_buffer = 1;

     yy_init_buffer( b, file );

     return b;
     }


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
     {
     if ( ! b )
             return;

     if ( b == yy_current_buffer )
             yy_current_buffer = (YY_BUFFER_STATE) 0;

     if ( b->yy_is_our_buffer )
             yy_flex_free( (void *) b->yy_ch_buf );

     yy_flex_free( (void *) b );
     }


//extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

     {
     yy_flush_buffer( b );

     b->yy_input_file = file;
     b->yy_fill_buffer = 1;

     b->yy_is_interactive = 0;
     }


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
     {
     if ( ! b )
             return;

     b->yy_n_chars = 0;

     /* We always need two end-of-buffer characters.  The first causes
      * a transition to the end-of-buffer state.  The second causes
      * a jam in that state.
      */
     b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
     b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

     b->yy_buf_pos = &b->yy_ch_buf[0];

     b->yy_at_bol = 1;
     b->yy_buffer_status = YY_BUFFER_NEW;

     if ( b == yy_current_buffer )
             yy_load_buffer_state();
     }


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
     {
     if ( yy_start_stack_ptr >= yy_start_stack_depth )
             {
             yy_size_t new_size;

             yy_start_stack_depth += YY_START_STACK_INCR;
             new_size = yy_start_stack_depth * sizeof( int );

             if ( ! yy_start_stack )
                     yy_start_stack = (int *) yy_flex_alloc( new_size );

             else
                     yy_start_stack = (int *) yy_flex_realloc(
                                     (void *) yy_start_stack, new_size );

             if ( ! yy_start_stack )
                     YY_FATAL_ERROR(
                     "out of memory expanding start-condition stack" );
             }

     yy_start_stack[yy_start_stack_ptr++] = YY_START;

     BEGIN(new_state);
     }
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
     {
     if ( --yy_start_stack_ptr < 0 )
             YY_FATAL_ERROR( "start-condition stack underflow" );

     BEGIN(yy_start_stack[yy_start_stack_ptr]);
     }
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
     {
     return yy_start_stack[yy_start_stack_ptr - 1];
     }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
     {
     std::cerr << msg << '\n';
     exit( YY_EXIT_FAILURE );
     }


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
     do \
             { \
             /* Undo effects of setting up yytext. */ \
             yytext[yyleng] = yy_hold_char; \
             yy_c_buf_p = yytext + n; \
             yy_hold_char = *yy_c_buf_p; \
             *yy_c_buf_p = '\0'; \
             yyleng = n; \
             } \
     while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
     {
     register int i;
     for ( i = 0; i < n; ++i )
             s1[i] = s2[i];
     }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
     {
     register int n;
     for ( n = 0; s[n]; ++n )
             ;

     return n;
     }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
     {
     return (void *) malloc( size );
     }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
     {
     /* The cast to (char *) in the following accommodates both
      * implementations that use char* generic pointers, and those
      * that use void* generic pointers.  It works with the latter
      * because both ANSI C and C++ allow castless assignment from
      * any pointer type to void*, and deal with argument conversions
      * as though doing an assignment.
      */
     return (void *) realloc( (char *) ptr, size );
     }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
     {
     free( ptr );
     }

#if YY_MAIN
int main()
     {
     yylex();
     return 0;
     }
#endif
#line 268 "./lexer.lex"


