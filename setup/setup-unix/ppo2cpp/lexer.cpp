#line 2 "ppo/lexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else        /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif       /* __STDC__ */
#endif       /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *   if ( condition_holds )
 *           yyless( 5 );
 *   else
 *           do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
     do \
             { \
             /* Undo effects of setting up yytext. */ \
             *yy_cp = yy_hold_char; \
             YY_RESTORE_YY_MORE_OFFSET \
             yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
             YY_DO_BEFORE_ACTION; /* set up yytext again */ \
             } \
     while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
     {
     std::istream* yy_input_file;

     char *yy_ch_buf;                /* input buffer */
     char *yy_buf_pos;               /* current position in input buffer */

     /* Size of input buffer in bytes, not including room for EOB
      * characters.
      */
     yy_size_t yy_buf_size;

     /* Number of characters read into yy_ch_buf, not including EOB
      * characters.
      */
     int yy_n_chars;

     /* Whether we "own" the buffer - i.e., we know we created it,
      * and can realloc() it to grow it, and should free() it to
      * delete it.
      */
     int yy_is_our_buffer;

     /* Whether this is an "interactive" input source; if so, and
      * if we're using stdio for input, then we want to use getc()
      * instead of fread(), to make sure we stop fetching input after
      * each newline.
      */
     int yy_is_interactive;

     /* Whether we're considered to be at the beginning of a line.
      * If so, '^' rules will be active on the next match, otherwise
      * not.
      */
     int yy_at_bol;

     /* Whether to try to fill the input buffer when we reach the
      * end of it.
      */
     int yy_fill_buffer;

     int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
     /* When an EOF's been seen but there's still some text to process
      * then we mark the buffer as YY_EOF_PENDING, to indicate that we
      * shouldn't try reading from the input source any more.  We might
      * still have a bunch of tokens to match, though, because of
      * possible backing-up.
      *
      * When we actually see the EOF, we change the status to "new"
      * (via yyrestart()), so that the user can continue scanning by
      * just pointing yyin at a new input file.
      */
#define YY_BUFFER_EOF_PENDING 2
     };


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
     { \
     if ( ! yy_current_buffer ) \
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
     yy_current_buffer->yy_is_interactive = is_interactive; \
     }

#define yy_set_bol(at_bol) \
     { \
     if ( ! yy_current_buffer ) \
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
     yy_current_buffer->yy_at_bol = at_bol; \
     }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <flexlexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int ppo2cpp_lexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
     yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
     yy_hold_char = *yy_cp; \
     *yy_cp = '\0'; \
     yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
static yyconst short int yy_acclist[520] =
    {   0,
      145,  145,    4,    4,   69,   69,  148,  146,  147,  145,
      146,  147,  100,  147,   53,  146,  147,  146,  147,  146,
      147,   31,  146,  147,   36,  146,  147,  146,  147,   42,
      146,  147,   43,  146,  147,   34,  146,  147,   32,  146,
      147,   14,  146,  147,   33,  146,  147,   12,  146,  147,
       35,  146,  147,  106,  146,  147,  106,  146,  147,   15,
      146,  147,   99,  146,  147,   30,  146,  147,   24,  146,
      147,   29,  146,  147,   44,  146,  147,  109,  146,  147,
      109,  146,  147,  109,  146,  147,  109,  146,  147,  109,
      146,  147,  109,  146,  147,  109,  146,  147,  109,  146,

      147,  109,  146,  147,  109,  146,  147,  109,  146,  147,
      109,  146,  147,  109,  146,  147,  109,  146,  147,  109,
      146,  147,  109,  146,  147,  109,  146,  147,  109,  146,
      147,  109,  146,  147,  109,  146,  147,   40,  146,  147,
       48,  146,  147,   37,  146,  147,  109,  146,  147,   45,
      146,  147,   46,  146,  147,   47,  146,  147,  147,    4,
      147,    5,  147,  147,  147,    2,  147,   11,  147,   10,
      147,    9,   11,  147,   11,  147,    8,   11,  147,   70,
      147,   69,   70,  147,   68,   70,  147,  145,   28,  102,
       22,   37,   20,   38,   18,   39,   19,   41,   13,  110,

      110,  110,  110,  110,  110,   21,  106,   16,   17,  111,
       27,   25,   26,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,   83,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,   79,  109,  109,
      109,    4,    3,    2,   69,   68,  110,  110,   50,  110,
      110,   49,  101,  106,  108,  107,   23,  114,  111,  103,
      109,  109,  109,  109,  109,  109,  109,   75,  109,  109,
      109,   78,  109,  109,  109,  109,  109,  109,   65,  109,
      109,   61,  109,  109,  109,  109,  109,  109,  109,  109,
      132,  109,  109,  105,  104,    2,  110,  110,   51,  115,

      114,  114,  114,  113,  109,  109,   88,  109,  109,  109,
      109,   85,  109,  128,  109,  109,  109,  109,  109,  109,
       73,  109,  109,  131,  109,  109,   74,  109,  109,  109,
      123,   81,  109,  121,  109,  109,   60,  109,  109,  109,
      109,   80,  109,  109,  109,    1,   52,   53,  112,  115,
      115,  115,  114,    6,  113,  109,   91,  109,   63,  109,
      109,  109,  136,  109,  109,   76,  109,  109,   86,  109,
      109,  109,  126,  109,  109,   59,  109,  127,  109,  109,
      134,  109,  109,  120,  109,  109,  109,  133,   98,  109,
       72,  109,    7,  112,  115,  114,   66,  109,  140,  109,

      122,   87,  109,  109,   84,  109,  109,  129,   82,  109,
      137,  109,  109,  109,  109,  119,   67,  109,  109,  109,
      109,  109,   62,  109,   58,  109,  144,  115,  124,  109,
       87,   71,  109,   90,  109,  135,  109,  109,   95,  109,
      109,  125,  109,  109,  109,   93,  109,  118,  109,  109,
      109,  109,   71,  139,  109,   77,  109,  142,   54,  109,
      109,  109,  109,  141,  109,  109,  109,  109,  109,  109,
      130,  116,   97,  109,   89,  109,   55,  109,  109,  109,
      109,  109,  109,  109,  143,  138,  117,  109,  109,  109,
      109,  109,   96,  109,  109,   64,  109,  109,  109,  109,

       96,   94,  109,   64,  109,  109,   92,  109,   94,  109,
      109,   92,   56,  109,  109,   56,   57,  109,   57
    } ;

static yyconst short int yy_accept[506] =
    {   0,
        1,    2,    3,    4,    5,    5,    5,    6,    7,    8,
       10,   13,   15,   18,   20,   22,   25,   28,   30,   33,
       36,   39,   42,   45,   48,   51,   54,   57,   60,   63,
       66,   69,   72,   75,   78,   81,   84,   87,   90,   93,
       96,   99,  102,  105,  108,  111,  114,  117,  120,  123,
      126,  129,  132,  135,  138,  141,  144,  147,  150,  153,
      156,  159,  160,  162,  164,  165,  166,  168,  170,  172,
      175,  177,  180,  182,  185,  188,  189,  190,  190,  191,
      191,  192,  192,  193,  194,  195,  196,  197,  198,  199,
      199,  200,  201,  202,  203,  204,  205,  206,  206,  207,

      207,  208,  208,  208,  208,  208,  209,  210,  211,  211,
      212,  213,  214,  214,  214,  214,  214,  215,  216,  217,
      218,  219,  220,  221,  222,  223,  224,  225,  226,  228,
      229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      240,  241,  242,  242,  242,  242,  242,  243,  243,  244,
      244,  244,  245,  245,  246,  247,  247,  248,  249,  250,
      251,  252,  253,  253,  254,  255,  256,  257,  257,  257,
      257,  257,  257,  258,  259,  260,  260,  260,  261,  261,
      261,  262,  263,  264,  265,  265,  266,  267,  268,  270,
      271,  272,  274,  275,  276,  277,  278,  279,  281,  282,

      284,  285,  286,  287,  288,  289,  290,  291,  291,  292,
      293,  294,  295,  295,  295,  295,  296,  296,  297,  297,
      297,  298,  299,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  301,  302,  303,  303,  304,  304,  304,  304,
      305,  306,  307,  309,  310,  310,  310,  311,  312,  314,
      314,  315,  316,  317,  318,  319,  320,  321,  323,  324,
      324,  325,  326,  327,  329,  330,  331,  331,  332,  334,
      334,  335,  336,  337,  339,  340,  341,  342,  344,  345,
      346,  346,  346,  346,  346,  347,  348,  349,  349,  350,
      350,  350,  350,  351,  352,  352,  353,  353,  354,  355,

      356,  357,  359,  361,  361,  361,  362,  363,  363,  364,
      365,  365,  366,  368,  369,  371,  372,  373,  373,  374,
      375,  376,  378,  378,  379,  380,  381,  381,  382,  383,
      384,  384,  385,  386,  387,  388,  388,  389,  391,  393,
      394,  395,  395,  395,  396,  397,  399,  399,  400,  401,
      401,  402,  402,  402,  404,  405,  407,  407,  408,  408,
      409,  411,  411,  412,  413,  414,  415,  416,  416,  417,
      419,  420,  421,  422,  423,  425,  427,  427,  428,  429,
      429,  430,  430,  431,  432,  432,  434,  434,  436,  436,
      437,  438,  439,  441,  442,  442,  443,  444,  445,  446,

      448,  448,  449,  450,  451,  452,  452,  453,  454,  454,
      454,  455,  456,  458,  458,  459,  461,  462,  463,  464,
      464,  465,  466,  466,  466,  466,  467,  468,  469,  469,
      470,  470,  471,  471,  472,  472,  473,  475,  477,  479,
      479,  480,  480,  480,  480,  481,  482,  483,  483,  484,
      484,  485,  485,  486,  486,  487,  487,  488,  488,  489,
      489,  489,  489,  490,  491,  492,  492,  493,  493,  495,
      495,  496,  496,  496,  496,  498,  499,  500,  500,  501,
      502,  502,  504,  505,  505,  505,  506,  507,  507,  509,
      510,  510,  510,  511,  512,  513,  513,  513,  515,  516,

      517,  517,  519,  520,  520
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   36,
       51,   52,   53,   54,   36,    1,   55,   28,   29,   30,

       56,   32,   33,   34,   57,   36,   36,   58,   38,   59,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   36,   60,   61,   62,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[63] =
    {   0,
        1,    2,    1,    1,    3,    1,    1,    1,    4,    5,
        6,    1,    1,    1,    7,    8,    1,    9,    9,    9,
       10,    1,    1,   11,   12,   13,   14,   14,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
        1,    1,    1,    1,   14,   14,   15,   15,   15,    1,
        1,    1
    } ;

static yyconst short int yy_base[547] =
    {   0,
        0,    0,   61,   66,   69,   73,  125,    0, 1216, 1817,
     1211, 1817, 1187, 1183, 1125, 1817, 1154, 1168, 1817, 1817,
       53,   69, 1817,   73,  186,   66,  173,   83,   85, 1817,
       87, 1138, 1137,   95,  188,  192,  197,  195,  212,  227,
       92,  196,  204,  235,  241,  193,  215,  194,  244,  245,
      262,  263,  267,  278, 1817, 1817, 1817,  290, 1817, 1817,
     1817, 1817, 1156, 1817, 1137, 1127,   97, 1817, 1817, 1817,
     1111, 1817, 1817, 1131,    0, 1117, 1817, 1111, 1817, 1057,
     1817, 1103, 1817, 1817, 1817, 1817, 1817, 1817, 1817,   89,
     1817,  161,    0, 1093, 1068, 1055, 1081, 1085, 1817,  100,

      290,  104,    0,  301,  237,  302, 1817,    0,    0, 1817,
     1817, 1817, 1071, 1064,  279, 1046,  312,  313,  314,  315,
      317,  319,  318,  321,  322,  337,  338,  339,  340,  348,
      341,  359,  358,  367,  368,  369,  378,  385,  388,  406,
      397,  403, 1065, 1053, 1051, 1043, 1044, 1040, 1817, 1027,
      346,  408,    0, 1029,    0,  971,    0,  984, 1817,  964,
      990, 1817,  991, 1817,  421,  186,    0,  272,  329,  431,
      421,  432,  373,  448,    0,  967,  985, 1817,  978,  984,
      434,  444,  450,  451,  460,  461,  453,  465,  520,  467,
      470,  468,  471,  488,  490,  489,  509,  517,  492,  524,

      526,  527,  536,  543,  544,  546,  545,  551, 1817,  560,
      569, 1817,    0,    0,  975, 1817,  956,  554,  917,  880,
      915,  898, 1817,  415,  576,  908,  877,  577,  592,  497,
      593,  594,  595, 1817,  871,  612,  831,  824,  830,    0,
      583,  574,  414,  610,  230,  769,  615,  621,  627,  629,
     1817,  633,  632,  649,  648,  650,  651,  659,  653,  677,
     1817,  655,  680,  681,  684,  692,  699, 1817,  703,  706,
     1817,  708,  710,  718,  656,  720,  724,  727,  725,  729,
      759,  744,  721,  679, 1817, 1817, 1817,  700,    0,  696,
      745,  599,  752, 1817,  674,  763,  639,  767, 1817,    0,

      772,  780,  782,  582,   32,  755,  730,  789, 1817,  799,
      223,  792,  800,  804,  807,  806,  810,  818, 1817,  824,
      827,  825,  828, 1817,  835,  735,  844, 1817,  849,  851,
      853, 1817,  855,  856,  870,  872, 1817,  888,  874, 1817,
        0,  890,  622,  892,  903,  907,  910, 1817,  876,  925,
     1817,  282,  178,  878,  919,  881,  528,  922,  928, 1817,
      945,  947, 1817,  931,  937,  943,  949,  957, 1817,  966,
      964,  968,  954,  969,  983,  986,  995, 1817,  997, 1006,
     1817,  354, 1002, 1817,  364, 1018,  517, 1022, 1024, 1817,
     1026, 1027, 1033, 1045, 1049, 1817, 1048, 1051, 1053, 1059,

     1070, 1817, 1052, 1076, 1077,  512, 1079, 1817,  462, 1091,
     1817, 1085, 1111, 1113, 1817, 1130, 1116, 1128, 1133, 1139,
     1817, 1135,  609,  471,  471, 1136, 1137, 1154,  456, 1151,
      352, 1088, 1155, 1817, 1158, 1817, 1165, 1185, 1188,  417,
     1184,  622,  412,  361, 1190, 1191, 1195,  513, 1200,  365,
     1206, 1207, 1817, 1216, 1817, 1228, 1817,  311, 1210,  348,
      320,  283, 1212, 1227, 1233,  541, 1231,  576, 1238,  713,
     1243,  245,  241,  699, 1248, 1250, 1252,  234, 1253, 1817,
      199, 1255, 1817,  463,   94, 1259, 1264,  821, 1271, 1817,
       74,   62, 1273, 1275, 1817,  889,   30, 1276, 1285, 1817,

      844, 1278, 1817, 1817, 1341, 1356, 1371, 1386, 1400, 1414,
     1428, 1443, 1458, 1465, 1472, 1487,  207, 1501, 1515, 1522,
      495, 1537, 1552, 1565, 1576, 1590, 1605,  734, 1619, 1633,
     1647, 1654, 1668,  766,  804, 1675, 1689, 1703, 1717, 1731,
     1738, 1745, 1759, 1773, 1787, 1801
    } ;

static yyconst short int yy_def[547] =
    {   0,
      504,    1,  505,  505,  506,  506,  504,    7,  504,  504,
      504,  504,  504,  507,  504,  504,  504,  508,  504,  504,
      504,  504,  504,  504,  509,  504,  504,  504,  510,  504,
      504,  504,  504,  504,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  504,  504,  504,  511,  504,  504,
      504,  504,  504,  504,  512,  513,  504,  504,  504,  504,
      504,  504,  504,  504,  514,  504,  504,  507,  504,  504,
      504,  508,  504,  504,  504,  504,  504,  504,  504,  509,
      504,  515,  515,  515,  515,  515,  515,  516,  504,  504,

      504,  504,  517,  510,  518,  519,  504,  520,  521,  504,
      504,  504,  522,  523,  504,  504,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  524,  525,  526,  527,  504,  512,  504,  513,
      504,  504,  528,  504,  514,  504,  515,  515,  504,  515,
      515,  504,  516,  504,  504,  504,  517,  518,  518,  529,
      519,  519,  530,  531,  520,  532,  522,  504,  523,  533,
      511,  511,  511,  511,  504,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  504,  504,  511,
      511,  504,  534,  535,  526,  504,  527,  504,  536,  504,
      515,  515,  504,  518,  504,  537,  538,  529,  519,  530,
      530,  539,  504,  504,  540,  531,  532,  504,  533,  541,
      511,  511,  511,  511,  504,  504,  511,  511,  511,  504,
      504,  511,  511,  511,  511,  511,  511,  511,  511,  504,
      504,  511,  511,  511,  511,  511,  504,  504,  511,  504,
      504,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      524,  525,  536,  504,  504,  504,  504,  537,  542,  538,
      543,  530,  504,  504,  544,  539,  540,  545,  504,  541,

      511,  511,  511,  504,  504,  511,  511,  504,  504,  511,
      504,  511,  511,  511,  511,  511,  511,  504,  504,  511,
      511,  511,  504,  504,  511,  511,  504,  504,  511,  511,
      504,  504,  511,  511,  511,  504,  504,  511,  511,  504,
      542,  543,  544,  546,  545,  511,  504,  504,  511,  504,
      504,  504,  504,  511,  511,  511,  504,  511,  504,  504,
      511,  504,  504,  511,  511,  511,  511,  504,  504,  511,
      511,  511,  511,  511,  511,  511,  504,  504,  546,  504,
      504,  504,  511,  504,  504,  511,  504,  511,  504,  504,
      511,  511,  511,  511,  504,  504,  511,  511,  511,  511,

      504,  504,  511,  511,  511,  504,  511,  504,  504,  504,
      504,  511,  511,  504,  504,  511,  511,  511,  511,  504,
      504,  511,  504,  504,  504,  511,  511,  511,  504,  511,
      504,  511,  504,  504,  504,  504,  511,  511,  511,  504,
      511,  504,  504,  504,  511,  511,  511,  504,  511,  504,
      511,  504,  504,  504,  504,  504,  504,  504,  511,  504,
      504,  504,  511,  511,  511,  504,  511,  504,  511,  504,
      511,  504,  504,  504,  511,  511,  511,  504,  511,  504,
      504,  511,  504,  504,  504,  511,  511,  504,  511,  504,
      504,  504,  511,  511,  504,  504,  504,  511,  511,  504,

      504,  511,  504,    0,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504
    } ;

static yyconst short int yy_nxt[1880] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   41,   42,   41,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   41,   53,   54,   41,
       55,   10,   56,   57,   58,   39,   42,   43,   45,   59,
       60,   61,   63,   64,   83,   65,  353,   63,   64,   66,
       65,   69,  501,   70,   66,   69,   84,   70,   67,   67,
       67,   85,   98,   67,   67,   67,  104,   87,  353,   99,
       90,   71,   86,  115,  105,   71,   88,   89,  100,  113,

      101,  101,  101,  114,  504,  106,  116,  497,  107,  109,
      110,   77,  151,  496,  152,  152,  152,  165,  165,  165,
       72,  166,  166,  492,   72,   73,   74,   62,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   73,   73,   73,   73,   75,
       75,   75,   75,   75,   73,   73,   73,   90,  100,  115,
      101,  101,  101,  115,  115,  115,  115,  115,  115,  158,

      102,   91,  116,  166,  166,  115,  116,  116,  116,  116,
      116,  116,   92,  115,  385,  167,  115,   94,  116,  158,
      167,  103,  119,  120,   95,   96,  116,  129,  115,  116,
       97,  490,  118,  121,  122,  385,  115,  135,  168,  137,
       92,  116,  115,  130,   95,  115,  115,  119,  123,  116,
      124,  120,  169,  357,  121,  116,  304,  136,  116,  116,
      125,  126,  488,  115,  115,  131,  127,  132,  115,  123,
      124,  133,  128,  168,  138,  134,  116,  116,  357,  115,
      115,  116,  143,  126,  304,  484,  144,  169,  483,  139,
      131,  115,  116,  116,  145,  132,  133,  134,  146,  138,

      142,  140,  104,  171,  116,  100,  141,  101,  101,  101,
      105,  474,  384,  115,  115,  115,  115,  172,  115,  115,
      185,  504,  115,  115,  504,  173,  116,  116,  116,  116,
      224,  116,  116,  116,  118,  116,  116,  384,  115,  115,
      115,  115,  115,  184,  504,  470,  182,  186,  473,  115,
      189,  116,  116,  116,  116,  116,  190,  181,  183,  115,
      115,  188,  116,  218,  218,  218,  187,  470,  115,  115,
      115,  184,  116,  116,  230,  191,  194,  193,  190,  115,
      192,  116,  116,  116,  406,  196,  115,  195,  231,  115,
      450,  472,  116,  468,  408,  191,  197,  193,  115,  116,

      462,  201,  116,  200,  115,  198,  199,  208,  202,  406,
      450,  116,  203,  204,  206,  115,  224,  116,  207,  408,
      116,  209,  171,  151,  200,  152,  152,  152,  116,  205,
      504,  210,  225,  229,  203,  115,  172,  211,  165,  165,
      165,  226,  206,  207,  504,  115,  227,  504,  116,  233,
      461,  115,  115,  210,  115,  504,  227,  234,  116,  211,
      458,  185,  115,  235,  116,  116,  115,  116,  115,  260,
      461,  115,  115,  235,  116,  116,  241,  261,  242,  116,
      243,  116,  116,  261,  116,  116,  248,  247,  245,  115,
      115,  115,  431,  115,  244,  249,  259,  491,  230,  262,

      242,  448,  116,  116,  116,  243,  116,  246,  176,  176,
      115,  258,  231,  444,  263,  247,  443,  431,  267,  491,
      249,  250,  265,  116,  259,  270,  268,  115,  115,  251,
      264,  116,  268,  271,  116,  251,  269,  115,  116,  266,
      116,  116,  263,  466,  115,  115,  115,  115,  252,  253,
      116,  254,  208,  429,  255,  273,  272,  116,  116,  116,
      116,  115,  409,  256,  266,  116,  209,  257,  466,  387,
      115,  218,  218,  218,  116,  115,  255,  225,  225,  478,
      274,  272,  275,  116,  115,  278,  226,  226,  116,  276,
      277,  227,  227,  229,  292,  293,  233,  116,  279,  478,

      292,  227,  227,  294,  234,  280,  480,  504,  504,  295,
      235,  115,  302,  233,  504,  504,  115,  301,  279,  295,
      235,  234,  115,  343,  116,  352,  280,  235,  308,  116,
      250,  480,  302,  115,  115,  116,  309,  235,  251,  301,
      297,  116,  309,  116,  251,  442,  116,  116,  460,  115,
      115,  115,  115,  303,  115,  307,  115,  115,  306,  312,
      318,  310,  116,  116,  116,  116,  442,  116,  319,  116,
      116,  313,  311,  116,  319,  343,  460,  307,  260,  315,
      316,  115,  323,  310,  317,  115,  261,  312,  314,  320,
      324,  116,  261,  115,  116,  116,  324,  290,  116,  321,

      267,  288,  333,  340,  327,  316,  116,  270,  268,  115,
      320,  115,  328,  116,  268,  271,  322,  116,  328,  331,
      116,  115,  116,  325,  116,  115,  115,  332,  336,  485,
      115,  115,  116,  332,  116,  326,  115,  322,  116,  116,
      330,  116,  337,  116,  116,  284,  225,  219,  219,  116,
      329,  481,  212,  293,  485,  226,  115,  338,  335,  339,
      227,  294,  334,  212,  293,  330,  355,  295,  233,  116,
      227,  481,  294,  115,  281,  371,  234,  295,  295,  281,
      335,  347,  235,  350,  339,  354,  116,  355,  295,  348,
      308,  351,  235,  115,  116,  348,  116,  351,  309,  346,

      115,  359,  305,  116,  309,  115,  116,  115,  362,  360,
      354,  115,  282,  116,  116,  360,  363,  282,  116,  318,
      116,  116,  363,  349,  116,  115,  368,  319,  115,  323,
      356,  239,  116,  319,  369,  358,  115,  324,  116,  116,
      369,  116,  116,  324,  365,  327,  361,  364,  299,  116,
      115,  495,  115,  328,  331,  238,  115,  115,  116,  328,
      366,  367,  332,  116,  370,  116,  365,  116,  332,  116,
      116,  115,  297,  336,  503,  115,  495,  115,  290,  115,
      373,  366,  115,  367,  116,  374,  116,  337,  116,  377,
      116,  225,  116,  293,  375,  116,  372,  378,  376,  503,

      226,  294,  116,  378,  233,  227,  383,  295,  380,  288,
      374,  347,  234,  287,  375,  227,  381,  295,  235,  348,
      115,  116,  381,  115,  116,  348,  350,  500,  235,  359,
      286,  383,  115,  116,  351,  285,  116,  360,  115,  116,
      351,  284,  116,  360,  115,  116,  389,  500,  362,  386,
      115,  116,  388,  382,  390,  115,  363,  116,  368,  116,
      390,  116,  363,  116,  216,  115,  369,  395,  116,  115,
      115,  116,  369,  392,  386,  396,  391,  388,  116,  216,
      116,  396,  116,  116,  115,  239,  178,  401,  394,  178,
      397,  238,  393,  164,  392,  402,  377,  116,  293,  399,

      116,  402,  398,  115,  378,  223,  294,  380,  222,  116,
      378,  400,  295,  221,  403,  381,  116,  404,  397,  115,
      116,  381,  295,  410,  398,  389,  405,  115,  115,  220,
      154,  411,  116,  390,  414,  149,  116,  411,  116,  390,
      116,  116,  415,  407,  149,  147,  115,  116,  415,  115,
      395,  216,  115,  115,  115,  216,  412,  413,  396,  116,
      420,  212,  116,  116,  396,  116,  116,  116,  421,  212,
      180,  401,  178,  116,  421,  178,  417,  115,  115,  402,
      115,  412,  413,  416,  116,  402,  115,  164,  426,  115,
      116,  116,  410,  116,  418,  419,  162,  161,  423,  116,

      411,  424,  116,  416,  422,  116,  411,  160,  159,  426,
      425,   79,  433,  156,  414,   79,  451,  115,   76,  428,
      434,  427,  415,  432,  430,  116,  434,  116,  415,  115,
      116,  435,  154,  153,  115,  149,  115,  115,  115,  436,
      420,  149,  116,  432,  116,  436,  437,  116,  421,  116,
      116,  116,  115,  116,  421,  115,  433,  147,  438,  435,
      112,  111,  445,  439,  434,  116,  452,  436,  116,  116,
      434,  437,  116,  436,  453,  446,   79,   81,  441,  116,
      453,  449,   80,  438,  440,  115,  454,   79,  439,  456,
      445,  115,  115,  447,  455,  446,  115,  457,  116,  116,

      455,  115,  116,  457,  116,  116,  449,  115,  452,  116,
       77,  115,   76,  115,  116,  504,  453,  454,  459,  464,
      116,  116,  453,  465,  116,  455,  116,  504,  115,  456,
      116,  455,  115,  463,  115,  504,  469,  457,  467,  115,
      459,  116,  116,  457,  115,  116,  504,  116,  471,  115,
      504,  115,  116,  115,  115,  475,  115,  116,  467,  479,
      115,  469,  116,  477,  116,  115,  116,  116,  471,  116,
      504,  476,  115,  116,  115,  482,  115,  115,  116,  115,
      504,  487,  504,  489,  486,  116,  115,  116,  477,  116,
      116,  504,  116,  504,  504,  504,  504,  504,  493,  116,

      504,  504,  504,  504,  504,  504,  486,  504,  489,  494,
      504,  498,  504,  504,  504,  502,  504,  499,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  498,  504,  504,  504,  504,  504,  504,  504,  504,
      502,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   93,  504,  504,  504,  504,  504,   93,  504,  504,
      504,  504,  504,   93,   93,  108,  504,  504,  108,  504,
      504,  504,  504,  108,  108,  504,  504,  108,  108,  117,
      504,  504,  504,  504,  117,  504,  117,  504,  504,  504,
      504,  117,  117,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  155,  504,  504,  504,  504,  155,  155,
      157,  504,  504,  504,  504,  157,  157,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  170,  504,  504,  504,  504,  504,  170,  504,
      504,  504,  504,  504,  170,  170,  174,  504,  504,  504,
      504,  504,  174,  504,  504,  174,  504,  504,  174,  174,
      175,  504,  504,  504,  504,  175,  175,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  213,  504,  504,
      504,  504,  504,  213,  504,  504,  504,  504,  213,  214,
      504,  504,  504,  504,  214,  504,  504,  504,  504,  214,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      228,  504,  504,  504,  228,  504,  228,  228,  504,  504,
      504,  228,  228,  228,  232,  504,  504,  504,  504,  504,
      232,  504,  504,  504,  504,  504,  232,  232,  236,  504,
      504,  236,  504,  504,  236,  236,  504,  504,  504,  236,
      236,  236,  237,  504,  504,  237,  504,  237,  237,  240,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  240,  240,  283,  504,  504,  283,  504,  283,  283,
      289,  504,  504,  504,  504,  504,  504,  504,  504,  504,

      504,  504,  289,  289,  291,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  291,  291,  296,  504,
      504,  296,  504,  504,  296,  296,  504,  504,  504,  296,
      296,  296,  298,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  298,  298,  300,  504,  504,  504,
      504,  300,  300,  341,  504,  504,  504,  504,  341,  341,
      342,  504,  504,  504,  342,  504,  342,  342,  504,  504,
      504,  342,  342,  342,  344,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  344,  344,  345,  504,
      504,  345,  504,  504,  345,  345,  504,  504,  504,  345,

      345,  345,  379,  504,  504,  379,  504,  504,  379,  379,
      504,  504,  504,  379,  379,  379,    9,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504
    } ;

static yyconst short int yy_chk[1880] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,   21,    3,  305,    4,    4,    3,
        4,    5,  497,    5,    4,    6,   21,    6,    3,    3,
        3,   22,   26,    4,    4,    4,   29,   24,  305,   26,
       90,    5,   22,   41,   29,    6,   24,   24,   28,   34,

       28,   28,   28,   34,   90,   29,   41,  492,   29,   31,
       31,   31,   67,  491,   67,   67,   67,  100,  100,  100,
        5,  102,  102,  485,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,   25,   27,   35,
       27,   27,   27,   36,   46,   48,   38,   42,   37,   92,

       27,   25,   35,  166,  166,   43,   36,   46,   48,   38,
       42,   37,   25,   39,  353,  517,   47,   25,   43,   92,
      517,   27,   36,   37,   25,   25,   39,   42,   40,   47,
       25,  481,   35,   37,   38,  353,   44,   46,  105,   48,
       25,   40,   45,   43,   25,   49,   50,   36,   39,   44,
       39,   37,  105,  311,   37,   45,  245,   47,   49,   50,
       39,   40,  478,   51,   52,   44,   40,   45,   53,   39,
       39,   45,   40,  168,   49,   45,   51,   52,  311,   54,
      115,   53,   54,   40,  245,  473,   54,  168,  472,   50,
       44,   58,   54,  115,   58,   45,   45,   45,   58,   49,

       53,   51,  104,  106,   58,  101,   52,  101,  101,  101,
      104,  462,  352,  117,  118,  119,  120,  106,  121,  123,
      122,  104,  124,  125,  104,  106,  117,  118,  119,  120,
      169,  121,  123,  122,   58,  124,  125,  352,  126,  127,
      128,  129,  131,  121,  169,  458,  119,  122,  461,  130,
      124,  126,  127,  128,  129,  131,  125,  118,  120,  133,
      132,  123,  130,  151,  151,  151,  122,  458,  134,  135,
      136,  121,  133,  132,  173,  126,  130,  128,  125,  137,
      127,  134,  135,  136,  382,  131,  138,  130,  173,  139,
      431,  460,  137,  450,  385,  126,  132,  128,  141,  138,

      444,  135,  139,  134,  142,  133,  133,  140,  136,  382,
      431,  141,  137,  138,  139,  243,  224,  142,  139,  385,
      140,  140,  171,  152,  134,  152,  152,  152,  243,  138,
      224,  141,  170,  172,  137,  181,  171,  142,  165,  165,
      165,  170,  139,  139,  171,  182,  170,  172,  181,  174,
      443,  183,  184,  141,  187,  172,  170,  174,  182,  142,
      440,  185,  186,  174,  183,  184,  188,  187,  190,  192,
      443,  191,  193,  174,  185,  186,  181,  192,  182,  188,
      183,  190,  192,  192,  191,  193,  187,  186,  185,  194,
      196,  195,  409,  199,  184,  188,  191,  484,  230,  193,

      182,  429,  194,  196,  195,  183,  199,  185,  521,  521,
      197,  190,  230,  425,  194,  186,  424,  409,  198,  484,
      188,  189,  196,  197,  191,  200,  198,  201,  202,  189,
      195,  198,  198,  200,  189,  189,  199,  203,  200,  197,
      201,  202,  194,  448,  204,  205,  207,  206,  189,  189,
      203,  189,  208,  406,  189,  202,  201,  204,  205,  207,
      206,  210,  387,  189,  197,  208,  208,  189,  448,  357,
      211,  218,  218,  218,  210,  242,  189,  225,  228,  466,
      203,  201,  204,  211,  241,  207,  225,  228,  242,  205,
      206,  225,  228,  229,  231,  232,  233,  241,  210,  466,

      292,  225,  228,  232,  233,  211,  468,  229,  231,  232,
      233,  244,  242,  236,  292,  229,  247,  241,  210,  232,
      233,  236,  248,  343,  244,  304,  211,  236,  249,  247,
      250,  468,  242,  253,  252,  248,  249,  236,  250,  241,
      297,  249,  249,  250,  250,  423,  253,  252,  442,  255,
      254,  256,  257,  244,  259,  248,  262,  275,  247,  252,
      258,  249,  255,  254,  256,  257,  423,  259,  258,  262,
      275,  253,  250,  258,  258,  295,  442,  248,  260,  255,
      256,  263,  264,  249,  257,  265,  260,  252,  254,  259,
      264,  260,  260,  266,  263,  264,  264,  290,  265,  262,

      267,  288,  275,  284,  269,  256,  266,  270,  267,  272,
      259,  273,  269,  267,  267,  270,  263,  269,  269,  274,
      270,  276,  272,  265,  273,  277,  279,  274,  278,  474,
      280,  307,  274,  274,  276,  266,  326,  263,  277,  279,
      273,  278,  278,  280,  307,  283,  291,  528,  528,  326,
      272,  470,  282,  293,  474,  291,  306,  279,  277,  280,
      291,  293,  276,  281,  296,  273,  307,  293,  298,  306,
      291,  470,  296,  301,  534,  326,  298,  293,  296,  534,
      277,  302,  298,  303,  280,  306,  301,  307,  296,  302,
      308,  303,  298,  312,  302,  302,  303,  303,  308,  301,

      310,  313,  246,  308,  308,  314,  312,  316,  315,  313,
      306,  317,  535,  310,  313,  313,  315,  535,  314,  318,
      316,  315,  315,  302,  317,  320,  322,  318,  321,  323,
      310,  239,  318,  318,  322,  312,  325,  323,  320,  322,
      322,  321,  323,  323,  317,  327,  314,  316,  238,  325,
      329,  488,  330,  327,  331,  237,  333,  334,  327,  327,
      320,  321,  331,  329,  325,  330,  317,  331,  331,  333,
      334,  335,  235,  336,  501,  339,  488,  349,  227,  354,
      330,  320,  356,  321,  335,  333,  336,  336,  339,  338,
      349,  342,  354,  344,  334,  356,  329,  338,  335,  501,

      342,  344,  338,  338,  345,  342,  349,  344,  346,  226,
      333,  347,  345,  222,  334,  342,  346,  344,  345,  347,
      355,  346,  346,  358,  347,  347,  350,  496,  345,  359,
      221,  349,  364,  355,  350,  220,  358,  359,  365,  350,
      350,  219,  359,  359,  366,  364,  361,  496,  362,  355,
      367,  365,  358,  347,  361,  373,  362,  366,  368,  361,
      361,  362,  362,  367,  217,  371,  368,  370,  373,  372,
      374,  368,  368,  365,  355,  370,  364,  358,  371,  215,
      370,  370,  372,  374,  375,  180,  179,  376,  367,  177,
      371,  176,  366,  163,  365,  376,  377,  375,  379,  373,

      376,  376,  372,  383,  377,  161,  379,  380,  160,  377,
      377,  374,  379,  158,  376,  380,  383,  376,  371,  386,
      380,  380,  379,  388,  372,  389,  376,  391,  392,  156,
      154,  388,  386,  389,  393,  150,  388,  388,  389,  389,
      391,  392,  393,  383,  148,  147,  394,  393,  393,  397,
      395,  146,  398,  403,  399,  145,  391,  392,  395,  394,
      400,  144,  397,  395,  395,  398,  403,  399,  400,  143,
      116,  401,  114,  400,  400,  113,  397,  404,  405,  401,
      407,  391,  392,  394,  401,  401,  412,   98,  403,  432,
      404,  405,  410,  407,  398,  399,   97,   96,  401,  412,

      410,  401,  432,  394,  400,  410,  410,   95,   94,  403,
      401,   82,  413,   80,  414,   78,  432,  417,   76,  405,
      413,  404,  414,  412,  407,  413,  413,  414,  414,  418,
      417,  416,   74,   71,  419,   66,  422,  426,  427,  416,
      420,   65,  418,  412,  416,  416,  417,  419,  420,  422,
      426,  427,  430,  420,  420,  428,  433,   63,  418,  435,
       33,   32,  426,  419,  433,  430,  437,  435,  428,  433,
      433,  417,  435,  435,  437,  427,   18,   17,  422,  437,
      437,  430,   15,  418,  420,  441,  438,   14,  419,  439,
      426,  445,  446,  428,  438,  427,  447,  439,  441,  438,

      438,  449,  439,  439,  445,  446,  430,  451,  452,  447,
       13,  459,   11,  463,  449,    9,  452,  454,  441,  446,
      451,  452,  452,  447,  459,  454,  463,    0,  464,  456,
      454,  454,  467,  445,  465,    0,  451,  456,  449,  469,
      441,  464,  456,  456,  471,  467,    0,  465,  459,  475,
        0,  476,  469,  477,  479,  463,  482,  471,  449,  467,
      486,  451,  475,  465,  476,  487,  477,  479,  459,  482,
        0,  464,  489,  486,  493,  471,  494,  498,  487,  502,
        0,  477,    0,  479,  476,  489,  499,  493,  465,  494,
      498,    0,  502,    0,    0,    0,    0,    0,  486,  499,

        0,    0,    0,    0,    0,    0,  476,    0,  479,  487,
        0,  493,    0,    0,    0,  499,    0,  494,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  493,    0,    0,    0,    0,    0,    0,    0,    0,
      499,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  509,    0,    0,    0,    0,    0,  509,    0,    0,
        0,    0,    0,  509,  509,  510,    0,    0,  510,    0,
        0,    0,    0,  510,  510,    0,    0,  510,  510,  511,
        0,    0,    0,    0,  511,    0,  511,    0,    0,    0,
        0,  511,  511,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  514,    0,    0,    0,    0,  514,  514,
      515,    0,    0,    0,    0,  515,  515,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  518,    0,    0,    0,    0,    0,  518,    0,
        0,    0,    0,    0,  518,  518,  519,    0,    0,    0,
        0,    0,  519,    0,    0,  519,    0,    0,  519,  519,
      520,    0,    0,    0,    0,  520,  520,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  524,    0,    0,
        0,    0,    0,  524,    0,    0,    0,    0,  524,  525,
        0,    0,    0,    0,  525,    0,    0,    0,    0,  525,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      529,    0,    0,    0,  529,    0,  529,  529,    0,    0,
        0,  529,  529,  529,  530,    0,    0,    0,    0,    0,
      530,    0,    0,    0,    0,    0,  530,  530,  531,    0,
        0,  531,    0,    0,  531,  531,    0,    0,    0,  531,
      531,  531,  532,    0,    0,  532,    0,  532,  532,  533,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  533,  533,  536,    0,    0,  536,    0,  536,  536,
      537,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  537,  537,  538,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  538,  538,  539,    0,
        0,  539,    0,    0,  539,  539,    0,    0,    0,  539,
      539,  539,  540,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  540,  540,  541,    0,    0,    0,
        0,  541,  541,  542,    0,    0,    0,    0,  542,  542,
      543,    0,    0,    0,  543,    0,  543,  543,    0,    0,
        0,  543,  543,  543,  544,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  544,  544,  545,    0,
        0,  545,    0,    0,  545,  545,    0,    0,    0,  545,

      545,  545,  546,    0,    0,  546,    0,    0,  546,  546,
        0,    0,    0,  546,  546,  546,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./lexer.lex"
#define INITIAL 0
/*
 *  CCC - The Clipper to C++ Compiler
 *  Copyright (C) 2005 ComFirm BT.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
#line 22 "./lexer.lex"

#include <malloc.h>
#include <string.h>
#include <stdio.h>

#define INCLUDED_FROM_LEXER_LEX
#include <lexer.h>

#define line 1
#define raw 2
#define sym 3

#define YY_STACK_USED 1
#line 1020 "ppo/lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
     if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
             YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
     {
     register yy_state_type yy_current_state;
     register char *yy_cp, *yy_bp;
     register int yy_act;

#line 104 "./lexer.lex"


#line 1150 "ppo/lexer.cpp"

     if ( yy_init )
             {
             yy_init = 0;

#ifdef YY_USER_INIT
             YY_USER_INIT;
#endif

             if ( ! yy_start )
                     yy_start = 1;   /* first start state */

             if ( ! yyin )
                     yyin = &std::cin;

             if ( ! yyout )
                     yyout = &std::cout;

             if ( ! yy_current_buffer )
                     yy_current_buffer =
                             yy_create_buffer( yyin, YY_BUF_SIZE );

             yy_load_buffer_state();
             }

     while ( 1 )             /* loops until end-of-file is reached */
             {
             yy_cp = yy_c_buf_p;

             /* Support of yytext. */
             *yy_cp = yy_hold_char;

             /* yy_bp points to the position in yy_ch_buf of the start of
              * the current run.
              */
             yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 505 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1817 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

             YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:   /* This label is used only to access EOF actions. */


             switch ( yy_act )
     { /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 106 "./lexer.lex"
{yy_push_state(line);}
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 108 "./lexer.lex"
{setinputlineno();}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 109 "./lexer.lex"
{setinputfspec();}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 110 "./lexer.lex"
{} 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 111 "./lexer.lex"
{yy_pop_state();} 
	YY_BREAK

case 6:
YY_RULE_SETUP
#line 114 "./lexer.lex"
{yy_push_state(raw);raw_set();}
	YY_BREAK

case 7:
YY_RULE_SETUP
#line 116 "./lexer.lex"
{if(raw_cmp()){yy_pop_state();return STRING;}}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 117 "./lexer.lex"
{raw_cat("\\\\");}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 118 "./lexer.lex"
{raw_cat("\\\"");}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 119 "./lexer.lex"
{raw_cat("\\n\"\nL\"");/*darabol*/}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 120 "./lexer.lex"
{raw_cat();}
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 123 "./lexer.lex"
{return DOT;} 
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 124 "./lexer.lex"
{return DOTDOT;} 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 125 "./lexer.lex"
{return COMMA;} 
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 126 "./lexer.lex"
{return COLON;} 
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 127 "./lexer.lex"
{return COLCOL;} 
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 128 "./lexer.lex"
{return ASSIGN;} 
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 129 "./lexer.lex"
{return ADDASS;} 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 130 "./lexer.lex"
{return SUBASS;} 
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 131 "./lexer.lex"
{return MULASS;} 
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 132 "./lexer.lex"
{return DIVASS;} 
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 133 "./lexer.lex"
{return MODASS;} 
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 134 "./lexer.lex"
{return COLCOLASS;} 
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 135 "./lexer.lex"
{return EQ;} 
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 136 "./lexer.lex"
{return EQEQ;} 
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 137 "./lexer.lex"
{return GTEQ;} 
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 138 "./lexer.lex"
{return LTEQ;} 
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 139 "./lexer.lex"
{return EXEQ;} 
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 140 "./lexer.lex"
{return GT;} 
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 141 "./lexer.lex"
{return LT;} 
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 142 "./lexer.lex"
{return DOLLAR;} 
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 143 "./lexer.lex"
{return PLUS;} 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 144 "./lexer.lex"
{return MINUS;} 
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 145 "./lexer.lex"
{return STAR;} 
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 146 "./lexer.lex"
{return SLASH;} 
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 147 "./lexer.lex"
{return MODULO;} 
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 148 "./lexer.lex"
{return DBSTAR;} 
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 149 "./lexer.lex"
{return DBPLUS;} 
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 150 "./lexer.lex"
{return DBMINUS;} 
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 151 "./lexer.lex"
{return LBRACKET;} 
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 152 "./lexer.lex"
{return ARROW;} 
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 153 "./lexer.lex"
{return LPAR;} 
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 154 "./lexer.lex"
{return RPAR;} 
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 155 "./lexer.lex"
{return AT;} 
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 156 "./lexer.lex"
{return LBRACE;} 
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 157 "./lexer.lex"
{return PIPE;} 
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 158 "./lexer.lex"
{return RBRACE;} 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 159 "./lexer.lex"
{return RBRACKET;} 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 160 "./lexer.lex"
{return TRUE;} 
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 161 "./lexer.lex"
{return FALSE;} 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 162 "./lexer.lex"
{return OR;} 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 163 "./lexer.lex"
{return AND;} 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 164 "./lexer.lex"
{return NOT;} 
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 166 "./lexer.lex"
{return FUNCTION;} 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 167 "./lexer.lex"
{return FUNCTION;} 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 168 "./lexer.lex"
{return STFUNCTION;} 
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 169 "./lexer.lex"
{return STFUNCTION;} 
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 170 "./lexer.lex"
{return STATIC;} 
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 171 "./lexer.lex"
{return LOCAL;} 
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 172 "./lexer.lex"
{return QUIT;} 
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 173 "./lexer.lex"
{return NIL;} 
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 174 "./lexer.lex"
{return RETURN;} 
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 176 "./lexer.lex"
{return CLASS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 177 "./lexer.lex"
{return STCLASS;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 178 "./lexer.lex"
{return NEW;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 179 "./lexer.lex"
{yy_push_state(sym); return ATTRIB;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 180 "./lexer.lex"
{yy_push_state(sym); return METHOD;}
	YY_BREAK

case 68:
YY_RULE_SETUP
#line 182 "./lexer.lex"
{yy_pop_state();return SYMBOL;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 183 "./lexer.lex"
{}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 184 "./lexer.lex"
{return UNEXPECTEDCHAR;}
	YY_BREAK

case 71:
YY_RULE_SETUP
#line 187 "./lexer.lex"
{return WHILE;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 188 "./lexer.lex"
{return WHILE;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 189 "./lexer.lex"
{return EXIT;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 190 "./lexer.lex"
{return LOOP;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 191 "./lexer.lex"
{return END;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 192 "./lexer.lex"
{return END;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 193 "./lexer.lex"
{return END;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 195 "./lexer.lex"
{return FOR;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 196 "./lexer.lex"
{return TO;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 197 "./lexer.lex"
{return STEP;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 198 "./lexer.lex"
{return END;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 199 "./lexer.lex"
{return END;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 201 "./lexer.lex"
{return IF;} 
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 202 "./lexer.lex"
{return ELSEIF;} 
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 203 "./lexer.lex"
{return ELSE;} 
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 204 "./lexer.lex"
{return END;} 
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 206 "./lexer.lex"
{return DOCASE;} 
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 207 "./lexer.lex"
{return CASE;} 
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 208 "./lexer.lex"
{return OTHERWISE;} 
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 209 "./lexer.lex"
{return END;} 
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 211 "./lexer.lex"
{return BEGSEQ;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 212 "./lexer.lex"
{return BEGSEQ;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 213 "./lexer.lex"
{return RECOVER;} 
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 214 "./lexer.lex"
{return RECOVER;} 
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 215 "./lexer.lex"
{return FINALLY;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 216 "./lexer.lex"
{return END;} 
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 217 "./lexer.lex"
{return NAMESPACE;} 
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 218 "./lexer.lex"
{return USING;} 
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 220 "./lexer.lex"
{return NL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 221 "./lexer.lex"
{incinputlineno();return NL;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 222 "./lexer.lex"
{incinputlineno();return NL;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 224 "./lexer.lex"
{return STRING;} 
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 225 "./lexer.lex"
{return NLSTEXT;} 
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 226 "./lexer.lex"
{return BINARYA;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 227 "./lexer.lex"
{return BINARYX;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 228 "./lexer.lex"
{return NUMBER;} 
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 229 "./lexer.lex"
{return NUMBER;} 
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 230 "./lexer.lex"
{return NUMBER;} 
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 231 "./lexer.lex"
{return SYMBOL;} 
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 233 "./lexer.lex"
{return COMPOUND;} 
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 234 "./lexer.lex"
{return COMPOUND;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 235 "./lexer.lex"
{return COMPOUND;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 236 "./lexer.lex"
{return COMPOUND;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 238 "./lexer.lex"
{return COMPOUND;/*ures zarojelpar kieg*/}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 239 "./lexer.lex"
{return COMPOUND;/*ures zarojelpar kieg*/}
	YY_BREAK
case 116:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 241 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 117:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 242 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 118:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 243 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 119:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 244 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 120:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 245 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 121:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 246 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 122:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 247 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 123:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 248 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 124:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 249 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 125:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 250 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 126:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 251 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 127:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 252 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 128:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 253 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 129:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 254 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 130:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 255 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 131:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 256 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 132:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 257 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 133:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 258 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 134:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 259 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 135:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 260 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 136:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 261 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 137:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 262 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 138:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 263 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 139:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 264 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 140:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 265 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 141:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 266 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 142:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 267 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 143:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 268 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 144:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 269 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 271 "./lexer.lex"
{}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 272 "./lexer.lex"
{return UNEXPECTEDCHAR;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 274 "./lexer.lex"
ECHO;
	YY_BREAK
#line 2069 "ppo/lexer.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(line):
			case YY_STATE_EOF(raw):
			case YY_STATE_EOF(sym):
				yyterminate();

     case YY_END_OF_BUFFER:
             {
             /* Amount of text matched not including the EOB char. */
             int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

             /* Undo the effects of YY_DO_BEFORE_ACTION. */
             *yy_cp = yy_hold_char;
             YY_RESTORE_YY_MORE_OFFSET

             if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
                     {
                     /* We're scanning a new file or input source.  It's
                      * possible that this happened because the user
                      * just pointed yyin at a new source and called
                      * yylex().  If so, then we have to assure
                      * consistency between yy_current_buffer and our
                      * globals.  Here is the right place to do so, because
                      * this is the first action (other than possibly a
                      * back-up) that will match for the new input source.
                      */
                     yy_n_chars = yy_current_buffer->yy_n_chars;
                     yy_current_buffer->yy_input_file = yyin;
                     yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
                     }

             /* Note that here we test for yy_c_buf_p "<=" to the position
              * of the first EOB in the buffer, since yy_c_buf_p will
              * already have been incremented past the NUL character
              * (since all states make transitions on EOB to the
              * end-of-buffer state).  Contrast this with the test
              * in input().
              */
             if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                     { /* This was really a NUL. */
                     yy_state_type yy_next_state;

                     yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                     yy_current_state = yy_get_previous_state();

                     /* Okay, we're now positioned to make the NUL
                      * transition.  We couldn't have
                      * yy_get_previous_state() go ahead and do it
                      * for us because it doesn't know how to deal
                      * with the possibility of jamming (and we don't
                      * want to build jamming into it because then it
                      * will run more slowly).
                      */

                     yy_next_state = yy_try_NUL_trans( yy_current_state );

                     yy_bp = yytext_ptr + YY_MORE_ADJ;

                     if ( yy_next_state )
                             {
                             /* Consume the NUL. */
                             yy_cp = ++yy_c_buf_p;
                             yy_current_state = yy_next_state;
                             goto yy_match;
                             }

                     else
                             {
				yy_cp = yy_c_buf_p;
                             goto yy_find_action;
                             }
                     }

             else switch ( yy_get_next_buffer() )
                     {
                     case EOB_ACT_END_OF_FILE:
                             {
                             yy_did_buffer_switch_on_eof = 0;

                             if ( yywrap() )
                                     {
                                     /* Note: because we've taken care in
                                      * yy_get_next_buffer() to have set up
                                      * yytext, we can now set up
                                      * yy_c_buf_p so that if some total
                                      * hoser (like flex itself) wants to
                                      * call the scanner after we return the
                                      * YY_NULL, it'll still work - another
                                      * YY_NULL will get returned.
                                      */
                                     yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                                     yy_act = YY_STATE_EOF(YY_START);
                                     goto do_action;
                                     }

                             else
                                     {
                                     if ( ! yy_did_buffer_switch_on_eof )
                                             YY_NEW_FILE;
                                     }
                             break;
                             }

                     case EOB_ACT_CONTINUE_SCAN:
                             yy_c_buf_p =
                                     yytext_ptr + yy_amount_of_matched_text;

                             yy_current_state = yy_get_previous_state();

                             yy_cp = yy_c_buf_p;
                             yy_bp = yytext_ptr + YY_MORE_ADJ;
                             goto yy_match;

                     case EOB_ACT_LAST_MATCH:
                             yy_c_buf_p =
                             &yy_current_buffer->yy_ch_buf[yy_n_chars];

                             yy_current_state = yy_get_previous_state();

                             yy_cp = yy_c_buf_p;
                             yy_bp = yytext_ptr + YY_MORE_ADJ;
                             goto yy_find_action;
                     }
             break;
             }

     default:
             YY_FATAL_ERROR(
                     "fatal flex scanner internal error--no action found" );
     } /* end of action switch */
             } /* end of scanning one token */
     } /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
     {
     yyin = arg_yyin;
     yyout = arg_yyout;
     yy_c_buf_p = 0;
     yy_init = 1;
     yy_start = 0;
     yy_flex_debug = 0;
     yylineno = 1;   // this will only get updated if %option yylineno

     yy_did_buffer_switch_on_eof = 0;

     yy_looking_for_trail_begin = 0;
     yy_more_flag = 0;
     yy_more_len = 0;
     yy_more_offset = yy_prev_more_offset = 0;

     yy_start_stack_ptr = yy_start_stack_depth = 0;
     yy_start_stack = 0;

     yy_current_buffer = 0;

#ifdef YY_USES_REJECT
     yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
     yy_state_buf = 0;
#endif
     }

yyFlexLexer::~yyFlexLexer()
     {
     delete yy_state_buf;
     yy_delete_buffer( yy_current_buffer );
     yy_flex_free( yy_start_stack );
     yy_start_stack=0;
     }

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
     {
     if ( new_in )
             {
             yy_delete_buffer( yy_current_buffer );
             yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
             }

     if ( new_out )
             yyout = new_out;
     }

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
     {
     if ( yyin->eof() || yyin->fail() )
             return 0;

#ifdef YY_INTERACTIVE
     yyin->get( buf[0] );

     if ( yyin->eof() )
             return 0;

     if ( yyin->bad() )
             return -1;

     return 1;

#else
     (void) yyin->read( buf, max_size );

     if ( yyin->bad() )
             return -1;
     else
             return yyin->gcount();
#endif
     }

void yyFlexLexer::LexerOutput( const char* buf, int size )
     {
     (void) yyout->write( buf, size );
     }

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *   EOB_ACT_LAST_MATCH -
 *   EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *   EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
     {
     register char *dest = yy_current_buffer->yy_ch_buf;
     register char *source = yytext_ptr;
     register int number_to_move, i;
     int ret_val;

     if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
             YY_FATAL_ERROR(
             "fatal flex scanner internal error--end of buffer missed" );

     if ( yy_current_buffer->yy_fill_buffer == 0 )
             { /* Don't try to fill the buffer, so this is an EOF. */
             if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
                     {
                     /* We matched a single character, the EOB, so
                      * treat this as a final EOF.
                      */
                     return EOB_ACT_END_OF_FILE;
                     }

             else
                     {
                     /* We matched some text prior to the EOB, first
                      * process it.
                      */
                     return EOB_ACT_LAST_MATCH;
                     }
             }

     /* Try to read more data. */

     /* First move last chars to start of buffer. */
     number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

     for ( i = 0; i < number_to_move; ++i )
             *(dest++) = *(source++);

     if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
             /* don't do the read, it's not guaranteed to return an EOF,
              * just force an EOF
              */
             yy_current_buffer->yy_n_chars = yy_n_chars = 0;

     else
             {
             int num_to_read =
                     yy_current_buffer->yy_buf_size - number_to_move - 1;

             while ( num_to_read <= 0 )
                     { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
                     YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

                     /* just a shorter name for the current buffer */
                     YY_BUFFER_STATE b = yy_current_buffer;

                     int yy_c_buf_p_offset =
                             (int) (yy_c_buf_p - b->yy_ch_buf);

                     if ( b->yy_is_our_buffer )
                             {
                             int new_size = b->yy_buf_size * 2;

                             if ( new_size <= 0 )
                                     b->yy_buf_size += b->yy_buf_size / 8;
                             else
                                     b->yy_buf_size *= 2;

                             b->yy_ch_buf = (char *)
                                     /* Include room in for 2 EOB chars. */
                                     yy_flex_realloc( (void *) b->yy_ch_buf,
                                                      b->yy_buf_size + 2 );
                             }
                     else
                             /* Can't grow it, we don't own it. */
                             b->yy_ch_buf = 0;

                     if ( ! b->yy_ch_buf )
                             YY_FATAL_ERROR(
                             "fatal error - scanner input buffer overflow" );

                     yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                     num_to_read = yy_current_buffer->yy_buf_size -
                                             number_to_move - 1;
#endif
                     }

             if ( num_to_read > YY_READ_BUF_SIZE )
                     num_to_read = YY_READ_BUF_SIZE;

             /* Read in more data. */
             YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
                     yy_n_chars, num_to_read );

             yy_current_buffer->yy_n_chars = yy_n_chars;
             }

     if ( yy_n_chars == 0 )
             {
             if ( number_to_move == YY_MORE_ADJ )
                     {
                     ret_val = EOB_ACT_END_OF_FILE;
                     yyrestart( yyin );
                     }

             else
                     {
                     ret_val = EOB_ACT_LAST_MATCH;
                     yy_current_buffer->yy_buffer_status =
                             YY_BUFFER_EOF_PENDING;
                     }
             }

     else
             ret_val = EOB_ACT_CONTINUE_SCAN;

     yy_n_chars += number_to_move;
     yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
     yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

     yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

     return ret_val;
     }


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
     {
     register yy_state_type yy_current_state;
     register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

     for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
             {
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 505 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
             }

     return yy_current_state;
     }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *   next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
     {
     register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 505 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 504);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

     return yy_is_jam ? 0 : yy_current_state;
     }


void yyFlexLexer::yyunput( int c, register char* yy_bp )
     {
     register char *yy_cp = yy_c_buf_p;

     /* undo effects of setting up yytext */
     *yy_cp = yy_hold_char;

     if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
             { /* need to shift things up to make room */
             /* +2 for EOB chars. */
             register int number_to_move = yy_n_chars + 2;
             register char *dest = &yy_current_buffer->yy_ch_buf[
                                     yy_current_buffer->yy_buf_size + 2];
             register char *source =
                             &yy_current_buffer->yy_ch_buf[number_to_move];

             while ( source > yy_current_buffer->yy_ch_buf )
                     *--dest = *--source;

             yy_cp += (int) (dest - source);
             yy_bp += (int) (dest - source);
             yy_current_buffer->yy_n_chars =
                     yy_n_chars = yy_current_buffer->yy_buf_size;

             if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                     YY_FATAL_ERROR( "flex scanner push-back overflow" );
             }

     *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

     yytext_ptr = yy_bp;
     yy_hold_char = *yy_cp;
     yy_c_buf_p = yy_cp;
     }


int yyFlexLexer::yyinput()
     {
     int c;

     *yy_c_buf_p = yy_hold_char;

     if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
             {
             /* yy_c_buf_p now points to the character we want to return.
              * If this occurs *before* the EOB characters, then it's a
              * valid NUL; if not, then we've hit the end of the buffer.
              */
             if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                     /* This was really a NUL. */
                     *yy_c_buf_p = '\0';

             else
                     { /* need more input */
                     int offset = yy_c_buf_p - yytext_ptr;
                     ++yy_c_buf_p;

                     switch ( yy_get_next_buffer() )
                             {
                             case EOB_ACT_LAST_MATCH:
                                     /* This happens because yy_g_n_b()
                                      * sees that we've accumulated a
                                      * token and flags that we need to
                                      * try matching the token before
                                      * proceeding.  But for input(),
                                      * there's no matching to consider.
                                      * So convert the EOB_ACT_LAST_MATCH
                                      * to EOB_ACT_END_OF_FILE.
                                      */

                                     /* Reset buffer status. */
                                     yyrestart( yyin );

                                     /* fall through */

                             case EOB_ACT_END_OF_FILE:
                                     {
                                     if ( yywrap() )
                                             return EOF;

                                     if ( ! yy_did_buffer_switch_on_eof )
                                             YY_NEW_FILE;
#ifdef __cplusplus
                                     return yyinput();
#else
                                     return input();
#endif
                                     }

                             case EOB_ACT_CONTINUE_SCAN:
                                     yy_c_buf_p = yytext_ptr + offset;
                                     break;
                             }
                     }
             }

     c = *(unsigned char *) yy_c_buf_p;      /* cast for 8-bit char's */
     *yy_c_buf_p = '\0';    /* preserve yytext */
     yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

     return c;
     }


void yyFlexLexer::yyrestart( std::istream* input_file )
     {
     if ( ! yy_current_buffer )
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

     yy_init_buffer( yy_current_buffer, input_file );
     yy_load_buffer_state();
     }


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
     {
     if ( yy_current_buffer == new_buffer )
             return;

     if ( yy_current_buffer )
             {
             /* Flush out information for old buffer. */
             *yy_c_buf_p = yy_hold_char;
             yy_current_buffer->yy_buf_pos = yy_c_buf_p;
             yy_current_buffer->yy_n_chars = yy_n_chars;
             }

     yy_current_buffer = new_buffer;
     yy_load_buffer_state();

     /* We don't actually know whether we did this switch during
      * EOF (yywrap()) processing, but the only time this flag
      * is looked at is after yywrap() is called, so it's safe
      * to go ahead and always set it.
      */
     yy_did_buffer_switch_on_eof = 1;
     }


void yyFlexLexer::yy_load_buffer_state()
     {
     yy_n_chars = yy_current_buffer->yy_n_chars;
     yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
     yyin = yy_current_buffer->yy_input_file;
     yy_hold_char = *yy_c_buf_p;
     }


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
     {
     YY_BUFFER_STATE b;

     b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
     if ( ! b )
             YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

     b->yy_buf_size = size;

     /* yy_ch_buf has to be 2 characters longer than the size given because
      * we need to put in 2 end-of-buffer characters.
      */
     b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
     if ( ! b->yy_ch_buf )
             YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

     b->yy_is_our_buffer = 1;

     yy_init_buffer( b, file );

     return b;
     }


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
     {
     if ( ! b )
             return;

     if ( b == yy_current_buffer )
             yy_current_buffer = (YY_BUFFER_STATE) 0;

     if ( b->yy_is_our_buffer )
             yy_flex_free( (void *) b->yy_ch_buf );

     yy_flex_free( (void *) b );
     }


//extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

     {
     yy_flush_buffer( b );

     b->yy_input_file = file;
     b->yy_fill_buffer = 1;

     b->yy_is_interactive = 0;
     }


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
     {
     if ( ! b )
             return;

     b->yy_n_chars = 0;

     /* We always need two end-of-buffer characters.  The first causes
      * a transition to the end-of-buffer state.  The second causes
      * a jam in that state.
      */
     b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
     b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

     b->yy_buf_pos = &b->yy_ch_buf[0];

     b->yy_at_bol = 1;
     b->yy_buffer_status = YY_BUFFER_NEW;

     if ( b == yy_current_buffer )
             yy_load_buffer_state();
     }


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
     {
     if ( yy_start_stack_ptr >= yy_start_stack_depth )
             {
             yy_size_t new_size;

             yy_start_stack_depth += YY_START_STACK_INCR;
             new_size = yy_start_stack_depth * sizeof( int );

             if ( ! yy_start_stack )
                     yy_start_stack = (int *) yy_flex_alloc( new_size );

             else
                     yy_start_stack = (int *) yy_flex_realloc(
                                     (void *) yy_start_stack, new_size );

             if ( ! yy_start_stack )
                     YY_FATAL_ERROR(
                     "out of memory expanding start-condition stack" );
             }

     yy_start_stack[yy_start_stack_ptr++] = YY_START;

     BEGIN(new_state);
     }
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
     {
     if ( --yy_start_stack_ptr < 0 )
             YY_FATAL_ERROR( "start-condition stack underflow" );

     BEGIN(yy_start_stack[yy_start_stack_ptr]);
     }
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
     {
     return yy_start_stack[yy_start_stack_ptr - 1];
     }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
     {
     std::cerr << msg << '\n';
     exit( YY_EXIT_FAILURE );
     }


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
     do \
             { \
             /* Undo effects of setting up yytext. */ \
             yytext[yyleng] = yy_hold_char; \
             yy_c_buf_p = yytext + n; \
             yy_hold_char = *yy_c_buf_p; \
             *yy_c_buf_p = '\0'; \
             yyleng = n; \
             } \
     while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
     {
     register int i;
     for ( i = 0; i < n; ++i )
             s1[i] = s2[i];
     }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
     {
     register int n;
     for ( n = 0; s[n]; ++n )
             ;

     return n;
     }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
     {
     return (void *) malloc( size );
     }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
     {
     /* The cast to (char *) in the following accommodates both
      * implementations that use char* generic pointers, and those
      * that use void* generic pointers.  It works with the latter
      * because both ANSI C and C++ allow castless assignment from
      * any pointer type to void*, and deal with argument conversions
      * as though doing an assignment.
      */
     return (void *) realloc( (char *) ptr, size );
     }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
     {
     free( ptr );
     }

#if YY_MAIN
int main()
     {
     yylex();
     return 0;
     }
#endif
#line 274 "./lexer.lex"


