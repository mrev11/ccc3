#line 2 "ppo/lexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else        /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif       /* __STDC__ */
#endif       /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *   if ( condition_holds )
 *           yyless( 5 );
 *   else
 *           do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
     do \
             { \
             /* Undo effects of setting up yytext. */ \
             *yy_cp = yy_hold_char; \
             YY_RESTORE_YY_MORE_OFFSET \
             yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
             YY_DO_BEFORE_ACTION; /* set up yytext again */ \
             } \
     while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
     {
     std::istream* yy_input_file;

     char *yy_ch_buf;                /* input buffer */
     char *yy_buf_pos;               /* current position in input buffer */

     /* Size of input buffer in bytes, not including room for EOB
      * characters.
      */
     yy_size_t yy_buf_size;

     /* Number of characters read into yy_ch_buf, not including EOB
      * characters.
      */
     int yy_n_chars;

     /* Whether we "own" the buffer - i.e., we know we created it,
      * and can realloc() it to grow it, and should free() it to
      * delete it.
      */
     int yy_is_our_buffer;

     /* Whether this is an "interactive" input source; if so, and
      * if we're using stdio for input, then we want to use getc()
      * instead of fread(), to make sure we stop fetching input after
      * each newline.
      */
     int yy_is_interactive;

     /* Whether we're considered to be at the beginning of a line.
      * If so, '^' rules will be active on the next match, otherwise
      * not.
      */
     int yy_at_bol;

     /* Whether to try to fill the input buffer when we reach the
      * end of it.
      */
     int yy_fill_buffer;

     int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
     /* When an EOF's been seen but there's still some text to process
      * then we mark the buffer as YY_EOF_PENDING, to indicate that we
      * shouldn't try reading from the input source any more.  We might
      * still have a bunch of tokens to match, though, because of
      * possible backing-up.
      *
      * When we actually see the EOF, we change the status to "new"
      * (via yyrestart()), so that the user can continue scanning by
      * just pointing yyin at a new input file.
      */
#define YY_BUFFER_EOF_PENDING 2
     };


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
     { \
     if ( ! yy_current_buffer ) \
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
     yy_current_buffer->yy_is_interactive = is_interactive; \
     }

#define yy_set_bol(at_bol) \
     { \
     if ( ! yy_current_buffer ) \
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
     yy_current_buffer->yy_at_bol = at_bol; \
     }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <flexlexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int ppo2cpp_lexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
     yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
     yy_hold_char = *yy_cp; \
     *yy_cp = '\0'; \
     yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
static yyconst short int yy_acclist[505] =
    {   0,
      140,  140,    4,    4,   65,   65,  143,  141,  142,  140,
      141,  142,   96,  142,   50,  141,  142,  141,  142,  141,
      142,   28,  141,  142,   33,  141,  142,  141,  142,   39,
      141,  142,   40,  141,  142,   31,  141,  142,   29,  141,
      142,   13,  141,  142,   30,  141,  142,   12,  141,  142,
       32,  141,  142,  102,  141,  142,  102,  141,  142,   14,
      141,  142,   95,  141,  142,   27,  141,  142,   21,  141,
      142,   26,  141,  142,   41,  141,  142,  105,  141,  142,
      105,  141,  142,  105,  141,  142,  105,  141,  142,  105,
      141,  142,  105,  141,  142,  105,  141,  142,  105,  141,

      142,  105,  141,  142,  105,  141,  142,  105,  141,  142,
      105,  141,  142,  105,  141,  142,  105,  141,  142,  105,
      141,  142,  105,  141,  142,  105,  141,  142,  105,  141,
      142,  105,  141,  142,  105,  141,  142,   37,  141,  142,
       45,  141,  142,   34,  141,  142,  105,  141,  142,   42,
      141,  142,   43,  141,  142,   44,  141,  142,  142,    4,
      142,    5,  142,  142,  142,    2,  142,   11,  142,   10,
      142,    9,   11,  142,   11,  142,    8,   11,  142,   66,
      142,   65,   66,  142,   64,   66,  142,  140,   25,   98,
       20,   34,   18,   35,   16,   36,   17,   38,  106,  106,

      106,  106,  106,  106,   19,  102,   15,  107,   24,   22,
       23,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,   79,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   75,  105,  105,  105,    4,
        3,    2,   65,   64,  106,  106,   47,  106,  106,   46,
       97,  102,  104,  103,  107,   99,  105,  105,  105,  105,
      105,  105,  105,   71,  105,  105,  105,   74,  105,  105,
      105,  105,  105,  105,   61,  105,  105,   58,  105,  105,
      105,  105,  105,  105,  105,  105,  127,  105,  105,  101,
      100,    2,  106,  106,   48,  110,  105,  105,   84,  105,

      105,  105,  105,   81,  105,  123,  105,  105,  105,  105,
      105,  105,   69,  105,  105,  126,  105,  105,   70,  105,
      105,  105,  118,   77,  105,  116,  105,  105,   57,  105,
      105,  105,  105,   76,  105,  105,  105,    1,   49,   50,
      108,    6,  110,  105,   87,  105,   60,  105,  105,  105,
      131,  105,  105,   72,  105,  105,   82,  105,  105,  105,
      121,  105,  105,   56,  105,  122,  105,  105,  129,  105,
      105,  115,  105,  105,  105,  128,   94,  105,   68,  105,
        7,  108,   62,  105,  135,  105,  117,   83,  105,  105,
       80,  105,  105,  124,   78,  105,  132,  105,  105,  105,

      105,  114,   63,  105,  105,  105,  105,  105,   59,  105,
       55,  105,  139,  108,  108,  109,  119,  105,   83,   67,
      105,   86,  105,  130,  105,  105,   91,  105,  105,  120,
      105,  105,  105,   89,  105,  113,  105,  105,  108,  109,
      105,   67,  134,  105,   73,  105,  137,   51,  105,  105,
      105,  105,  136,  105,  105,  105,  108,  109,  105,  105,
      125,  111,   93,  105,   85,  105,   52,  105,  105,  105,
      105,  105,  105,  138,  133,  112,  105,  105,  105,  105,
       92,  105,  105,  105,  105,  105,   92,   90,  105,  105,
      105,   88,  105,   90,  105,  105,   88,   53,  105,  105,

       53,   54,  105,   54
    } ;

static yyconst short int yy_accept[482] =
    {   0,
        1,    2,    3,    4,    5,    5,    5,    6,    7,    8,
       10,   13,   15,   18,   20,   22,   25,   28,   30,   33,
       36,   39,   42,   45,   48,   51,   54,   57,   60,   63,
       66,   69,   72,   75,   78,   81,   84,   87,   90,   93,
       96,   99,  102,  105,  108,  111,  114,  117,  120,  123,
      126,  129,  132,  135,  138,  141,  144,  147,  150,  153,
      156,  159,  160,  162,  164,  165,  166,  168,  170,  172,
      175,  177,  180,  182,  185,  188,  189,  190,  190,  191,
      191,  192,  192,  193,  194,  195,  196,  197,  198,  199,
      200,  201,  202,  203,  204,  205,  205,  206,  206,  207,

      207,  207,  207,  208,  209,  209,  210,  211,  212,  212,
      212,  212,  213,  214,  215,  216,  217,  218,  219,  220,
      221,  222,  223,  224,  226,  227,  228,  229,  230,  231,
      232,  233,  234,  235,  236,  238,  239,  240,  240,  240,
      240,  240,  241,  241,  242,  242,  242,  243,  243,  244,
      245,  245,  246,  247,  248,  249,  250,  251,  251,  252,
      253,  254,  255,  255,  256,  256,  256,  257,  257,  257,
      258,  259,  260,  261,  261,  262,  263,  264,  266,  267,
      268,  270,  271,  272,  273,  274,  275,  277,  278,  280,
      281,  282,  283,  284,  285,  286,  287,  287,  288,  289,

      290,  291,  291,  291,  291,  292,  292,  293,  293,  293,
      294,  295,  296,  296,  296,  296,  296,  296,  296,  297,
      298,  299,  301,  302,  302,  302,  303,  304,  306,  306,
      307,  308,  309,  310,  311,  312,  313,  315,  316,  316,
      317,  318,  319,  321,  322,  323,  323,  324,  326,  326,
      327,  328,  329,  331,  332,  333,  334,  336,  337,  338,
      338,  338,  338,  338,  339,  340,  341,  341,  342,  342,
      342,  343,  344,  345,  347,  349,  349,  349,  350,  351,
      351,  352,  353,  353,  354,  356,  357,  359,  360,  361,
      361,  362,  363,  364,  366,  366,  367,  368,  369,  369,

      370,  371,  372,  372,  373,  374,  375,  376,  376,  377,
      379,  381,  382,  382,  383,  383,  383,  383,  383,  383,
      383,  385,  385,  386,  387,  387,  388,  388,  388,  390,
      391,  393,  393,  394,  394,  395,  397,  397,  398,  399,
      400,  401,  402,  402,  403,  405,  406,  407,  408,  409,
      411,  413,  413,  414,  414,  415,  415,  417,  417,  417,
      417,  418,  418,  419,  420,  420,  422,  422,  424,  424,
      425,  426,  427,  429,  430,  430,  431,  432,  433,  434,
      436,  436,  437,  438,  439,  439,  441,  441,  441,  441,
      442,  443,  443,  443,  444,  445,  447,  447,  448,  450,

      451,  452,  453,  453,  454,  455,  455,  455,  456,  457,
      457,  459,  459,  460,  460,  461,  461,  462,  462,  463,
      465,  467,  469,  469,  470,  470,  470,  471,  472,  472,
      473,  473,  474,  474,  475,  475,  476,  476,  477,  477,
      478,  478,  478,  479,  480,  480,  481,  481,  483,  483,
      484,  484,  484,  485,  486,  486,  487,  488,  488,  490,
      490,  490,  491,  492,  492,  494,  495,  495,  495,  496,
      497,  498,  498,  498,  500,  501,  502,  502,  504,  505,
      505
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   36,
       51,   52,   53,   54,   36,    1,   55,   28,   29,   30,

       56,   32,   33,   34,   57,   36,   36,   58,   38,   59,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   36,   60,   61,   62,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[63] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    1,    3,    4,
        1,    1,    1,    1,    5,    1,    1,    6,    6,    6,
        1,    1,    1,    4,    7,    1,    8,    8,    8,    8,
        8,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        1,    1,    1,    1,    8,    8,    9,    9,    9,    1,
        1,    1
    } ;

static yyconst short int yy_base[516] =
    {   0,
        0,    0,   61,   66,   69,   73,  125,    0, 1778, 1779,
     1775, 1779, 1752, 1770, 1716, 1779, 1749, 1763, 1779, 1779,
       53,   69, 1779,   73,   63,   70,  172,   91,   81, 1779,
       76, 1747, 1746,  107,   68,   58,  174,  178,  187,  182,
     1746,   91,  179,  181,  200,  180,  190,  184,  192,  189,
      198,  199,  225,  201, 1779, 1779, 1779,  245, 1779, 1779,
     1779, 1779, 1746, 1779, 1740, 1707,  233, 1779, 1779, 1779,
     1691, 1779, 1779, 1711,    0, 1708, 1779, 1703, 1779, 1650,
     1779, 1697, 1779, 1779, 1779, 1779, 1779, 1779, 1779,   65,
        0, 1666, 1637, 1621, 1644, 1635, 1779,  243,  248,  101,

        0,    0, 1779,    0,    0, 1779, 1779, 1779, 1628, 1623,
     1606, 1575,  226,  232,  229,  243,  267,  257,  259,  260,
      261,  262,  263, 1574,  264,  265,  268,  270,  266,  273,
      269,  276,  284,  299,  319,  293,  301, 1583, 1578, 1581,
     1576, 1580, 1576, 1779, 1571,  319,  324,    0, 1577,    0,
     1518,    0, 1546, 1779, 1530, 1558, 1779, 1568, 1779,  327,
      190,    0,  358,    0, 1545, 1564, 1779, 1552,    0,  282,
      406,  408,  279,  420,  410,  297,  411,  467,  312,  416,
      430,  409,  420,  412,  317,  429,  446,  413,  346,  435,
      444,  436,  414,  440,  442,  437,  468, 1779,  459,  464,

     1779,    0,    0, 1554, 1779, 1548,  470, 1470, 1380, 1419,
     1418, 1779,    0,    0,  498,    0, 1377, 1373,    0,  457,
      461, 1381,  465,  466, 1226,  479,  534,  548,  549, 1779,
      545,  537,  546,  188,  547,  550,  564,  552,  339, 1779,
      553,  555,  580,  561,  558,  493, 1779,  602,  502, 1779,
      556,  566,  604,  560,  572,  573,  609,  594,  601, 1193,
     1116, 1091, 1050, 1779, 1779, 1779,  657,  719,  781,  843,
     1779,    0,  491,  904,  619,  985,  588,  893,  892,  503,
     1779,  611,  597,  616,  631,  894,  634,  896,  895,  506,
     1779,  897,  900,  911,  638, 1779,  622,  901,  915, 1779,

      903,  624,  921, 1779,  913,  907,  627,  931, 1779,  943,
     1012, 1779,  943,  976,    0,    0,    0,    0, 1009,    0,
      952, 1059, 1779, 1045,  930, 1779,  905,  902,  928, 1048,
      926,  804, 1055,  954, 1779, 1072, 1070, 1779,  948, 1047,
      980, 1056, 1071, 1779, 1075, 1068, 1063,  950, 1074,  769,
     1092, 1090, 1779,    0,    0, 1133, 1195, 1257, 1293, 1104,
     1779, 1062, 1084, 1779, 1066,  707,  609, 1343, 1111, 1779,
     1329, 1331, 1353, 1332, 1117, 1779, 1100, 1339, 1341, 1362,
     1363, 1779,  982, 1346, 1382, 1415,    0,    0,  609, 1342,
     1779, 1336, 1126, 1779, 1451, 1364, 1380, 1779, 1384, 1452,

     1453, 1460, 1467, 1779, 1361,  592,  551, 1461, 1366,    0,
        0,  539, 1463, 1071, 1378, 1477, 1779, 1478, 1779, 1483,
     1487, 1502,  473, 1466, 1073,  470, 1467, 1477, 1455, 1490,
      478, 1499, 1505, 1779, 1522, 1779, 1523, 1779, 1074, 1506,
      407,  405, 1388, 1507, 1487, 1512, 1497,  418, 1492, 1519,
      385, 1504, 1521, 1524,  324, 1527, 1779,  319,  277, 1340,
      257, 1522, 1355, 1512,  271, 1779,  202,  152, 1525, 1529,
     1779, 1508,   74,  100, 1535, 1779, 1517,   52, 1779, 1779,
     1591, 1600, 1609, 1618, 1620, 1626, 1631, 1640, 1649, 1653,
     1657, 1666, 1670, 1671, 1675, 1677, 1686, 1695, 1703, 1709,

     1717, 1726, 1728, 1732, 1734, 1738, 1741, 1744, 1746, 1748,
     1750, 1754, 1756, 1758, 1760
    } ;

static yyconst short int yy_def[516] =
    {   0,
      480,    1,  481,  481,  482,  482,  480,    7,  480,  480,
      480,  480,  480,  483,  480,  480,  480,  484,  480,  480,
      480,  480,  480,  480,  485,  480,  480,  480,  486,  480,
      480,  480,  480,  480,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  480,  480,  480,  487,  480,  480,
      480,  480,  480,  480,  488,  489,  480,  480,  480,  480,
      480,  480,  480,  480,  490,  480,  480,  483,  480,  480,
      480,  484,  480,  480,  480,  480,  480,  480,  480,  491,
      491,  491,  491,  491,  491,  492,  480,  480,  480,  480,

      493,  494,  480,  495,  496,  480,  480,  480,  497,  498,
      480,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  499,  500,  501,
      502,  480,  488,  480,  489,  480,  480,  503,  480,  490,
      480,  491,  491,  480,  491,  491,  480,  492,  480,  480,
      480,  493,  480,  495,  504,  497,  480,  498,  505,  487,
      487,  487,  487,  480,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  480,  480,  487,  487,

      480,  506,  507,  501,  480,  502,  480,  508,  480,  491,
      491,  480,  509,  510,  163,  511,  504,  480,  512,  487,
      487,  487,  487,  480,  480,  487,  487,  487,  480,  480,
      487,  487,  487,  487,  487,  487,  487,  487,  480,  480,
      487,  487,  487,  487,  487,  480,  480,  487,  480,  480,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  499,
      500,  508,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  512,  487,  487,  487,  480,  480,  487,  487,  480,
      480,  487,  480,  487,  487,  487,  487,  487,  487,  480,
      480,  487,  487,  487,  480,  480,  487,  487,  480,  480,

      487,  487,  480,  480,  487,  487,  487,  480,  480,  487,
      487,  480,  267,  268,  269,  269,  513,  514,  270,  515,
      487,  480,  480,  487,  480,  480,  480,  480,  487,  487,
      487,  480,  487,  480,  480,  487,  480,  480,  487,  487,
      487,  487,  480,  480,  487,  487,  487,  487,  487,  487,
      487,  480,  480,  313,  314,  480,  480,  480,  358,  480,
      480,  480,  487,  480,  480,  487,  480,  487,  480,  480,
      487,  487,  487,  487,  480,  480,  487,  487,  487,  487,
      480,  480,  487,  487,  356,  357,  358,  358,  480,  487,
      480,  480,  480,  480,  487,  487,  480,  480,  487,  487,

      487,  487,  480,  480,  487,  480,  480,  487,  487,  385,
      386,  480,  487,  480,  487,  480,  480,  480,  480,  487,
      487,  487,  480,  487,  480,  480,  487,  487,  480,  487,
      480,  487,  480,  480,  480,  480,  480,  480,  480,  487,
      480,  480,  487,  487,  480,  487,  480,  487,  480,  487,
      480,  480,  487,  487,  480,  487,  480,  480,  487,  480,
      480,  487,  487,  480,  487,  480,  480,  480,  487,  487,
      480,  480,  480,  487,  487,  480,  480,  487,  480,    0,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480
    } ;

static yyconst short int yy_nxt[1842] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   41,   42,   41,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   41,   53,   54,   41,
       55,   10,   56,   57,   58,   39,   42,   43,   45,   59,
       60,   61,   63,   64,   83,   65,  111,   63,   64,   66,
       65,   69,  111,   70,   66,   69,   84,   70,   67,   67,
       67,   85,  111,   67,   67,   67,   96,   87,  114,   90,
      102,   71,   86,   97,   92,   71,   88,   89,  105,  106,

       77,   93,   94,  153,  103,  111,   98,   95,   99,   99,
       99,  109,  113,  114,  111,  110,  477,   90,  161,  161,
       72,   93,  124,  153,   72,   73,   74,   62,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   73,   73,   73,   73,   75,
       75,   75,   75,   75,   73,   73,   73,   98,  111,   99,
       99,   99,  111,  111,  111,  111,  111,  473,  111,  100,

      115,  111,  111,  111,  111,  138,  111,  161,  161,  139,
      116,  126,  111,  111,  111,  111,  121,  117,  125,  287,
      101,  122,  133,  118,  130,  119,  127,  123,  115,  132,
      128,  116,  131,  134,  129,  120,  126,  135,  121,  111,
      111,  472,  136,  111,  118,  119,  111,  133,  146,  140,
      147,  147,  147,  141,  127,  128,  129,  111,  137,  111,
      160,  160,  160,   98,  171,   99,   99,   99,  174,  173,
      170,  111,  172,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  468,  111,  178,  113,
      111,  111,  183,  111,  179,  175,  111,  173,  111,  180,

      177,  182,  189,  184,  181,  186,  190,  111,  191,  185,
      192,  111,  193,  111,  176,  111,  179,  187,  188,  180,
      197,  182,  223,  189,  220,  195,  111,  199,  194,  196,
      227,  111,  192,  111,  198,  200,  207,  207,  207,  146,
      239,  147,  147,  147,  160,  160,  160,  249,  240,  199,
      244,  466,  464,  195,  196,  250,  237,  200,  213,  213,
      111,  213,  213,  213,  213,  213,  213,  213,  214,  213,
      213,  213,  213,  213,  213,  215,  215,  215,  213,  213,
      213,  213,  213,  216,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  215,  215,  213,  213,
      213,  213,  215,  215,  215,  215,  215,  213,  213,  213,
      111,  174,  111,  111,  111,  111,  111,  111,  111,  460,
      111,  239,  111,  452,  111,  451,  226,  241,  222,  240,
      221,  228,  238,  111,  111,  240,  242,  246,  224,  111,
      111,  111,  243,  254,  111,  247,  111,  248,  111,  245,
      111,  247,  221,  222,  226,  251,  228,  225,  229,  197,
      238,  111,  252,  111,  242,  111,  230,  257,  111,  111,
      253,  111,  230,  198,  245,  255,  256,  207,  207,  207,
      251,  273,  276,  111,  246,  231,  232,  258,  233,  274,

      259,  234,  247,  249,  280,  111,  447,  290,  275,  442,
      235,  250,  281,  273,  236,  291,  439,  258,  321,  274,
      276,  259,  278,  234,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  111,  280,
      229,  111,  269,  269,  269,  269,  269,  281,  230,  111,
      111,  111,  111,  281,  111,  290,  111,  111,  279,  111,
      111,  284,  111,  291,  111,  111,  285,  288,  111,  291,
      111,  295,  282,  289,  429,  286,  111,  111,  292,  296,
      279,  294,  283,  426,  111,  296,  302,  293,  301,  284,

      297,  298,  288,  299,  282,  303,  305,  307,  111,  292,
      308,  300,  294,  304,  306,  111,  111,  300,  111,  304,
      325,  302,  328,  111,  309,  111,  310,  332,  326,  307,
      111,  311,  334,  111,  326,  337,  111,  425,  111,  295,
      335,  111,  331,  338,  328,  111,  335,  296,  111,  338,
      412,  345,  332,  348,  392,  351,  311,  213,  213,  333,
      213,  213,  213,  213,  213,  213,  213,  214,  213,  213,
      213,  213,  213,  213,  313,  313,  313,  213,  213,  213,
      213,  213,  216,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,

      313,  313,  313,  313,  313,  313,  313,  213,  213,  213,
      213,  313,  313,  313,  313,  313,  213,  213,  213,  213,
      213,  111,  213,  213,  213,  213,  213,  213,  213,  214,
      213,  213,  213,  213,  213,  213,  314,  314,  314,  213,
      213,  213,  213,  213,  216,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  213,
      213,  213,  213,  314,  314,  314,  314,  314,  213,  213,
      213,  213,  213,  111,  213,  213,  213,  213,  213,  213,
      213,  214,  213,  213,  213,  213,  213,  213,  315,  315,

      315,  213,  213,  213,  213,  213,  216,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  213,  213,  213,  213,  316,  316,  316,  316,  316,
      213,  213,  213,  317,  317,  367,  317,  317,  317,  317,
      317,  317,  317,  318,  317,  317,  317,  317,  317,  317,
      319,  319,  319,  317,  317,  317,  317,  317,  320,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  317,  317,  317,  317,  319,  319,  319,

      319,  319,  317,  317,  317,  322,  111,  111,  111,  111,
      111,  111,  343,  323,  111,  111,  299,  111,  111,  323,
      344,  111,  303,  329,  300,  111,  344,  111,  330,  340,
      304,  325,  308,  341,  342,  364,  336,  339,  365,  326,
      111,  346,  111,  349,  352,  350,  309,  324,  329,  330,
      347,  340,  353,  360,  341,  334,  342,  111,  353,  365,
      364,  361,  111,  335,  111,  350,  111,  361,  349,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  371,  111,  379,  111,  354,  354,  354,

      354,  354,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  111,  408,  327,  373,
      355,  355,  355,  355,  355,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  111,
      322,  111,  111,  358,  358,  358,  358,  358,  323,  111,
      111,  337,  343,  369,  312,  363,  375,  111,  366,  338,
      344,  370,  111,  372,  376,  368,  111,  370,  111,  111,
      376,  352,  389,  381,  377,  374,  391,  378,  111,  353,

      363,  382,  362,  366,  372,  360,  111,  382,  449,  431,
      368,  441,  369,  361,  111,  263,  380,  389,  375,  378,
      370,  391,  377,  383,  201,  390,  376,  393,  400,  431,
      449,  441,  384,  317,  317,  394,  317,  317,  317,  317,
      317,  317,  317,  318,  317,  317,  317,  317,  317,  317,
      385,  385,  385,  317,  317,  317,  317,  317,  320,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  317,  317,  317,  317,  385,  385,  385,
      385,  385,  317,  317,  317,  317,  317,  201,  317,  317,

      317,  317,  317,  317,  317,  318,  317,  317,  317,  317,
      317,  317,  386,  386,  386,  317,  317,  317,  317,  317,
      320,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  317,  317,  317,  317,  386,
      386,  386,  386,  386,  317,  317,  317,  317,  317,  277,
      317,  317,  317,  317,  317,  317,  317,  318,  317,  317,
      317,  317,  317,  317,  387,  387,  387,  317,  317,  317,
      317,  317,  320,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  317,  317,  317,
      317,  388,  388,  388,  388,  388,  317,  317,  317,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  111,  393,  111,  111,  387,  387,  387,
      387,  387,  394,  111,  397,  111,  111,  111,  394,  395,
      111,  396,  398,  403,  381,  416,  414,  111,  398,  111,
      399,  404,  382,  417,  467,  111,  111,  404,  111,  417,
      111,  397,  401,  402,  395,  418,  396,  413,  409,  398,
      399,  414,  111,  419,  406,  111,  467,  271,  111,  419,

      470,  218,  111,  407,  424,  428,  432,  405,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  453,  266,  265,  264,  410,  410,  410,  410,
      410,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  111,  111,  111,  403,  411,
      411,  411,  411,  411,  111,  111,  404,  111,  416,  418,
      111,  111,  420,  421,  433,  445,  417,  419,  435,  415,
      422,  111,  434,  430,  263,  443,  436,  111,  434,  427,

      440,  111,  436,  437,  111,  444,  433,  420,  421,  415,
      445,  438,  423,  111,  434,  422,  111,  438,  430,  427,
      111,  111,  440,  435,  437,  455,  111,  457,  446,  448,
      458,  436,  438,  111,  461,  111,  111,  454,  111,  111,
      456,  111,  471,  111,  450,  455,  476,  479,  446,  111,
      458,  459,  457,  463,  448,  462,  205,  465,  205,  461,
      167,  469,  454,  474,  450,  478,  476,  471,  167,  218,
      159,  475,  479,  212,  211,  210,  209,  462,  149,  144,
      144,  142,  465,  474,  205,  205,  201,  201,  111,  111,
      478,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   91,   91,  104,
      169,  167,  167,  104,  104,  112,  112,  159,  112,  112,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  150,  157,
      150,  150,  152,  156,  152,  152,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  162,  155,  162,  163,  163,
      164,  154,  164,  164,  165,  165,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  168,  168,  168,  168,  168,

      168,  168,  168,  168,  202,   79,  151,   79,  202,   76,
      202,  203,  149,  148,  203,  144,  203,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  208,  208,  217,  217,  217,
      217,  219,  219,  260,  144,  260,  261,  142,  261,  262,
      262,  262,  262,  267,  267,  268,  268,  270,  270,  272,
      111,  272,  272,  356,  356,  357,  357,  359,  359,  108,
      107,   79,   81,   80,   79,   77,   76,  480,    9,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480
    } ;

static yyconst short int yy_chk[1842] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,   21,    3,  478,    4,    4,    3,
        4,    5,   36,    5,    4,    6,   21,    6,    3,    3,
        3,   22,   35,    4,    4,    4,   26,   24,   36,   25,
       29,    5,   22,   26,   25,    6,   24,   24,   31,   31,

       31,   25,   25,   90,   29,   42,   28,   25,   28,   28,
       28,   34,   35,   36,  474,   34,  473,   25,  100,  100,
        5,   25,   42,   90,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,   27,   37,   27,
       27,   27,   38,   43,   46,   44,   40,  468,   48,   27,

       37,   39,  234,   50,   47,   54,   49,  161,  161,   54,
       37,   44,   51,   52,   45,   54,   40,   38,   43,  234,
       27,   40,   49,   39,   46,   39,   45,   40,   37,   48,
       45,   37,   47,   50,   45,   39,   44,   51,   40,   53,
      113,  467,   52,  115,   39,   39,  114,   49,   67,   58,
       67,   67,   67,   58,   45,   45,   45,  116,   53,   58,
       98,   98,   98,   99,  114,   99,   99,   99,  117,  116,
      113,  118,  115,  119,  120,  121,  122,  123,  125,  126,
      129,  117,  127,  131,  128,  465,  461,  130,  119,   58,
      132,  459,  125,  173,  120,  117,  170,  116,  133,  121,

      118,  123,  129,  125,  122,  127,  130,  136,  131,  126,
      132,  176,  133,  134,  117,  137,  120,  128,  128,  121,
      135,  123,  173,  129,  170,  134,  179,  136,  133,  134,
      176,  185,  132,  135,  135,  137,  146,  146,  146,  147,
      239,  147,  147,  147,  160,  160,  160,  189,  239,  136,
      185,  458,  455,  134,  134,  189,  179,  137,  163,  163,
      189,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      171,  174,  172,  182,  175,  177,  184,  188,  193,  451,
      180,  181,  448,  442,  183,  441,  175,  182,  172,  181,
      171,  177,  180,  186,  181,  181,  183,  187,  174,  190,
      192,  196,  184,  193,  194,  187,  195,  188,  191,  186,
      187,  187,  171,  172,  175,  190,  177,  174,  178,  197,
      180,  220,  191,  199,  183,  221,  178,  196,  200,  223,
      192,  178,  178,  197,  186,  194,  195,  207,  207,  207,
      190,  220,  224,  226,  246,  178,  178,  199,  178,  221,

      200,  178,  246,  249,  280,  273,  431,  290,  223,  426,
      178,  249,  280,  220,  178,  290,  423,  199,  273,  221,
      224,  200,  226,  178,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  227,  228,
      229,  232,  215,  215,  215,  215,  215,  228,  229,  231,
      233,  235,  228,  228,  236,  237,  238,  241,  227,  242,
      251,  231,  245,  237,  254,  244,  232,  235,  237,  237,
      252,  243,  228,  236,  412,  233,  255,  256,  238,  243,
      227,  242,  229,  407,  243,  243,  252,  241,  251,  231,

      244,  245,  235,  248,  228,  253,  254,  256,  258,  238,
      257,  248,  242,  253,  255,  259,  248,  248,  253,  253,
      275,  252,  277,  257,  257,  282,  258,  283,  275,  256,
      284,  259,  285,  275,  275,  287,  297,  406,  302,  295,
      285,  307,  282,  287,  277,  285,  285,  295,  287,  287,
      389,  297,  283,  302,  367,  307,  259,  267,  267,  284,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  268,
      268,  366,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  269,  269,  350,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  270,  270,  332,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,

      270,  270,  270,  270,  270,  274,  279,  278,  286,  289,
      288,  292,  294,  274,  293,  298,  299,  301,  274,  274,
      294,  306,  303,  278,  299,  294,  294,  305,  279,  289,
      303,  325,  308,  292,  293,  327,  286,  288,  328,  325,
      331,  298,  329,  305,  310,  306,  308,  274,  278,  279,
      301,  289,  310,  321,  292,  334,  293,  310,  310,  328,
      327,  321,  339,  334,  348,  306,  321,  321,  305,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  339,  341,  348,  383,  313,  313,  313,

      313,  313,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  311,  383,  276,  341,
      314,  314,  314,  314,  314,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  324,
      322,  340,  330,  319,  319,  319,  319,  319,  322,  333,
      342,  337,  343,  336,  263,  324,  345,  347,  330,  337,
      343,  336,  346,  340,  345,  333,  336,  336,  349,  345,
      345,  352,  362,  351,  346,  342,  365,  347,  363,  352,

      324,  351,  322,  330,  340,  360,  351,  351,  439,  414,
      333,  425,  369,  360,  377,  262,  349,  362,  375,  347,
      369,  365,  346,  351,  261,  363,  375,  393,  377,  414,
      439,  425,  351,  356,  356,  393,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  357,  357,  260,  357,  357,

      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  358,  358,  225,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,

      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  371,  368,  372,  374,  359,  359,  359,
      359,  359,  368,  378,  373,  379,  390,  368,  368,  371,
      384,  372,  373,  380,  381,  396,  392,  373,  373,  463,
      374,  380,  381,  396,  460,  405,  380,  380,  396,  396,
      409,  397,  378,  379,  371,  399,  372,  390,  384,  397,
      374,  392,  415,  399,  381,  222,  460,  218,  399,  399,

      463,  217,  443,  381,  405,  409,  415,  380,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  443,  211,  210,  209,  385,  385,  385,  385,
      385,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  395,  400,  401,  403,  386,
      386,  386,  386,  386,  402,  408,  403,  413,  416,  418,
      424,  427,  400,  401,  420,  429,  416,  418,  421,  395,
      402,  428,  420,  413,  208,  427,  421,  420,  420,  408,

      424,  421,  421,  422,  430,  428,  433,  400,  401,  395,
      429,  422,  403,  432,  433,  402,  422,  422,  413,  408,
      440,  444,  424,  435,  437,  445,  446,  447,  430,  432,
      449,  435,  437,  450,  452,  453,  462,  444,  454,  469,
      446,  456,  464,  470,  440,  445,  472,  477,  430,  475,
      449,  450,  447,  454,  432,  453,  206,  456,  204,  452,
      168,  462,  444,  469,  440,  475,  472,  464,  166,  165,
      158,  470,  477,  156,  155,  153,  151,  453,  149,  145,
      143,  142,  456,  469,  141,  140,  139,  138,  124,  112,
      475,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  485,  485,  486,
      111,  110,  109,  486,  486,  487,  487,   96,  487,  487,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  490,   95,
      490,  490,  491,   94,  491,  491,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  493,   93,  493,  494,  494,
      495,   92,  495,  495,  496,  496,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  498,  498,  498,  498,  498,

      498,  498,  498,  498,  499,   82,   80,   78,  499,   76,
      499,  500,   74,   71,  500,   66,  500,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  503,  503,  504,  504,  504,
      504,  505,  505,  506,   65,  506,  507,   63,  507,  508,
      508,  508,  508,  509,  509,  510,  510,  511,  511,  512,
       41,  512,  512,  513,  513,  514,  514,  515,  515,   33,
       32,   18,   17,   15,   14,   13,   11,    9,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./lexer.lex"
#define INITIAL 0
/*
 *  CCC - The Clipper to C++ Compiler
 *  Copyright (C) 2005 ComFirm BT.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
#line 22 "./lexer.lex"

#include <malloc.h>
#include <string.h>
#include <stdio.h>

#define INCLUDED_FROM_LEXER_LEX
#include <lexer.h>

#define line 1
#define raw 2
#define sym 3

#define YY_STACK_USED 1
#line 1004 "ppo/lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
     if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
             YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
     {
     register yy_state_type yy_current_state;
     register char *yy_cp, *yy_bp;
     register int yy_act;

#line 103 "./lexer.lex"


#line 1134 "ppo/lexer.cpp"

     if ( yy_init )
             {
             yy_init = 0;

#ifdef YY_USER_INIT
             YY_USER_INIT;
#endif

             if ( ! yy_start )
                     yy_start = 1;   /* first start state */

             if ( ! yyin )
                     yyin = &std::cin;

             if ( ! yyout )
                     yyout = &std::cout;

             if ( ! yy_current_buffer )
                     yy_current_buffer =
                             yy_create_buffer( yyin, YY_BUF_SIZE );

             yy_load_buffer_state();
             }

     while ( 1 )             /* loops until end-of-file is reached */
             {
             yy_cp = yy_c_buf_p;

             /* Support of yytext. */
             *yy_cp = yy_hold_char;

             /* yy_bp points to the position in yy_ch_buf of the start of
              * the current run.
              */
             yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 481 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1779 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

             YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:   /* This label is used only to access EOF actions. */


             switch ( yy_act )
     { /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 105 "./lexer.lex"
{yy_push_state(line);}
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 107 "./lexer.lex"
{setinputlineno();}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 108 "./lexer.lex"
{setinputfspec();}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 109 "./lexer.lex"
{} 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 110 "./lexer.lex"
{yy_pop_state();} 
	YY_BREAK

case 6:
YY_RULE_SETUP
#line 113 "./lexer.lex"
{yy_push_state(raw);raw_set();}
	YY_BREAK

case 7:
YY_RULE_SETUP
#line 115 "./lexer.lex"
{if(raw_cmp()){yy_pop_state();return STRING;}}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 116 "./lexer.lex"
{raw_cat("\\\\");}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 117 "./lexer.lex"
{raw_cat("\\\"");}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 118 "./lexer.lex"
{raw_cat("\\n\\\n");}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 119 "./lexer.lex"
{raw_cat();}
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 122 "./lexer.lex"
{return DOT;} 
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 123 "./lexer.lex"
{return COMMA;} 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 124 "./lexer.lex"
{return COLON;} 
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 125 "./lexer.lex"
{return ASSIGN;} 
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 126 "./lexer.lex"
{return ADDASS;} 
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 127 "./lexer.lex"
{return SUBASS;} 
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 128 "./lexer.lex"
{return MULASS;} 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 129 "./lexer.lex"
{return DIVASS;} 
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 130 "./lexer.lex"
{return MODASS;} 
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 131 "./lexer.lex"
{return EQ;} 
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 132 "./lexer.lex"
{return EQEQ;} 
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 133 "./lexer.lex"
{return GTEQ;} 
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 134 "./lexer.lex"
{return LTEQ;} 
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 135 "./lexer.lex"
{return EXEQ;} 
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 136 "./lexer.lex"
{return GT;} 
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 137 "./lexer.lex"
{return LT;} 
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 138 "./lexer.lex"
{return DOLLAR;} 
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 139 "./lexer.lex"
{return PLUS;} 
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 140 "./lexer.lex"
{return MINUS;} 
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 141 "./lexer.lex"
{return STAR;} 
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 142 "./lexer.lex"
{return SLASH;} 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 143 "./lexer.lex"
{return MODULO;} 
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 144 "./lexer.lex"
{return DBSTAR;} 
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 145 "./lexer.lex"
{return DBPLUS;} 
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 146 "./lexer.lex"
{return DBMINUS;} 
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 147 "./lexer.lex"
{return LBRACKET;} 
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 148 "./lexer.lex"
{return ARROW;} 
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 149 "./lexer.lex"
{return LPAR;} 
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 150 "./lexer.lex"
{return RPAR;} 
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 151 "./lexer.lex"
{return AT;} 
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 152 "./lexer.lex"
{return LBRACE;} 
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 153 "./lexer.lex"
{return PIPE;} 
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 154 "./lexer.lex"
{return RBRACE;} 
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 155 "./lexer.lex"
{return RBRACKET;} 
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 156 "./lexer.lex"
{return TRUE;} 
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 157 "./lexer.lex"
{return FALSE;} 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 158 "./lexer.lex"
{return OR;} 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 159 "./lexer.lex"
{return AND;} 
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 160 "./lexer.lex"
{return NOT;} 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 162 "./lexer.lex"
{return FUNCTION;} 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 163 "./lexer.lex"
{return FUNCTION;} 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 164 "./lexer.lex"
{return STFUNCTION;} 
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 165 "./lexer.lex"
{return STFUNCTION;} 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 166 "./lexer.lex"
{return STATIC;} 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 167 "./lexer.lex"
{return LOCAL;} 
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 168 "./lexer.lex"
{return QUIT;} 
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 169 "./lexer.lex"
{return NIL;} 
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 170 "./lexer.lex"
{return RETURN;} 
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 172 "./lexer.lex"
{return CLASS;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 173 "./lexer.lex"
{return NEW;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 174 "./lexer.lex"
{yy_push_state(sym); return ATTRIB;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 175 "./lexer.lex"
{yy_push_state(sym); return METHOD;}
	YY_BREAK

case 64:
YY_RULE_SETUP
#line 177 "./lexer.lex"
{yy_pop_state();return SYMBOL;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 178 "./lexer.lex"
{}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 179 "./lexer.lex"
{return UNEXPECTEDCHAR;}
	YY_BREAK

case 67:
YY_RULE_SETUP
#line 182 "./lexer.lex"
{return WHILE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 183 "./lexer.lex"
{return WHILE;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 184 "./lexer.lex"
{return EXIT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 185 "./lexer.lex"
{return LOOP;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 186 "./lexer.lex"
{return END;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 187 "./lexer.lex"
{return END;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 188 "./lexer.lex"
{return END;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 190 "./lexer.lex"
{return FOR;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 191 "./lexer.lex"
{return TO;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 192 "./lexer.lex"
{return STEP;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 193 "./lexer.lex"
{return END;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 194 "./lexer.lex"
{return END;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 196 "./lexer.lex"
{return IF;} 
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 197 "./lexer.lex"
{return ELSEIF;} 
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 198 "./lexer.lex"
{return ELSE;} 
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 199 "./lexer.lex"
{return END;} 
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 201 "./lexer.lex"
{return DOCASE;} 
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 202 "./lexer.lex"
{return CASE;} 
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 203 "./lexer.lex"
{return OTHERWISE;} 
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 204 "./lexer.lex"
{return END;} 
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 206 "./lexer.lex"
{return BEGSEQ;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 207 "./lexer.lex"
{return BEGSEQ;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 208 "./lexer.lex"
{return RECOVER;} 
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 209 "./lexer.lex"
{return RECOVER;} 
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 210 "./lexer.lex"
{return FINALLY;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 211 "./lexer.lex"
{return END;} 
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 212 "./lexer.lex"
{return NAMESPACE;} 
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 213 "./lexer.lex"
{return USING;} 
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 215 "./lexer.lex"
{return NL;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 216 "./lexer.lex"
{incinputlineno();return NL;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 217 "./lexer.lex"
{incinputlineno();return NL;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 219 "./lexer.lex"
{return STRING;} 
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 220 "./lexer.lex"
{return NLSTEXT;} 
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 221 "./lexer.lex"
{return BINARYA;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 222 "./lexer.lex"
{return BINARYX;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 223 "./lexer.lex"
{return NUMBER;} 
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 224 "./lexer.lex"
{return NUMBER;} 
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 225 "./lexer.lex"
{return NUMBER;} 
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 226 "./lexer.lex"
{return SYMBOL;} 
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 228 "./lexer.lex"
{return COMPOUND;} 
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 229 "./lexer.lex"
{return COMPOUND;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 230 "./lexer.lex"
{return COMPOUND;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 231 "./lexer.lex"
{return COMPOUND;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 232 "./lexer.lex"
{return COMPOUND;}
	YY_BREAK
case 111:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 234 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 112:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 235 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 113:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 236 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 114:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 237 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 115:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 238 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 116:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 239 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 117:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 240 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 118:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 241 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 119:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 242 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 120:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 243 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 121:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 244 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 122:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 245 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 123:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 246 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 124:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 247 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 125:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 248 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 126:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 249 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 127:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 250 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 128:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 251 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 129:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 252 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 130:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 253 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 131:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 254 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 132:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 255 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 133:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 256 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 134:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 257 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 135:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 258 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 136:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 259 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 137:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 260 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 138:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 261 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 139:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 262 "./lexer.lex"
{return SYMBOL;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 264 "./lexer.lex"
{}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 265 "./lexer.lex"
{return UNEXPECTEDCHAR;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 267 "./lexer.lex"
ECHO;
	YY_BREAK
#line 2028 "ppo/lexer.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(line):
			case YY_STATE_EOF(raw):
			case YY_STATE_EOF(sym):
				yyterminate();

     case YY_END_OF_BUFFER:
             {
             /* Amount of text matched not including the EOB char. */
             int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

             /* Undo the effects of YY_DO_BEFORE_ACTION. */
             *yy_cp = yy_hold_char;
             YY_RESTORE_YY_MORE_OFFSET

             if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
                     {
                     /* We're scanning a new file or input source.  It's
                      * possible that this happened because the user
                      * just pointed yyin at a new source and called
                      * yylex().  If so, then we have to assure
                      * consistency between yy_current_buffer and our
                      * globals.  Here is the right place to do so, because
                      * this is the first action (other than possibly a
                      * back-up) that will match for the new input source.
                      */
                     yy_n_chars = yy_current_buffer->yy_n_chars;
                     yy_current_buffer->yy_input_file = yyin;
                     yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
                     }

             /* Note that here we test for yy_c_buf_p "<=" to the position
              * of the first EOB in the buffer, since yy_c_buf_p will
              * already have been incremented past the NUL character
              * (since all states make transitions on EOB to the
              * end-of-buffer state).  Contrast this with the test
              * in input().
              */
             if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                     { /* This was really a NUL. */
                     yy_state_type yy_next_state;

                     yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                     yy_current_state = yy_get_previous_state();

                     /* Okay, we're now positioned to make the NUL
                      * transition.  We couldn't have
                      * yy_get_previous_state() go ahead and do it
                      * for us because it doesn't know how to deal
                      * with the possibility of jamming (and we don't
                      * want to build jamming into it because then it
                      * will run more slowly).
                      */

                     yy_next_state = yy_try_NUL_trans( yy_current_state );

                     yy_bp = yytext_ptr + YY_MORE_ADJ;

                     if ( yy_next_state )
                             {
                             /* Consume the NUL. */
                             yy_cp = ++yy_c_buf_p;
                             yy_current_state = yy_next_state;
                             goto yy_match;
                             }

                     else
                             {
				yy_cp = yy_c_buf_p;
                             goto yy_find_action;
                             }
                     }

             else switch ( yy_get_next_buffer() )
                     {
                     case EOB_ACT_END_OF_FILE:
                             {
                             yy_did_buffer_switch_on_eof = 0;

                             if ( yywrap() )
                                     {
                                     /* Note: because we've taken care in
                                      * yy_get_next_buffer() to have set up
                                      * yytext, we can now set up
                                      * yy_c_buf_p so that if some total
                                      * hoser (like flex itself) wants to
                                      * call the scanner after we return the
                                      * YY_NULL, it'll still work - another
                                      * YY_NULL will get returned.
                                      */
                                     yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                                     yy_act = YY_STATE_EOF(YY_START);
                                     goto do_action;
                                     }

                             else
                                     {
                                     if ( ! yy_did_buffer_switch_on_eof )
                                             YY_NEW_FILE;
                                     }
                             break;
                             }

                     case EOB_ACT_CONTINUE_SCAN:
                             yy_c_buf_p =
                                     yytext_ptr + yy_amount_of_matched_text;

                             yy_current_state = yy_get_previous_state();

                             yy_cp = yy_c_buf_p;
                             yy_bp = yytext_ptr + YY_MORE_ADJ;
                             goto yy_match;

                     case EOB_ACT_LAST_MATCH:
                             yy_c_buf_p =
                             &yy_current_buffer->yy_ch_buf[yy_n_chars];

                             yy_current_state = yy_get_previous_state();

                             yy_cp = yy_c_buf_p;
                             yy_bp = yytext_ptr + YY_MORE_ADJ;
                             goto yy_find_action;
                     }
             break;
             }

     default:
             YY_FATAL_ERROR(
                     "fatal flex scanner internal error--no action found" );
     } /* end of action switch */
             } /* end of scanning one token */
     } /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
     {
     yyin = arg_yyin;
     yyout = arg_yyout;
     yy_c_buf_p = 0;
     yy_init = 1;
     yy_start = 0;
     yy_flex_debug = 0;
     yylineno = 1;   // this will only get updated if %option yylineno

     yy_did_buffer_switch_on_eof = 0;

     yy_looking_for_trail_begin = 0;
     yy_more_flag = 0;
     yy_more_len = 0;
     yy_more_offset = yy_prev_more_offset = 0;

     yy_start_stack_ptr = yy_start_stack_depth = 0;
     yy_start_stack = 0;

     yy_current_buffer = 0;

#ifdef YY_USES_REJECT
     yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
     yy_state_buf = 0;
#endif
     }

yyFlexLexer::~yyFlexLexer()
     {
     delete yy_state_buf;
     yy_delete_buffer( yy_current_buffer );
     yy_flex_free( yy_start_stack );
     yy_start_stack=0;
     }

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
     {
     if ( new_in )
             {
             yy_delete_buffer( yy_current_buffer );
             yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
             }

     if ( new_out )
             yyout = new_out;
     }

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
     {
     if ( yyin->eof() || yyin->fail() )
             return 0;

#ifdef YY_INTERACTIVE
     yyin->get( buf[0] );

     if ( yyin->eof() )
             return 0;

     if ( yyin->bad() )
             return -1;

     return 1;

#else
     (void) yyin->read( buf, max_size );

     if ( yyin->bad() )
             return -1;
     else
             return yyin->gcount();
#endif
     }

void yyFlexLexer::LexerOutput( const char* buf, int size )
     {
     (void) yyout->write( buf, size );
     }

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *   EOB_ACT_LAST_MATCH -
 *   EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *   EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
     {
     register char *dest = yy_current_buffer->yy_ch_buf;
     register char *source = yytext_ptr;
     register int number_to_move, i;
     int ret_val;

     if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
             YY_FATAL_ERROR(
             "fatal flex scanner internal error--end of buffer missed" );

     if ( yy_current_buffer->yy_fill_buffer == 0 )
             { /* Don't try to fill the buffer, so this is an EOF. */
             if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
                     {
                     /* We matched a single character, the EOB, so
                      * treat this as a final EOF.
                      */
                     return EOB_ACT_END_OF_FILE;
                     }

             else
                     {
                     /* We matched some text prior to the EOB, first
                      * process it.
                      */
                     return EOB_ACT_LAST_MATCH;
                     }
             }

     /* Try to read more data. */

     /* First move last chars to start of buffer. */
     number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

     for ( i = 0; i < number_to_move; ++i )
             *(dest++) = *(source++);

     if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
             /* don't do the read, it's not guaranteed to return an EOF,
              * just force an EOF
              */
             yy_current_buffer->yy_n_chars = yy_n_chars = 0;

     else
             {
             int num_to_read =
                     yy_current_buffer->yy_buf_size - number_to_move - 1;

             while ( num_to_read <= 0 )
                     { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
                     YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

                     /* just a shorter name for the current buffer */
                     YY_BUFFER_STATE b = yy_current_buffer;

                     int yy_c_buf_p_offset =
                             (int) (yy_c_buf_p - b->yy_ch_buf);

                     if ( b->yy_is_our_buffer )
                             {
                             int new_size = b->yy_buf_size * 2;

                             if ( new_size <= 0 )
                                     b->yy_buf_size += b->yy_buf_size / 8;
                             else
                                     b->yy_buf_size *= 2;

                             b->yy_ch_buf = (char *)
                                     /* Include room in for 2 EOB chars. */
                                     yy_flex_realloc( (void *) b->yy_ch_buf,
                                                      b->yy_buf_size + 2 );
                             }
                     else
                             /* Can't grow it, we don't own it. */
                             b->yy_ch_buf = 0;

                     if ( ! b->yy_ch_buf )
                             YY_FATAL_ERROR(
                             "fatal error - scanner input buffer overflow" );

                     yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                     num_to_read = yy_current_buffer->yy_buf_size -
                                             number_to_move - 1;
#endif
                     }

             if ( num_to_read > YY_READ_BUF_SIZE )
                     num_to_read = YY_READ_BUF_SIZE;

             /* Read in more data. */
             YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
                     yy_n_chars, num_to_read );

             yy_current_buffer->yy_n_chars = yy_n_chars;
             }

     if ( yy_n_chars == 0 )
             {
             if ( number_to_move == YY_MORE_ADJ )
                     {
                     ret_val = EOB_ACT_END_OF_FILE;
                     yyrestart( yyin );
                     }

             else
                     {
                     ret_val = EOB_ACT_LAST_MATCH;
                     yy_current_buffer->yy_buffer_status =
                             YY_BUFFER_EOF_PENDING;
                     }
             }

     else
             ret_val = EOB_ACT_CONTINUE_SCAN;

     yy_n_chars += number_to_move;
     yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
     yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

     yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

     return ret_val;
     }


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
     {
     register yy_state_type yy_current_state;
     register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

     for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
             {
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 481 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
             }

     return yy_current_state;
     }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *   next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
     {
     register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 481 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 480);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

     return yy_is_jam ? 0 : yy_current_state;
     }


void yyFlexLexer::yyunput( int c, register char* yy_bp )
     {
     register char *yy_cp = yy_c_buf_p;

     /* undo effects of setting up yytext */
     *yy_cp = yy_hold_char;

     if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
             { /* need to shift things up to make room */
             /* +2 for EOB chars. */
             register int number_to_move = yy_n_chars + 2;
             register char *dest = &yy_current_buffer->yy_ch_buf[
                                     yy_current_buffer->yy_buf_size + 2];
             register char *source =
                             &yy_current_buffer->yy_ch_buf[number_to_move];

             while ( source > yy_current_buffer->yy_ch_buf )
                     *--dest = *--source;

             yy_cp += (int) (dest - source);
             yy_bp += (int) (dest - source);
             yy_current_buffer->yy_n_chars =
                     yy_n_chars = yy_current_buffer->yy_buf_size;

             if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                     YY_FATAL_ERROR( "flex scanner push-back overflow" );
             }

     *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

     yytext_ptr = yy_bp;
     yy_hold_char = *yy_cp;
     yy_c_buf_p = yy_cp;
     }


int yyFlexLexer::yyinput()
     {
     int c;

     *yy_c_buf_p = yy_hold_char;

     if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
             {
             /* yy_c_buf_p now points to the character we want to return.
              * If this occurs *before* the EOB characters, then it's a
              * valid NUL; if not, then we've hit the end of the buffer.
              */
             if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                     /* This was really a NUL. */
                     *yy_c_buf_p = '\0';

             else
                     { /* need more input */
                     int offset = yy_c_buf_p - yytext_ptr;
                     ++yy_c_buf_p;

                     switch ( yy_get_next_buffer() )
                             {
                             case EOB_ACT_LAST_MATCH:
                                     /* This happens because yy_g_n_b()
                                      * sees that we've accumulated a
                                      * token and flags that we need to
                                      * try matching the token before
                                      * proceeding.  But for input(),
                                      * there's no matching to consider.
                                      * So convert the EOB_ACT_LAST_MATCH
                                      * to EOB_ACT_END_OF_FILE.
                                      */

                                     /* Reset buffer status. */
                                     yyrestart( yyin );

                                     /* fall through */

                             case EOB_ACT_END_OF_FILE:
                                     {
                                     if ( yywrap() )
                                             return EOF;

                                     if ( ! yy_did_buffer_switch_on_eof )
                                             YY_NEW_FILE;
#ifdef __cplusplus
                                     return yyinput();
#else
                                     return input();
#endif
                                     }

                             case EOB_ACT_CONTINUE_SCAN:
                                     yy_c_buf_p = yytext_ptr + offset;
                                     break;
                             }
                     }
             }

     c = *(unsigned char *) yy_c_buf_p;      /* cast for 8-bit char's */
     *yy_c_buf_p = '\0';    /* preserve yytext */
     yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

     return c;
     }


void yyFlexLexer::yyrestart( std::istream* input_file )
     {
     if ( ! yy_current_buffer )
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

     yy_init_buffer( yy_current_buffer, input_file );
     yy_load_buffer_state();
     }


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
     {
     if ( yy_current_buffer == new_buffer )
             return;

     if ( yy_current_buffer )
             {
             /* Flush out information for old buffer. */
             *yy_c_buf_p = yy_hold_char;
             yy_current_buffer->yy_buf_pos = yy_c_buf_p;
             yy_current_buffer->yy_n_chars = yy_n_chars;
             }

     yy_current_buffer = new_buffer;
     yy_load_buffer_state();

     /* We don't actually know whether we did this switch during
      * EOF (yywrap()) processing, but the only time this flag
      * is looked at is after yywrap() is called, so it's safe
      * to go ahead and always set it.
      */
     yy_did_buffer_switch_on_eof = 1;
     }


void yyFlexLexer::yy_load_buffer_state()
     {
     yy_n_chars = yy_current_buffer->yy_n_chars;
     yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
     yyin = yy_current_buffer->yy_input_file;
     yy_hold_char = *yy_c_buf_p;
     }


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
     {
     YY_BUFFER_STATE b;

     b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
     if ( ! b )
             YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

     b->yy_buf_size = size;

     /* yy_ch_buf has to be 2 characters longer than the size given because
      * we need to put in 2 end-of-buffer characters.
      */
     b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
     if ( ! b->yy_ch_buf )
             YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

     b->yy_is_our_buffer = 1;

     yy_init_buffer( b, file );

     return b;
     }


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
     {
     if ( ! b )
             return;

     if ( b == yy_current_buffer )
             yy_current_buffer = (YY_BUFFER_STATE) 0;

     if ( b->yy_is_our_buffer )
             yy_flex_free( (void *) b->yy_ch_buf );

     yy_flex_free( (void *) b );
     }


//extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

     {
     yy_flush_buffer( b );

     b->yy_input_file = file;
     b->yy_fill_buffer = 1;

     b->yy_is_interactive = 0;
     }


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
     {
     if ( ! b )
             return;

     b->yy_n_chars = 0;

     /* We always need two end-of-buffer characters.  The first causes
      * a transition to the end-of-buffer state.  The second causes
      * a jam in that state.
      */
     b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
     b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

     b->yy_buf_pos = &b->yy_ch_buf[0];

     b->yy_at_bol = 1;
     b->yy_buffer_status = YY_BUFFER_NEW;

     if ( b == yy_current_buffer )
             yy_load_buffer_state();
     }


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
     {
     if ( yy_start_stack_ptr >= yy_start_stack_depth )
             {
             yy_size_t new_size;

             yy_start_stack_depth += YY_START_STACK_INCR;
             new_size = yy_start_stack_depth * sizeof( int );

             if ( ! yy_start_stack )
                     yy_start_stack = (int *) yy_flex_alloc( new_size );

             else
                     yy_start_stack = (int *) yy_flex_realloc(
                                     (void *) yy_start_stack, new_size );

             if ( ! yy_start_stack )
                     YY_FATAL_ERROR(
                     "out of memory expanding start-condition stack" );
             }

     yy_start_stack[yy_start_stack_ptr++] = YY_START;

     BEGIN(new_state);
     }
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
     {
     if ( --yy_start_stack_ptr < 0 )
             YY_FATAL_ERROR( "start-condition stack underflow" );

     BEGIN(yy_start_stack[yy_start_stack_ptr]);
     }
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
     {
     return yy_start_stack[yy_start_stack_ptr - 1];
     }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
     {
     std::cerr << msg << '\n';
     exit( YY_EXIT_FAILURE );
     }


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
     do \
             { \
             /* Undo effects of setting up yytext. */ \
             yytext[yyleng] = yy_hold_char; \
             yy_c_buf_p = yytext + n; \
             yy_hold_char = *yy_c_buf_p; \
             *yy_c_buf_p = '\0'; \
             yyleng = n; \
             } \
     while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
     {
     register int i;
     for ( i = 0; i < n; ++i )
             s1[i] = s2[i];
     }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
     {
     register int n;
     for ( n = 0; s[n]; ++n )
             ;

     return n;
     }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
     {
     return (void *) malloc( size );
     }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
     {
     /* The cast to (char *) in the following accommodates both
      * implementations that use char* generic pointers, and those
      * that use void* generic pointers.  It works with the latter
      * because both ANSI C and C++ allow castless assignment from
      * any pointer type to void*, and deal with argument conversions
      * as though doing an assignment.
      */
     return (void *) realloc( (char *) ptr, size );
     }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
     {
     free( ptr );
     }

#if YY_MAIN
int main()
     {
     yylex();
     return 0;
     }
#endif
#line 267 "./lexer.lex"


