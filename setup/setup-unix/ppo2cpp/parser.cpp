
/*
 *  CCC - The Clipper to C++ Compiler
 *  Copyright (C) 2005 ComFirm BT.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

//Vermes M.
//signed/unsigned comparison warning elkerülése,
//hogy cpp-ként is warning mentesen forduljon.
//void ParseTrace(FILE *TraceFILE, const char *zTracePrompt);

/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is include which follows the "include" declaration
** in the input file. */
#include <stdio.h>
#line 21 "./parser.lem"


#include <stdlib.h>
#include <parsenode.h>
#include <lexer.h>
#include <codegen.h>
#include <nodetab.h>

extern ppo2cpp_lexer *lexer;

int headerflag=1;
int parsing_complete=1;
static int blockflag=0;

static void nested_block()
{
    fprintf(stderr,"Error: nested code block at #line %d %s.\n",
            lexer->getinputlineno(),
            lexer->getinputfspec());

    exit(1);
}

static void double_defined_symbol(parsenode *p)
{
    fprintf(stderr,"Error: double defined symbol at #line %d %s (%s).\n",
            p->lineno, //lexer->getinputlineno(),
            lexer->getinputfspec(),
            p->text);

    exit(1);
}


static void add_static(parsenode *p)
{
    if( headerflag )
    {
        if( nodetab_globstat->search(p)>=0 )
        {
            double_defined_symbol(p);
        }
        nodetab_globstat->add(p);
    }
    else
    {
        if( nodetab_locstat->search(p)>=0 || nodetab_local->search(p)>=0 )
        {
            double_defined_symbol(p);
        }
        nodetab_locstat->add(p);
    }
}


static void add_local(parsenode *p)
{
    if( nodetab_locstat->search(p)>=0 || nodetab_local->search(p)>=0 )
    {
        double_defined_symbol(p);
    }
    nodetab_local->add(p);
}


static void add_blkarg(parsenode *p)
{
    //Itt felmerült, hogy hibát jelezzek, ha a blockargumentum 
    //korábbról definiálva van locstat-ként, vagy local-ként. 
    //Ehelyett azt az elvet követem, hogy belső változók
    //mindig felüldefiniálhatják a külső változókat.
    //A régebbi változat is így működött.

    if( nodetab_blkarg->search(p)>=0 )
    {
        double_defined_symbol(p);
    }
    nodetab_blkarg->add(p);
}


static void symbol_search(parsenode *p)
{
    int x;

    if( blockflag && (x=nodetab_blkarg->search(p))>=0 )
    {
        p->cargo=(x+1)|SYM_BLKARG;
    }
    else if( (x=nodetab_local->search(p))>=0 )
    {
        p->cargo=x|(blockflag?SYM_BLKLOC:SYM_LOCAL);
    }
    else if( (x=nodetab_locstat->search(p))>=0 )
    {
        p->cargo=x|(blockflag?SYM_BLKSTAT:SYM_LOCSTAT);
    }
    else if( (x=nodetab_globstat->search(p))>=0 )
    {
        p->cargo=x|SYM_GLOBSTAT;
    }
    else
    {
        fprintf(stderr,"Error: undefined symbol at #line %d %s (%s).\n",
                p->lineno, //lexer->getinputlineno(),
                lexer->getinputfspec(),
                p->text);
        exit(1);
    }

    //p->print("search");
    return;
}

static void write_strtab(FILE *strtab, parsenode *pnode)
{
    const char *p=pnode->text;
    int len=strlen(p);
    if( len>3 )
    {
        int i;
        for(i=0; i<len; i++)
        {
            if( isalpha(p[i]) || ((int)p[i]>128) )
            {
                break;
            }
        }
        if( i<len )
        {
            char inp[512];
            sprintf(inp,"%s",lexer->getinputfspec());
            unsigned int k;
            for( k=0; k<sizeof(inp); k++ )
            {
                if( inp[k]==0 )
                {
                    break;
                }
                else if( inp[k]=='\"' )
                {
                    inp[k]=' ';
                }
            }
            fprintf(strtab,"%s<<\"\" from %s (%d)\n",p,inp,pnode->lineno);
        }
    }
}


#line 165 "./parser.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
/*  */
#define YYCODETYPE unsigned char
#define YYNOCODE 141
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE parsenode*
typedef union {
  ParseTOKENTYPE yy0;
  int yy281;
} YYMINORTYPE;
#define YYSTACKDEPTH 100
#define ParseARG_SDECL
#define ParseARG_PDECL
#define ParseARG_FETCH
#define ParseARG_STORE
#define YYNSTATE 334
#define YYNRULE 176
#define YYERRORSYMBOL 84
#define YYERRSYMDT yy281
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static YYACTIONTYPE yy_action[] = {
 /*     0 */   440,    7,   51,   53,   55,   57,   59,   61,   45,   91,
 /*    10 */    93,    5,   10,   77,   81,   83,   79,   85,   87,   89,
 /*    20 */    65,   67,   69,   71,   73,   75,   64,   63,   47,   31,
 /*    30 */    35,  431,   47,   31,   35,   51,   53,   55,   57,   59,
 /*    40 */    61,   45,   91,   93,   20,   22,   77,   81,   83,   79,
 /*    50 */    85,   87,   89,   65,   67,   69,   71,   73,   75,   64,
 /*    60 */    63,   47,   31,   35,  121,   50,  133,   51,   53,   55,
 /*    70 */    57,   59,   61,   45,   91,   93,  182,  122,   77,   81,
 /*    80 */    83,   79,   85,   87,   89,   65,   67,   69,   71,   73,
 /*    90 */    75,   64,   63,   47,   31,   35,  325,  253,  190,  324,
 /*   100 */   367,  299,  306,  445,   51,   53,   55,   57,   59,   61,
 /*   110 */    45,   91,   93,   11,   19,   77,   81,   83,   79,   85,
 /*   120 */    87,   89,   65,   67,   69,   71,   73,   75,   64,   63,
 /*   130 */    47,   31,   35,  450,   51,   53,   55,   57,   59,   61,
 /*   140 */    45,   91,   93,  125,  119,   77,   81,   83,   79,   85,
 /*   150 */    87,   89,   65,   67,   69,   71,   73,   75,   64,   63,
 /*   160 */    47,   31,   35,  133,   51,   53,   55,   57,   59,   61,
 /*   170 */    45,   91,   93,  368,    6,   77,   81,   83,   79,   85,
 /*   180 */    87,   89,   65,   67,   69,   71,   73,   75,   64,   63,
 /*   190 */    47,   31,   35,  135,   51,   53,   55,   57,   59,   61,
 /*   200 */    45,   91,   93,    8,  175,   77,   81,   83,   79,   85,
 /*   210 */    87,   89,   65,   67,   69,   71,   73,   75,   64,   63,
 /*   220 */    47,   31,   35,   51,   53,   55,   57,   59,   61,   45,
 /*   230 */    91,   93,  284,  283,   77,   81,   83,   79,   85,   87,
 /*   240 */    89,   65,   67,   69,   71,   73,   75,   64,   63,   47,
 /*   250 */    31,   35,  184,  186,   13,   16,  404,  307,  309,  137,
 /*   260 */    51,   53,   55,   57,   59,   61,   45,   91,   93,   19,
 /*   270 */    19,   77,   81,   83,   79,   85,   87,   89,   65,   67,
 /*   280 */    69,   71,   73,   75,   64,   63,   47,   31,   35,   18,
 /*   290 */    32,    9,  164,   51,   53,   55,   57,   59,   61,   45,
 /*   300 */    91,   93,  334,   12,   77,   81,   83,   79,   85,   87,
 /*   310 */    89,   65,   67,   69,   71,   73,   75,   64,   63,   47,
 /*   320 */    31,   35,   18,   28,   65,   67,   69,   71,   73,   75,
 /*   330 */    64,   63,   47,   31,   35,  146,   75,   64,   63,   47,
 /*   340 */    31,   35,   18,  427,  144,  142,   18,  184,  186,    8,
 /*   350 */   140,  138,  307,  309,  255,  216,  259,  262,    8,   24,
 /*   360 */    15,  110,   69,   71,   73,   75,   64,   63,   47,   31,
 /*   370 */    35,  199,  200,  224,  220,  225,  273,  235,  236,  238,
 /*   380 */   282,   27,  241,  245,  511,    1,   95,  312,  171,   34,
 /*   390 */   290,   36,   37,   38,   39,   40,   41,   42,   43,  116,
 /*   400 */    51,   53,   55,   57,   59,   61,   45,   91,   93,  291,
 /*   410 */   297,   77,   81,   83,   79,   85,   87,   89,   65,   67,
 /*   420 */    69,   71,   73,   75,   64,   63,   47,   31,   35,   18,
 /*   430 */    28,   27,    2,   27,  361,   27,   95,  279,   95,  111,
 /*   440 */    95,   30,  146,  201,  195,  280,  311,    4,  174,  360,
 /*   450 */   229,  144,  142,  188,   27,   27,   14,  140,  138,   95,
 /*   460 */    95,   17,  101,  268,   27,  193,   24,   17,  110,   95,
 /*   470 */   194,  181,  111,  266,  301,  150,  112,  127,  199,  200,
 /*   480 */   234,  220,  225,   27,  235,  236,  238,  303,   95,  241,
 /*   490 */   245,  217,  179,   21,  152,   97,   98,  117,   36,   37,
 /*   500 */    38,   39,   40,   41,   42,   43,  116,  411,  128,  112,
 /*   510 */   127,   51,   53,   55,   57,   59,   61,   45,   91,   93,
 /*   520 */   317,  283,   77,   81,   83,   79,   85,   87,   89,   65,
 /*   530 */    67,   69,   71,   73,   75,   64,   63,   47,   31,   35,
 /*   540 */   432,   33,    8,  365,   51,   53,   55,   57,   59,   61,
 /*   550 */    45,   91,   93,  343,    8,   77,   81,   83,   79,   85,
 /*   560 */    87,   89,   65,   67,   69,   71,   73,   75,   64,   63,
 /*   570 */    47,   31,   35,   18,   28,   27,  158,    3,    4,   23,
 /*   580 */    95,  166,   27,  101,  188,   25,  146,   95,  120,   27,
 /*   590 */    44,  343,  347,    8,   95,  144,  142,   46,    8,   27,
 /*   600 */    27,  140,  138,    8,   95,   95,   27,   52,   54,  169,
 /*   610 */    24,   95,  110,  419,  115,  148,   97,   98,  117,   26,
 /*   620 */   207,  276,  199,  200,  428,  220,  225,   27,  235,  236,
 /*   630 */   238,  348,   95,  241,  245,  252,  358,   29,   18,   28,
 /*   640 */   298,  359,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   650 */   116,  146,  114,  303,   27,  246,  376,  163,  204,   95,
 /*   660 */   144,  142,   56,  385,  206,  394,  140,  138,  285,   18,
 /*   670 */    19,  150,  112,  127,   27,   24,   27,  110,   27,   95,
 /*   680 */   313,   95,  221,   95,   49,    8,   58,  199,  200,  429,
 /*   690 */   220,  225,   27,  235,  236,  238,    8,   95,  241,  245,
 /*   700 */    60,  333,  325,   18,   28,  332,  265,   36,   37,   38,
 /*   710 */    39,   40,   41,   42,   43,  116,  146,   48,  395,  154,
 /*   720 */    19,  292,   27,  374,  300,  144,  142,   95,   27,   18,
 /*   730 */    62,  140,  138,   95,  375,   18,  101,  123,   27,   27,
 /*   740 */    24,  212,  110,   95,   95,  215,   66,   68,   96,  439,
 /*   750 */   124,   18,  199,  200,  420,  220,  225,  315,  235,  236,
 /*   760 */   238,  378,  319,  241,  245,   99,    6,  437,  103,   48,
 /*   770 */   328,  100,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   780 */   116,   51,   53,   55,   57,   59,   61,   45,   91,   93,
 /*   790 */   105,  384,   77,   81,   83,   79,   85,   87,   89,   65,
 /*   800 */    67,   69,   71,   73,   75,   64,   63,   47,   31,   35,
 /*   810 */    18,   28,   27,  247,  113,   18,  318,   95,  285,   27,
 /*   820 */    70,   27,  107,  146,   95,  448,   95,   72,  109,   74,
 /*   830 */   436,   19,  144,  142,  387,   27,   27,   27,  140,  138,
 /*   840 */    95,   95,   95,   76,   78,   80,   27,   24,  386,  110,
 /*   850 */   126,   95,  447,   27,   82,    8,  131,  129,   95,  199,
 /*   860 */   200,  101,  220,  225,   27,  235,  236,  238,  326,   95,
 /*   870 */   241,  245,  101,  149,  151,  153,   28,  160,  438,   36,
 /*   880 */    37,   38,   39,   40,   41,   42,   43,  116,  146,  155,
 /*   890 */   157,  165,  161,  159,   97,   98,  117,  144,  142,  102,
 /*   900 */   167,   27,  168,  140,  138,   48,   95,  104,  170,   84,
 /*   910 */   172,  176,   24,  178,  110,  173,  180,   77,   81,   83,
 /*   920 */    79,   85,   87,   89,   65,   67,   69,   71,   73,   75,
 /*   930 */    64,   63,   47,   31,   35,  130,  362,  189,  183,  185,
 /*   940 */   187,  191,  192,  108,   36,   37,   38,   39,   40,   41,
 /*   950 */    42,   43,  116,  118,  433,   28,   27,  438,   27,  198,
 /*   960 */   403,   95,  203,   95,  237,   27,  101,  146,  205,  405,
 /*   970 */    95,  208,  209,  101,  196,  214,  144,  142,  102,   27,
 /*   980 */   211,  213,  140,  138,   95,  197,  202,   86,  406,  210,
 /*   990 */   218,   24,   27,  110,  433,  219,  430,   95,  222,   48,
 /*  1000 */    88,  106,   27,  223,  407,  226,   48,   95,  156,  227,
 /*  1010 */    90,   27,  232,  233,  130,  408,   95,  409,  231,   92,
 /*  1020 */    28,  438,  108,   36,   37,   38,   39,   40,   41,   42,
 /*  1030 */    43,  116,  146,  410,  239,  240,  243,  249,   28,  244,
 /*  1040 */   250,  144,  142,  102,   27,  257,   27,  140,  138,   95,
 /*  1050 */   146,   95,   94,  258,  132,  260,   24,  261,  110,  144,
 /*  1060 */   142,  102,  272,   27,  264,  140,  138,   27,   95,  263,
 /*  1070 */   267,  134,   95,  269,   24,  136,  110,   27,   27,  130,
 /*  1080 */   287,  288,   95,   95,  270,  139,  141,  108,   36,   37,
 /*  1090 */    38,   39,   40,   41,   42,   43,  116,  130,  274,  275,
 /*  1100 */   277,  281,  366,   28,  438,  108,   36,   37,   38,   39,
 /*  1110 */    40,   41,   42,   43,  116,  146,  278,  286,   27,  294,
 /*  1120 */   295,  377,  293,   95,  144,  142,  143,  302,  379,  304,
 /*  1130 */   140,  138,  308,  177,  310,   27,  314,   27,  316,   24,
 /*  1140 */    95,  110,   95,  145,   27,  147,  320,  321,  323,   95,
 /*  1150 */   322,   27,  162,   27,  327,  329,   95,  330,   95,  228,
 /*  1160 */   331,  230,  130,  318,  318,  318,  318,  318,   28,  318,
 /*  1170 */   318,   36,   37,   38,   39,   40,   41,   42,   43,  116,
 /*  1180 */   146,  318,  318,  318,  318,  318,   28,  318,  449,  144,
 /*  1190 */   142,  102,  318,  318,  318,  140,  138,   27,  146,  318,
 /*  1200 */   318,  318,   95,  318,   24,  242,  110,  144,  142,  318,
 /*  1210 */   318,   27,  318,  140,  138,  318,   95,  318,   27,  248,
 /*  1220 */   318,  318,   24,   95,  110,  444,  254,  130,  318,  318,
 /*  1230 */   318,  318,  318,  318,  318,  108,   36,   37,   38,   39,
 /*  1240 */    40,   41,   42,   43,  116,  130,  318,  318,  318,  318,
 /*  1250 */   318,   28,  318,  449,   36,   37,   38,   39,   40,   41,
 /*  1260 */    42,   43,  116,  146,  318,  318,   27,  318,   18,   28,
 /*  1270 */   318,   95,  144,  142,  256,  318,  318,  318,  140,  138,
 /*  1280 */   318,  146,  318,  318,  318,  318,  318,   24,  271,  110,
 /*  1290 */   144,  142,  318,  318,  318,   27,  140,  138,  318,  318,
 /*  1300 */    95,   27,  318,  289,  318,   24,   95,  110,  318,  296,
 /*  1310 */   130,  318,  318,  318,  318,  318,  318,  318,  318,   36,
 /*  1320 */    37,   38,   39,   40,   41,   42,   43,  116,  130,  444,
 /*  1330 */   318,  318,  318,  318,  318,  318,  318,   36,   37,   38,
 /*  1340 */    39,   40,   41,   42,   43,  116,   93,  318,  318,   77,
 /*  1350 */    81,   83,   79,   85,   87,   89,   65,   67,   69,   71,
 /*  1360 */    73,   75,   64,   63,   47,   31,   35,   28,  318,  318,
 /*  1370 */   318,  318,   27,  318,  318,  318,  318,   95,  318,  146,
 /*  1380 */   305,  318,  318,  318,  318,   28,  318,  318,  144,  142,
 /*  1390 */   318,  318,  318,  318,  140,  138,  318,  146,  318,  318,
 /*  1400 */   318,  318,  318,   24,  318,  110,  144,  142,  318,  318,
 /*  1410 */   318,  318,  140,  138,  318,  318,  318,  318,  318,  318,
 /*  1420 */   318,   24,  318,  251,  318,  318,  130,  318,  318,  318,
 /*  1430 */   318,  318,  318,  318,  318,   36,   37,   38,   39,   40,
 /*  1440 */    41,   42,   43,  116,  130,  318,  318,  318,  318,  318,
 /*  1450 */   318,  318,  318,   36,   37,   38,   39,   40,   41,   42,
 /*  1460 */    43,  116,
};
static YYCODETYPE yy_lookahead[] = {
 /*     0 */     6,   92,    8,    9,   10,   11,   12,   13,   14,   15,
 /*    10 */    16,   43,  103,   19,   20,   21,   22,   23,   24,   25,
 /*    20 */    26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
 /*    30 */    36,    4,   34,   35,   36,    8,    9,   10,   11,   12,
 /*    40 */    13,   14,   15,   16,   48,   49,   19,   20,   21,   22,
 /*    50 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*    60 */    33,   34,   35,   36,   28,   71,    7,    8,    9,   10,
 /*    70 */    11,   12,   13,   14,   15,   16,    7,   41,   19,   20,
 /*    80 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*    90 */    31,   32,   33,   34,   35,   36,   92,   70,  109,   95,
 /*   100 */     4,  112,  113,   44,    8,    9,   10,   11,   12,   13,
 /*   110 */    14,   15,   16,   44,  110,   19,   20,   21,   22,   23,
 /*   120 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   130 */    34,   35,   36,    7,    8,    9,   10,   11,   12,   13,
 /*   140 */    14,   15,   16,  114,  115,   19,   20,   21,   22,   23,
 /*   150 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   160 */    34,   35,   36,    7,    8,    9,   10,   11,   12,   13,
 /*   170 */    14,   15,   16,    4,   41,   19,   20,   21,   22,   23,
 /*   180 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   190 */    34,   35,   36,    7,    8,    9,   10,   11,   12,   13,
 /*   200 */    14,   15,   16,    5,   35,   19,   20,   21,   22,   23,
 /*   210 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   220 */    34,   35,   36,    8,    9,   10,   11,   12,   13,   14,
 /*   230 */    15,   16,   98,   99,   19,   20,   21,   22,   23,   24,
 /*   240 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   250 */    35,   36,   45,   46,   95,   95,    4,   50,   51,   44,
 /*   260 */     8,    9,   10,   11,   12,   13,   14,   15,   16,  110,
 /*   270 */   110,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   280 */    28,   29,   30,   31,   32,   33,   34,   35,   36,    4,
 /*   290 */    41,   41,   43,    8,    9,   10,   11,   12,   13,   14,
 /*   300 */    15,   16,    0,  104,   19,   20,   21,   22,   23,   24,
 /*   310 */    25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
 /*   320 */    35,   36,    4,    5,   26,   27,   28,   29,   30,   31,
 /*   330 */    32,   33,   34,   35,   36,   17,   31,   32,   33,   34,
 /*   340 */    35,   36,    4,   55,   26,   27,    4,   45,   46,    5,
 /*   350 */    32,   33,   50,   51,   66,   67,   68,   69,    5,   41,
 /*   360 */   106,   43,   28,   29,   30,   31,   32,   33,   34,   35,
 /*   370 */    36,   53,   54,   55,   56,   57,   23,   59,   60,   61,
 /*   380 */    42,   92,   64,   65,   85,   86,   97,   88,   44,  100,
 /*   390 */    52,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*   400 */     8,    9,   10,   11,   12,   13,   14,   15,   16,  119,
 /*   410 */   120,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   420 */    28,   29,   30,   31,   32,   33,   34,   35,   36,    4,
 /*   430 */     5,   92,   87,   92,    4,   92,   97,  110,   97,  100,
 /*   440 */    97,  100,   17,  100,  117,  118,  101,  102,  107,    4,
 /*   450 */    58,   26,   27,  108,   92,   92,  105,   32,   33,   97,
 /*   460 */    97,  110,  100,  100,   92,  111,   41,  110,   43,   97,
 /*   470 */   116,   41,  100,  110,   28,  136,  137,  138,   53,   54,
 /*   480 */    55,   56,   57,   92,   59,   60,   61,   41,   97,   64,
 /*   490 */    65,  100,   47,   41,  132,  133,  134,  135,   73,   74,
 /*   500 */    75,   76,   77,   78,   79,   80,   81,    4,  136,  137,
 /*   510 */   138,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   520 */    98,   99,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   530 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*   540 */     4,    8,    5,    4,    8,    9,   10,   11,   12,   13,
 /*   550 */    14,   15,   16,    5,    5,   19,   20,   21,   22,   23,
 /*   560 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   570 */    34,   35,   36,    4,    5,   92,   43,  101,  102,   41,
 /*   580 */    97,   44,   92,  100,  108,   37,   17,   97,    7,   92,
 /*   590 */   100,   43,   43,    5,   97,   26,   27,  100,    5,   92,
 /*   600 */    92,   32,   33,    5,   97,   97,   92,  100,  100,   72,
 /*   610 */    41,   97,   43,   55,  100,  132,  133,  134,  135,   41,
 /*   620 */    62,   63,   53,   54,   55,   56,   57,   92,   59,   60,
 /*   630 */    61,   43,   97,   64,   65,  100,   43,   92,    4,    5,
 /*   640 */    28,   43,   73,   74,   75,   76,   77,   78,   79,   80,
 /*   650 */    81,   17,  138,   41,   92,   95,   44,  139,  124,   97,
 /*   660 */    26,   27,  100,   82,  130,    4,   32,   33,    7,    4,
 /*   670 */   110,  136,  137,  138,   92,   41,   92,   43,   92,   97,
 /*   680 */    89,   97,  100,   97,  100,    5,  100,   53,   54,   55,
 /*   690 */    56,   57,   92,   59,   60,   61,    5,   97,   64,   65,
 /*   700 */   100,  110,   92,    4,    5,   95,   41,   73,   74,   75,
 /*   710 */    76,   77,   78,   79,   80,   81,   17,  133,    4,  135,
 /*   720 */   110,    7,   92,   43,    7,   26,   27,   97,   92,    4,
 /*   730 */   100,   32,   33,   97,   43,    4,  100,   28,   92,   92,
 /*   740 */    41,  127,   43,   97,   97,  131,  100,  100,   43,    7,
 /*   750 */    41,    4,   53,   54,   55,   56,   57,   91,   59,   60,
 /*   760 */    61,   44,   96,   64,   65,    7,   41,    7,   34,  133,
 /*   770 */    39,  135,   73,   74,   75,   76,   77,   78,   79,   80,
 /*   780 */    81,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   790 */     6,   82,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   800 */    27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
 /*   810 */     4,    5,   92,   66,    7,    4,   95,   97,    7,   92,
 /*   820 */   100,   92,   71,   17,   97,    7,   97,  100,   41,  100,
 /*   830 */     7,  110,   26,   27,   82,   92,   92,   92,   32,   33,
 /*   840 */    97,   97,   97,  100,  100,  100,   92,   41,   82,   43,
 /*   850 */    82,   97,    7,   92,  100,    5,   43,   83,   97,   53,
 /*   860 */    54,  100,   56,   57,   92,   59,   60,   61,   18,   97,
 /*   870 */    64,   65,  100,   83,   44,   44,    5,   44,    7,   73,
 /*   880 */    74,   75,   76,   77,   78,   79,   80,   81,   17,    6,
 /*   890 */    71,   92,    8,  132,  133,  134,  135,   26,   27,   28,
 /*   900 */    41,   92,  139,   32,   33,  133,   97,  135,   92,  100,
 /*   910 */    41,   41,   41,   41,   43,  139,   35,   19,   20,   21,
 /*   920 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   930 */    32,   33,   34,   35,   36,   64,    4,   43,   92,   92,
 /*   940 */    92,   44,  110,   72,   73,   74,   75,   76,   77,   78,
 /*   950 */    79,   80,   81,   82,   83,    5,   92,    7,   92,  110,
 /*   960 */     4,   97,  123,   97,  100,   92,  100,   17,   55,    4,
 /*   970 */    97,  110,  117,  100,  110,   55,   26,   27,   28,   92,
 /*   980 */   126,  128,   32,   33,   97,  121,  122,  100,    4,  125,
 /*   990 */   110,   41,   92,   43,   44,  117,    4,   97,  110,  133,
 /*  1000 */   100,  135,   92,  117,    4,   41,  133,   97,  135,    8,
 /*  1010 */   100,   92,  110,  117,   64,    4,   97,    4,  129,  100,
 /*  1020 */     5,    6,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1030 */    80,   81,   17,    4,  110,  117,  110,  110,    5,  117,
 /*  1040 */   117,   26,   27,   28,   92,  110,   92,   32,   33,   97,
 /*  1050 */    17,   97,  100,  117,  100,  110,   41,  117,   43,   26,
 /*  1060 */    27,   28,   92,   92,  117,   32,   33,   92,   97,  110,
 /*  1070 */   117,  100,   97,  110,   41,  100,   43,   92,   92,   64,
 /*  1080 */    41,    8,   97,   97,  117,  100,  100,   72,   73,   74,
 /*  1090 */    75,   76,   77,   78,   79,   80,   81,   64,  110,  117,
 /*  1100 */   110,  110,    4,    5,   71,   72,   73,   74,   75,   76,
 /*  1110 */    77,   78,   79,   80,   81,   17,  117,   99,   92,   41,
 /*  1120 */     8,   44,  120,   97,   26,   27,  100,  113,   44,    8,
 /*  1130 */    32,   33,   92,   35,   92,   92,   90,   92,   42,   41,
 /*  1140 */    97,   43,   97,  100,   92,  100,   40,   92,   94,   97,
 /*  1150 */    93,   92,  100,   92,   41,   92,   97,   93,   97,  100,
 /*  1160 */    94,  100,   64,  140,  140,  140,  140,  140,    5,  140,
 /*  1170 */   140,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  1180 */    17,  140,  140,  140,  140,  140,    5,  140,    7,   26,
 /*  1190 */    27,   28,  140,  140,  140,   32,   33,   92,   17,  140,
 /*  1200 */   140,  140,   97,  140,   41,  100,   43,   26,   27,  140,
 /*  1210 */   140,   92,  140,   32,   33,  140,   97,  140,   92,  100,
 /*  1220 */   140,  140,   41,   97,   43,   44,  100,   64,  140,  140,
 /*  1230 */   140,  140,  140,  140,  140,   72,   73,   74,   75,   76,
 /*  1240 */    77,   78,   79,   80,   81,   64,  140,  140,  140,  140,
 /*  1250 */   140,    5,  140,    7,   73,   74,   75,   76,   77,   78,
 /*  1260 */    79,   80,   81,   17,  140,  140,   92,  140,    4,    5,
 /*  1270 */   140,   97,   26,   27,  100,  140,  140,  140,   32,   33,
 /*  1280 */   140,   17,  140,  140,  140,  140,  140,   41,   24,   43,
 /*  1290 */    26,   27,  140,  140,  140,   92,   32,   33,  140,  140,
 /*  1300 */    97,   92,  140,  100,  140,   41,   97,   43,  140,  100,
 /*  1310 */    64,  140,  140,  140,  140,  140,  140,  140,  140,   73,
 /*  1320 */    74,   75,   76,   77,   78,   79,   80,   81,   64,   83,
 /*  1330 */   140,  140,  140,  140,  140,  140,  140,   73,   74,   75,
 /*  1340 */    76,   77,   78,   79,   80,   81,   16,  140,  140,   19,
 /*  1350 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  1360 */    30,   31,   32,   33,   34,   35,   36,    5,  140,  140,
 /*  1370 */   140,  140,   92,  140,  140,  140,  140,   97,  140,   17,
 /*  1380 */   100,  140,  140,  140,  140,    5,  140,  140,   26,   27,
 /*  1390 */   140,  140,  140,  140,   32,   33,  140,   17,  140,  140,
 /*  1400 */   140,  140,  140,   41,  140,   43,   26,   27,  140,  140,
 /*  1410 */   140,  140,   32,   33,  140,  140,  140,  140,  140,  140,
 /*  1420 */   140,   41,  140,   43,  140,  140,   64,  140,  140,  140,
 /*  1430 */   140,  140,  140,  140,  140,   73,   74,   75,   76,   77,
 /*  1440 */    78,   79,   80,   81,   64,  140,  140,  140,  140,  140,
 /*  1450 */   140,  140,  140,   73,   74,   75,   76,   77,   78,   79,
 /*  1460 */    80,   81,
};
#define YY_SHIFT_USE_DFLT (-33)
static short yy_shift_ofst[] = {
 /*     0 */   -33,  207,  302,  -33,  -32,  133,  -33,  198,  250,  -33,
 /*    10 */    69,  445,  342,  342,   -4,  342,  342,  -33,  -33,  -33,
 /*    20 */   452,  539,  538, 1098,  548,  578,  -33,  549,  133,  588,
 /*    30 */    96,  249,  533, 1362,  773, 1362,  -33,  -33,  -33,  -33,
 /*    40 */   -33,  -33,  -33,  -33,  -33, 1362,  773, 1015,  -33,   -6,
 /*    50 */   -33, 1362,  773, 1362,  773, 1362,  773, 1362,  773, 1362,
 /*    60 */   773, 1362,  773,  -33,  -33, 1362,  334, 1362,  334, 1362,
 /*    70 */   305, 1362,  305, 1362,  305, 1362,  305, 1362,  298, 1362,
 /*    80 */   298, 1362,  298, 1362,  298, 1362,  298, 1362,  298, 1362,
 /*    90 */   298, 1362, 1330, 1362,  898,  705,  950,  742,  758, 1163,
 /*   100 */   760,  773,  734, 1015,  784, 1033,  751,  -33,  787,  -33,
 /*   110 */  1181,  126,  807, 1362,  818,  773,  871,  823,  709,  581,
 /*   120 */    36,  752,  -33,  766,  -33,  768, 1246,  845,  774,  -33,
 /*   130 */   813, 1362,  156, 1362,  186, 1362,  215,  -33, 1362,   -2,
 /*   140 */  1362,   -2, 1362,   -2, 1362,   -2, 1362,  898,  790,  -33,
 /*   150 */   830,  -33,  831,  -33,  883, 1033,  819,  -33,  950,  833,
 /*   160 */   884, 1362,  773,  -33,  133,  537,  859,  533,  -33,  133,
 /*   170 */   344,  869,  533,  -33,  169,  870,  -33,  872,  -33,  881,
 /*   180 */   430,  932,  133,  198,  133,  593,  133,  598,  894,  612,
 /*   190 */   897,  342,  -33,  -33,  338,  806,  -33,  342,  -33,  956,
 /*   200 */  1362,  252,  -33,  558,  913,  965,  -33,  665,  -33,  806,
 /*   210 */   -33,  288,  920,  984,  992,  -33, 1362,  285,  -33,  806,
 /*   220 */  1362,  285,  -33,  318, 1000,  964, 1001, 1362,  392, 1362,
 /*   230 */    27,  342,  -33,  425, 1011, 1013, 1029,  503,  342,  -33,
 /*   240 */   806, 1380,  285,  -33,  806,  342,  747, 1362,  285,  -33,
 /*   250 */   806, 1181,   59, 1362,  536, 1362,  285,  -33,  806,  342,
 /*   260 */   -33,  569,  342,  -33,  634, 1264,  -33,  806,  285,  -33,
 /*   270 */   806,  133,  353,  342,  -33,  806,  342,  -33,  699,  -33,
 /*   280 */   342,  -33, 1039,  -33,  661, 1039,  -33, 1073, 1362,  773,
 /*   290 */  1078,  714, 1078,  -33, 1112, 1362,  773,  -33, 1077,  717,
 /*   300 */   446, 1084,  -33, 1121, 1362,  773,  -33,  133,  680,  133,
 /*   310 */   691,  -33,  731,  -33, 1106, 1096, 1039,  811,  342,  -33,
 /*   320 */   133,  850,  -33,  725,  342,  198, 1113,  -33,  133,  850,
 /*   330 */   -33,  725,  342,  -33,
};
#define YY_REDUCE_USE_DFLT (-92)
static short yy_reduce_ofst[] = {
 /*     0 */   299,  345,  476,  -92,  -92,  -91,  -92,  -92,  -92,  -92,
 /*    10 */   -92,  199,  159,  351,  254,  160,  357,  -92,  -92,  -92,
 /*    20 */   -92,  -92,  -92,  341,  -92,  -92,  -92,  -92,  545,  -92,
 /*    30 */   -92,  -92,  518,  289,  -92,  490,  -92,  -92,  -92,  -92,
 /*    40 */   -92,  -92,  -92,  -92,  -92,  497,  -92,  584,  -92,  -92,
 /*    50 */   -92,  507,  -92,  508,  -92,  562,  -92,  586,  -92,  600,
 /*    60 */   -92,  630,  -92,  -92,  -92,  646,  -92,  647,  -92,  720,
 /*    70 */   -92,  727,  -92,  729,  -92,  743,  -92,  744,  -92,  745,
 /*    80 */   -92,  754,  -92,  809,  -92,  887,  -92,  900,  -92,  910,
 /*    90 */   -92,  919,  -92,  952,  -92,  -92,  362,  -92,  -92,  636,
 /*   100 */   -92,  -92,  -92,  772,  -92,  866,  -92,  -92,  -92,  -92,
 /*   110 */   339,  -92,  -92,  514,  -92,  -92,  483,  -92,   29,  -92,
 /*   120 */   -92,  -92,  -92,  -92,  -92,  -92,  372,  -92,  -92,  -92,
 /*   130 */   -92,  954,  -92,  971,  -92,  975,  -92,  -92,  985,  -92,
 /*   140 */   986,  -92, 1026,  -92, 1043,  -92, 1045,  -92,  -92,  -92,
 /*   150 */   -92,  -92,  -92,  -92,  -92,  873,  -92,  -92,  761,  -92,
 /*   160 */   -92, 1052,  -92,  -92,  799,  -92,  -92,  763,  -92,  816,
 /*   170 */   -92,  -92,  776,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
 /*   180 */   -92,  -92,  846,  -92,  847,  -92,  848,  -92,  -92,  -11,
 /*   190 */   -92,  832,  354,  -92,  327,  864,  -92,  849,  -92,  -92,
 /*   200 */   343,  -92,  839,  534,  -92,  -92,  -92,  861,  855,  864,
 /*   210 */   854,  614,  853,  -92,  -92,  -92,  391,  880,  878,  864,
 /*   220 */   582,  888,  886,  864,  -92,  -92,  -92, 1059,  -92, 1061,
 /*   230 */   889,  902,  896,  864,  -92,  -92,  -92,  -92,  924,  918,
 /*   240 */   864, 1105,  926,  922,  864,  560,  357, 1119,  927,  923,
 /*   250 */   864,  535,  -92, 1126,  -92, 1174,  935,  936,  864,  945,
 /*   260 */   940,  864,  959,  947,  864,  363,  953,  864,  963,  967,
 /*   270 */   864,  970,  -92,  988,  982,  864,  990,  999,  864,  -92,
 /*   280 */   991,  -92,  134,  -92,  -92, 1018,  -92,  -92, 1203,  -92,
 /*   290 */   290,  -92, 1002,  -92,  -92, 1209,  -92,  -92,  -92,  -92,
 /*   300 */  1014,  -92,  -92,  -92, 1280,  -92,  -92, 1040,  -92, 1042,
 /*   310 */   -92,  -92,  591, 1046,  666,  -92,  422,  721,  357,  -92,
 /*   320 */  1055, 1057, 1054,    4,  357,  -92,  -92,  -92, 1063, 1064,
 /*   330 */  1066,  610,  357,  -92,
};
static YYACTIONTYPE yy_default[] = {
 /*     0 */   457,  510,  510,  356,  510,  510,  343,  371,  510,  344,
 /*    10 */   510,  510,  510,  363,  357,  510,  364,  456,  459,  455,
 /*    20 */   510,  510,  510,  510,  468,  510,  469,  510,  510,  510,
 /*    30 */   510,  510,  451,  510,  452,  510,  460,  461,  462,  463,
 /*    40 */   464,  465,  466,  467,  474,  510,  475,  510,  439,  510,
 /*    50 */   480,  510,  482,  510,  483,  510,  484,  510,  485,  510,
 /*    60 */   486,  510,  487,  490,  491,  510,  492,  510,  493,  510,
 /*    70 */   494,  510,  495,  510,  496,  510,  497,  510,  500,  510,
 /*    80 */   501,  510,  502,  510,  503,  510,  504,  510,  505,  510,
 /*    90 */   506,  510,  507,  510,  508,  510,  510,  434,  510,  438,
 /*   100 */   435,  440,  441,  510,  510,  510,  510,  442,  510,  443,
 /*   110 */   510,  445,  510,  449,  446,  450,  510,  510,  510,  510,
 /*   120 */   510,  510,  389,  510,  388,  510,  510,  510,  510,  477,
 /*   130 */   510,  510,  510,  510,  510,  510,  510,  478,  510,  488,
 /*   140 */   510,  489,  510,  498,  510,  499,  510,  509,  510,  479,
 /*   150 */   510,  476,  510,  473,  510,  510,  510,  481,  510,  510,
 /*   160 */   453,  510,  454,  470,  510,  510,  510,  451,  471,  510,
 /*   170 */   510,  510,  451,  472,  510,  510,  370,  510,  369,  510,
 /*   180 */   510,  510,  510,  372,  510,  510,  510,  510,  510,  510,
 /*   190 */   510,  510,  391,  373,  400,  390,  401,  510,  402,  510,
 /*   200 */   510,  510,  413,  510,  510,  510,  414,  510,  400,  415,
 /*   210 */   423,  510,  510,  510,  510,  424,  510,  510,  400,  425,
 /*   220 */   510,  510,  400,  510,  510,  510,  510,  510,  510,  510,
 /*   230 */   510,  510,  400,  510,  510,  510,  510,  510,  510,  400,
 /*   240 */   412,  510,  510,  400,  421,  510,  510,  510,  510,  400,
 /*   250 */   422,  510,  510,  510,  510,  510,  510,  400,  426,  510,
 /*   260 */   400,  510,  510,  400,  510,  510,  400,  416,  510,  400,
 /*   270 */   417,  510,  510,  510,  400,  418,  510,  400,  510,  392,
 /*   280 */   510,  393,  510,  351,  510,  510,  352,  353,  510,  354,
 /*   290 */   510,  510,  510,  397,  398,  510,  399,  396,  510,  510,
 /*   300 */   510,  510,  381,  382,  510,  383,  380,  510,  510,  510,
 /*   310 */   510,  355,  336,  338,  349,  335,  510,  510,  350,  339,
 /*   320 */   510,  341,  345,  510,  340,  346,  510,  342,  510,  341,
 /*   330 */   345,  510,  337,  458,
};
#define YY_SZ_ACTTAB (sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammer, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  int stateno;       /* The state-number */
  int major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
  YYMINORTYPE minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static const char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, const char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  ParseTrace(TraceFILE, (const char*) zTracePrompt);
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *yyTokenName[] = { 
  "$",             "LOWPRECEDENCE",  "UNEXPECTEDCHAR",  "INVALIDENCODING",
  "NL",            "DOT",           "DOTDOT",        "COMMA",       
  "ASSIGN",        "ADDASS",        "SUBASS",        "MULASS",      
  "DIVASS",        "MODASS",        "COLCOLASS",     "OR",          
  "AND",           "NOT",           "EQ",            "EQEQ",        
  "GTEQ",          "LTEQ",          "EXEQ",          "GT",          
  "LT",            "DOLLAR",        "PLUS",          "MINUS",       
  "STAR",          "SLASH",         "MODULO",        "DBSTAR",      
  "DBPLUS",        "DBMINUS",       "LBRACKET",      "COLON",       
  "COLCOL",        "ARROW",         "HIGHPRECEDENCE",  "NAMESPACE",   
  "USING",         "SYMBOL",        "STATIC",        "LPAR",        
  "RPAR",          "CLASS",         "STCLASS",       "NEW",         
  "ATTRIB",        "METHOD",        "FUNCTION",      "STFUNCTION",  
  "LOCAL",         "QUIT",          "RETURN",        "END",         
  "WHILE",         "FOR",           "TO",            "LOOP",        
  "EXIT",          "BEGSEQ",        "RECOVER",       "FINALLY",     
  "IF",            "DOCASE",        "CASE",          "ELSEIF",      
  "ELSE",          "OTHERWISE",     "STEP",          "RBRACKET",    
  "AT",            "NUMBER",        "STRING",        "NLSTEXT",     
  "BINARYX",       "BINARYA",       "TRUE",          "FALSE",       
  "NIL",           "LBRACE",        "PIPE",          "RBRACE",      
  "error",         "prg",           "header",        "lfunction",   
  "lnewline0",     "namespace",     "lusing",        "lstatdefin",  
  "dotsymbol",     "nsalias",       "ldotsymbol",    "lnewline",    
  "using",         "ddotsymbol",    "statdefin",     "statdef",     
  "expr",          "function",      "classid",       "ldsym",       
  "newspec",       "lslot",         "slot",          "forw",        
  "funcid",        "argument",      "newline",       "body",        
  "larg",          "arg",           "bargument",     "lbarg",       
  "llocdefin",     "lstatement",    "locdline",      "locdefin",    
  "locdef",        "statement",     "begseq",        "lrecov",      
  "finally",       "if",            "lelseif",       "else",        
  "endif",         "forstep",       "recov",         "elseif",      
  "lfuncpar",      "parexpr",       "lfuncpar0",     "parexpr0",    
  "lexpr",         "lexpr0",        "expr0",         "msgpar",      
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *yyRuleName[] = {
 /*   0 */ "prg ::= header lfunction",
 /*   1 */ "header ::= lnewline0 namespace lusing lstatdefin",
 /*   2 */ "namespace ::=",
 /*   3 */ "namespace ::= NAMESPACE dotsymbol nsalias ldotsymbol lnewline",
 /*   4 */ "lusing ::=",
 /*   5 */ "lusing ::= lusing using",
 /*   6 */ "using ::= USING dotsymbol nsalias ldotsymbol lnewline",
 /*   7 */ "nsalias ::=",
 /*   8 */ "nsalias ::= EQ SYMBOL",
 /*   9 */ "dotsymbol ::= SYMBOL",
 /*  10 */ "dotsymbol ::= dotsymbol DOT SYMBOL",
 /*  11 */ "ldotsymbol ::=",
 /*  12 */ "ldotsymbol ::= ldotsymbol dotsymbol",
 /*  13 */ "ddotsymbol ::= dotsymbol",
 /*  14 */ "ddotsymbol ::= DOT dotsymbol",
 /*  15 */ "lstatdefin ::=",
 /*  16 */ "lstatdefin ::= lstatdefin STATIC statdefin lnewline",
 /*  17 */ "statdefin ::= statdef",
 /*  18 */ "statdefin ::= statdefin COMMA statdef",
 /*  19 */ "statdef ::= SYMBOL",
 /*  20 */ "statdef ::= SYMBOL ASSIGN expr",
 /*  21 */ "lfunction ::= function",
 /*  22 */ "lfunction ::= lfunction function",
 /*  23 */ "function ::= classid LPAR ldsym RPAR newspec lnewline lslot",
 /*  24 */ "classid ::= CLASS dotsymbol",
 /*  25 */ "classid ::= STCLASS dotsymbol",
 /*  26 */ "newspec ::=",
 /*  27 */ "newspec ::= NEW COLON",
 /*  28 */ "newspec ::= NEW COLON SYMBOL",
 /*  29 */ "lslot ::=",
 /*  30 */ "lslot ::= lslot slot lnewline",
 /*  31 */ "slot ::= ATTRIB SYMBOL",
 /*  32 */ "slot ::= METHOD SYMBOL",
 /*  33 */ "slot ::= METHOD SYMBOL expr",
 /*  34 */ "slot ::= METHOD SYMBOL forw",
 /*  35 */ "forw ::= COLON SYMBOL",
 /*  36 */ "forw ::= forw COLON SYMBOL",
 /*  37 */ "ldsym ::= dotsymbol",
 /*  38 */ "ldsym ::= ldsym COMMA dotsymbol",
 /*  39 */ "function ::= funcid LPAR argument RPAR newline body",
 /*  40 */ "funcid ::= FUNCTION dotsymbol",
 /*  41 */ "funcid ::= STFUNCTION dotsymbol",
 /*  42 */ "argument ::=",
 /*  43 */ "argument ::= STAR",
 /*  44 */ "argument ::= larg",
 /*  45 */ "argument ::= larg COMMA STAR",
 /*  46 */ "larg ::= arg",
 /*  47 */ "larg ::= larg COMMA arg",
 /*  48 */ "arg ::= SYMBOL",
 /*  49 */ "arg ::= SYMBOL ASSIGN expr",
 /*  50 */ "bargument ::=",
 /*  51 */ "bargument ::= lbarg",
 /*  52 */ "bargument ::= STAR",
 /*  53 */ "bargument ::= lbarg COMMA STAR",
 /*  54 */ "lbarg ::= SYMBOL",
 /*  55 */ "lbarg ::= lbarg COMMA SYMBOL",
 /*  56 */ "body ::= llocdefin lstatement",
 /*  57 */ "llocdefin ::=",
 /*  58 */ "llocdefin ::= llocdefin newline",
 /*  59 */ "llocdefin ::= llocdefin locdline newline",
 /*  60 */ "locdline ::= STATIC statdefin",
 /*  61 */ "locdline ::= LOCAL locdefin",
 /*  62 */ "locdefin ::= locdef",
 /*  63 */ "locdefin ::= locdefin COMMA locdef",
 /*  64 */ "locdef ::= SYMBOL",
 /*  65 */ "locdef ::= SYMBOL ASSIGN expr",
 /*  66 */ "lstatement ::=",
 /*  67 */ "lstatement ::= lstatement newline",
 /*  68 */ "lstatement ::= lstatement statement newline",
 /*  69 */ "statement ::= QUIT",
 /*  70 */ "statement ::= RETURN expr",
 /*  71 */ "statement ::= begseq lrecov finally END",
 /*  72 */ "statement ::= if lelseif else endif",
 /*  73 */ "statement ::= WHILE expr newline lstatement END",
 /*  74 */ "statement ::= FOR SYMBOL ASSIGN expr TO expr forstep newline lstatement END",
 /*  75 */ "statement ::= LOOP",
 /*  76 */ "statement ::= EXIT",
 /*  77 */ "statement ::= expr",
 /*  78 */ "begseq ::= BEGSEQ newline lstatement",
 /*  79 */ "lrecov ::=",
 /*  80 */ "lrecov ::= lrecov recov",
 /*  81 */ "recov ::= RECOVER newline lstatement",
 /*  82 */ "recov ::= RECOVER SYMBOL newline lstatement",
 /*  83 */ "recov ::= RECOVER SYMBOL expr newline lstatement",
 /*  84 */ "recov ::= RECOVER SYMBOL LT dotsymbol GT newline lstatement",
 /*  85 */ "finally ::=",
 /*  86 */ "finally ::= FINALLY newline lstatement",
 /*  87 */ "if ::= IF expr newline lstatement",
 /*  88 */ "if ::= DOCASE lnewline CASE expr newline lstatement",
 /*  89 */ "lelseif ::=",
 /*  90 */ "lelseif ::= lelseif elseif",
 /*  91 */ "elseif ::= ELSEIF expr newline lstatement",
 /*  92 */ "elseif ::= CASE expr newline lstatement",
 /*  93 */ "else ::=",
 /*  94 */ "else ::= ELSE newline lstatement",
 /*  95 */ "else ::= OTHERWISE newline lstatement",
 /*  96 */ "endif ::= END",
 /*  97 */ "forstep ::=",
 /*  98 */ "forstep ::= STEP expr",
 /*  99 */ "lfuncpar ::=",
 /* 100 */ "lfuncpar ::= parexpr",
 /* 101 */ "lfuncpar ::= lfuncpar0 COMMA parexpr0",
 /* 102 */ "lfuncpar0 ::= parexpr0",
 /* 103 */ "lfuncpar0 ::= lfuncpar0 COMMA parexpr0",
 /* 104 */ "parexpr0 ::=",
 /* 105 */ "parexpr0 ::= parexpr",
 /* 106 */ "parexpr ::= expr",
 /* 107 */ "parexpr ::= STAR",
 /* 108 */ "parexpr ::= STAR LBRACKET parexpr0 DOTDOT parexpr0 RBRACKET",
 /* 109 */ "parexpr ::= AT SYMBOL",
 /* 110 */ "lexpr ::=",
 /* 111 */ "lexpr ::= expr",
 /* 112 */ "lexpr ::= lexpr0 COMMA expr0",
 /* 113 */ "lexpr0 ::= expr0",
 /* 114 */ "lexpr0 ::= lexpr0 COMMA expr0",
 /* 115 */ "expr0 ::=",
 /* 116 */ "expr0 ::= expr",
 /* 117 */ "msgpar ::=",
 /* 118 */ "msgpar ::= ASSIGN expr",
 /* 119 */ "msgpar ::= LPAR lfuncpar RPAR",
 /* 120 */ "msgpar ::= LPAR lfuncpar RPAR ASSIGN expr",
 /* 121 */ "lnewline ::= newline",
 /* 122 */ "lnewline ::= lnewline newline",
 /* 123 */ "lnewline0 ::=",
 /* 124 */ "lnewline0 ::= lnewline0 newline",
 /* 125 */ "newline ::= NL",
 /* 126 */ "expr ::= NUMBER",
 /* 127 */ "expr ::= STRING",
 /* 128 */ "expr ::= NLSTEXT",
 /* 129 */ "expr ::= BINARYX",
 /* 130 */ "expr ::= BINARYA",
 /* 131 */ "expr ::= TRUE",
 /* 132 */ "expr ::= FALSE",
 /* 133 */ "expr ::= NIL",
 /* 134 */ "expr ::= SYMBOL",
 /* 135 */ "expr ::= SYMBOL ARROW SYMBOL",
 /* 136 */ "expr ::= expr COLON SYMBOL msgpar",
 /* 137 */ "expr ::= expr COLON LPAR dotsymbol RPAR SYMBOL msgpar",
 /* 138 */ "expr ::= expr COLON LPAR dotsymbol AT dotsymbol RPAR SYMBOL msgpar",
 /* 139 */ "expr ::= ddotsymbol LPAR lfuncpar RPAR",
 /* 140 */ "expr ::= expr COLCOL expr",
 /* 141 */ "expr ::= expr COLCOLASS expr",
 /* 142 */ "expr ::= LPAR lexpr RPAR",
 /* 143 */ "expr ::= LBRACE PIPE bargument PIPE lexpr RBRACE",
 /* 144 */ "expr ::= IF LPAR expr COMMA expr COMMA expr RPAR",
 /* 145 */ "expr ::= LBRACE lfuncpar RBRACE",
 /* 146 */ "expr ::= expr LBRACKET expr RBRACKET",
 /* 147 */ "expr ::= expr LBRACKET parexpr0 DOTDOT parexpr0 RBRACKET",
 /* 148 */ "expr ::= expr ASSIGN expr",
 /* 149 */ "expr ::= expr ADDASS expr",
 /* 150 */ "expr ::= expr SUBASS expr",
 /* 151 */ "expr ::= expr MULASS expr",
 /* 152 */ "expr ::= expr DIVASS expr",
 /* 153 */ "expr ::= expr MODASS expr",
 /* 154 */ "expr ::= DBMINUS expr",
 /* 155 */ "expr ::= DBPLUS expr",
 /* 156 */ "expr ::= expr DBMINUS",
 /* 157 */ "expr ::= expr DBPLUS",
 /* 158 */ "expr ::= expr PLUS expr",
 /* 159 */ "expr ::= expr MINUS expr",
 /* 160 */ "expr ::= expr STAR expr",
 /* 161 */ "expr ::= expr SLASH expr",
 /* 162 */ "expr ::= expr MODULO expr",
 /* 163 */ "expr ::= expr DBSTAR expr",
 /* 164 */ "expr ::= MINUS expr",
 /* 165 */ "expr ::= PLUS expr",
 /* 166 */ "expr ::= expr EQEQ expr",
 /* 167 */ "expr ::= expr EXEQ expr",
 /* 168 */ "expr ::= expr GTEQ expr",
 /* 169 */ "expr ::= expr LTEQ expr",
 /* 170 */ "expr ::= expr GT expr",
 /* 171 */ "expr ::= expr LT expr",
 /* 172 */ "expr ::= expr DOLLAR expr",
 /* 173 */ "expr ::= expr OR expr",
 /* 174 */ "expr ::= expr AND expr",
 /* 175 */ "expr ::= NOT expr",
};
#endif /* NDEBUG */

/*
** This function returns the symbolic name associated with a token
** value.
*/
const char *ParseTokenName(int tokenType){
#ifndef NDEBUG
  if( tokenType>0 && tokenType<(int)(sizeof(yyTokenName)/sizeof(yyTokenName[0])) ){
    return yyTokenName[tokenType];
  }else{
    return "Unknown";
  }
#else
  return "";
#endif
}

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(YYCODETYPE yymajor, YYMINORTYPE *yypminor){
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
#line 218 "./parser.lem"
{delete (yypminor->yy0);}
#line 1137 "./parser.c"
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor( yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
  (*freeProc)((void*)pParser);
}

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  int iLookAhead            /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  /* if( pParser->yyidx<0 ) return YY_NO_ACTION;  */
  i = yy_shift_ofst[stateno];
  if( i==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  if( iLookAhead==YYNOCODE ){
    return YY_NO_ACTION;
  }
  i += iLookAhead;
  if( i<0 || i>=(int)YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
    int iFallback;            /* Fallback token */
    if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
           && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
           yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
      }
#endif
      return yy_find_shift_action(pParser, iFallback);
    }
#endif
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  yyParser *pParser,        /* The parser */
  int iLookAhead            /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  i = yy_reduce_ofst[stateno];
  if( i==YY_REDUCE_USE_DFLT ){
    return yy_default[stateno];
  }
  if( iLookAhead==YYNOCODE ){
    return YY_NO_ACTION;
  }
  i += iLookAhead;
  if( i<0 || i>=(int)YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer ot the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
  if( yypParser->yyidx>=YYSTACKDEPTH ){
     ParseARG_FETCH;
     yypParser->yyidx--;
#ifndef NDEBUG
     if( yyTraceFILE ){
       fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
     }
#endif
     while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
     /* Here code is inserted which will execute if the parser
     ** stack every overflows */
     ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
     return;
  }
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = yyNewState;
  yytos->major = yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 85, 2 },
  { 86, 4 },
  { 89, 0 },
  { 89, 5 },
  { 90, 0 },
  { 90, 2 },
  { 96, 5 },
  { 93, 0 },
  { 93, 2 },
  { 92, 1 },
  { 92, 3 },
  { 94, 0 },
  { 94, 2 },
  { 97, 1 },
  { 97, 2 },
  { 91, 0 },
  { 91, 4 },
  { 98, 1 },
  { 98, 3 },
  { 99, 1 },
  { 99, 3 },
  { 87, 1 },
  { 87, 2 },
  { 101, 7 },
  { 102, 2 },
  { 102, 2 },
  { 104, 0 },
  { 104, 2 },
  { 104, 3 },
  { 105, 0 },
  { 105, 3 },
  { 106, 2 },
  { 106, 2 },
  { 106, 3 },
  { 106, 3 },
  { 107, 2 },
  { 107, 3 },
  { 103, 1 },
  { 103, 3 },
  { 101, 6 },
  { 108, 2 },
  { 108, 2 },
  { 109, 0 },
  { 109, 1 },
  { 109, 1 },
  { 109, 3 },
  { 112, 1 },
  { 112, 3 },
  { 113, 1 },
  { 113, 3 },
  { 114, 0 },
  { 114, 1 },
  { 114, 1 },
  { 114, 3 },
  { 115, 1 },
  { 115, 3 },
  { 111, 2 },
  { 116, 0 },
  { 116, 2 },
  { 116, 3 },
  { 118, 2 },
  { 118, 2 },
  { 119, 1 },
  { 119, 3 },
  { 120, 1 },
  { 120, 3 },
  { 117, 0 },
  { 117, 2 },
  { 117, 3 },
  { 121, 1 },
  { 121, 2 },
  { 121, 4 },
  { 121, 4 },
  { 121, 5 },
  { 121, 10 },
  { 121, 1 },
  { 121, 1 },
  { 121, 1 },
  { 122, 3 },
  { 123, 0 },
  { 123, 2 },
  { 130, 3 },
  { 130, 4 },
  { 130, 5 },
  { 130, 7 },
  { 124, 0 },
  { 124, 3 },
  { 125, 4 },
  { 125, 6 },
  { 126, 0 },
  { 126, 2 },
  { 131, 4 },
  { 131, 4 },
  { 127, 0 },
  { 127, 3 },
  { 127, 3 },
  { 128, 1 },
  { 129, 0 },
  { 129, 2 },
  { 132, 0 },
  { 132, 1 },
  { 132, 3 },
  { 134, 1 },
  { 134, 3 },
  { 135, 0 },
  { 135, 1 },
  { 133, 1 },
  { 133, 1 },
  { 133, 6 },
  { 133, 2 },
  { 136, 0 },
  { 136, 1 },
  { 136, 3 },
  { 137, 1 },
  { 137, 3 },
  { 138, 0 },
  { 138, 1 },
  { 139, 0 },
  { 139, 2 },
  { 139, 3 },
  { 139, 5 },
  { 95, 1 },
  { 95, 2 },
  { 88, 0 },
  { 88, 2 },
  { 110, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 3 },
  { 100, 4 },
  { 100, 7 },
  { 100, 9 },
  { 100, 4 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 6 },
  { 100, 8 },
  { 100, 3 },
  { 100, 4 },
  { 100, 6 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 2 },
  { 100, 2 },
  { 100, 2 },
  { 100, 2 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 2 },
  { 100, 2 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 3 },
  { 100, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0:
#line 245 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="prg ::= header lfunction.";
    yygotominor.yy0->codegen=codegen_prg_header_lfunction;

    //!
    //(yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
    //Itt korábban takarítás volt, és a struktúrák teszt célú bejárása.
    //A parser 4.4.xx óta rekurzív, azért itt nem lehet takarítani.
}
#line 1537 "./parser.c"
        break;
      case 1:
#line 256 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="header ::= lnewline0 namespace lusing lstatdefin.";
    yygotominor.yy0->codegen=codegen_header_lnewline0_namespace_lusing_lstatdefin;

    if( headerflag )
    {
        //!
        (yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
        headerflag=0; //header kész
    }
}
#line 1553 "./parser.c"
        break;
      case 2:
#line 269 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="namespace ::= .";
    yygotominor.yy0->codegen=codegen_namespace;
}
#line 1562 "./parser.c"
        break;
      case 3:
#line 275 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="namespace ::= NAMESPACE dotsymbol nsalias ldotsymbol lnewline.";
    yygotominor.yy0->codegen=codegen_namespace_NAMESPACE_dotsymbol_nsalias_ldotsymbol_lnewline;

    //!
    (yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
}
#line 1574 "./parser.c"
  yy_destructor(39,&yymsp[-4].minor);
        break;
      case 4:
#line 284 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lusing ::= .";
    yygotominor.yy0->codegen=codegen_lusing;
}
#line 1584 "./parser.c"
        break;
      case 5:
#line 290 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lusing ::= lusing using.";
    yygotominor.yy0->codegen=codegen_lusing_lusing_using;
}
#line 1593 "./parser.c"
        break;
      case 6:
#line 296 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="using ::= USING dotsymbol nsalias ldotsymbol lnewline.";
    yygotominor.yy0->codegen=codegen_using_USING_dotsymbol_nsalias_ldotsymbol_lnewline;

    //!
    (yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
}
#line 1605 "./parser.c"
  yy_destructor(40,&yymsp[-4].minor);
        break;
      case 7:
#line 305 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="nsalias ::= .";
    yygotominor.yy0->codegen=codegen_nsalias;
}
#line 1615 "./parser.c"
        break;
      case 8:
#line 311 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="nsalias ::= EQ SYMBOL.";
    yygotominor.yy0->codegen=codegen_nsalias_EQ_SYMBOL;
}
#line 1624 "./parser.c"
  yy_destructor(18,&yymsp[-1].minor);
        break;
      case 9:
#line 317 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="dotsymbol ::= SYMBOL.";
    yygotominor.yy0->codegen=codegen_dotsymbol_SYMBOL;
}
#line 1634 "./parser.c"
        break;
      case 10:
#line 323 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="dotsymbol ::= dotsymbol DOT SYMBOL.";
    yygotominor.yy0->codegen=codegen_dotsymbol_dotsymbol_DOT_SYMBOL;
}
#line 1643 "./parser.c"
  yy_destructor(5,&yymsp[-1].minor);
        break;
      case 11:
#line 329 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="ldotsymbol ::= .";
    yygotominor.yy0->codegen=codegen_ldotsymbol;
}
#line 1653 "./parser.c"
        break;
      case 12:
#line 335 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="ldotsymbol ::= ldotsymbol dotsymbol.";
    yygotominor.yy0->codegen=codegen_ldotsymbol_ldotsymbol_dotsymbol;
}
#line 1662 "./parser.c"
        break;
      case 13:
#line 341 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="ddotsymbol ::= dotsymbol.";
    yygotominor.yy0->codegen=codegen_ddotsymbol_dotsymbol;
}
#line 1671 "./parser.c"
        break;
      case 14:
#line 347 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="ddotsymbol ::= DOT dotsymbol.";
    yygotominor.yy0->codegen=codegen_ddotsymbol_DOT_dotsymbol;
}
#line 1680 "./parser.c"
  yy_destructor(5,&yymsp[-1].minor);
        break;
      case 15:
#line 353 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lstatdefin ::= .";
    yygotominor.yy0->codegen=codegen_lstatdefin;
}
#line 1690 "./parser.c"
        break;
      case 16:
#line 359 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lstatdefin ::= lstatdefin STATIC statdefin lnewline.";
    yygotominor.yy0->codegen=codegen_lstatdefin_lstatdefin_STATIC_statdefin_lnewline; 
}
#line 1699 "./parser.c"
  yy_destructor(42,&yymsp[-2].minor);
        break;
      case 17:
#line 365 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statdefin ::= statdef.";
    yygotominor.yy0->codegen=codegen_statdefin_statdef; 
}
#line 1709 "./parser.c"
        break;
      case 18:
#line 371 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statdefin ::= statdefin COMMA statdef.";
    yygotominor.yy0->codegen=codegen_statdefin_statdefin_COMMA_statdef; 
}
#line 1718 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 19:
#line 377 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statdef ::= SYMBOL.";
    yygotominor.yy0->codegen=codegen_statdef_SYMBOL; 

    //!    
    add_static(yymsp[0].minor.yy0);
    yymsp[0].minor.yy0->cargo=headerflag?SYM_GLOBSTAT:SYM_LOCSTAT;
}
#line 1732 "./parser.c"
        break;
      case 20:
#line 387 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statdef ::= SYMBOL ASSIGN expr.";
    yygotominor.yy0->codegen=codegen_statdef_SYMBOL_ASSIGN_expr; 

    //!
    add_static(yymsp[-2].minor.yy0);
    yymsp[-2].minor.yy0->cargo=headerflag?SYM_GLOBSTAT:SYM_LOCSTAT;
}
#line 1745 "./parser.c"
  yy_destructor(8,&yymsp[-1].minor);
        break;
      case 21:
#line 397 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfunction ::= function.";
    yygotominor.yy0->codegen=codegen_lfunction_function;
}
#line 1755 "./parser.c"
        break;
      case 22:
#line 403 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfunction ::= lfunction function.";
    yygotominor.yy0->codegen=codegen_lfunction_lfunction_function;
}
#line 1764 "./parser.c"
        break;
      case 23:
#line 409 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-6].minor.yy0,yymsp[-4].minor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="function ::= classid LPAR ldsym RPAR newspec lnewline lslot.";
    yygotominor.yy0->codegen=codegen_function_classid_LPAR_ldsym_RPAR_newspec_lnewline_lslot; 

    //!
    (yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
}
#line 1776 "./parser.c"
  yy_destructor(43,&yymsp[-5].minor);
  yy_destructor(44,&yymsp[-3].minor);
        /* No destructor defined for lnewline */
        break;
      case 24:
#line 418 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="classid ::= CLASS dotsymbol.";
    yygotominor.yy0->codegen=codegen_classid_CLASS_dotsymbol;
}
#line 1788 "./parser.c"
  yy_destructor(45,&yymsp[-1].minor);
        break;
      case 25:
#line 424 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="classid ::= STCLASS dotsymbol.";
    yygotominor.yy0->codegen=codegen_classid_STCLASS_dotsymbol;
}
#line 1798 "./parser.c"
  yy_destructor(46,&yymsp[-1].minor);
        break;
      case 26:
#line 430 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="newspec ::= .";
    yygotominor.yy0->codegen=codegen_newspec;
}
#line 1808 "./parser.c"
        break;
      case 27:
#line 436 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="newspec ::= NEW COLON.";
    yygotominor.yy0->codegen=codegen_newspec_NEW_COLON;
}
#line 1817 "./parser.c"
  yy_destructor(47,&yymsp[-1].minor);
  yy_destructor(35,&yymsp[0].minor);
        break;
      case 28:
#line 442 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="newspec ::= NEW COLON SYMBOL.";
    yygotominor.yy0->codegen=codegen_newspec_NEW_COLON_SYMBOL;
}
#line 1828 "./parser.c"
  yy_destructor(47,&yymsp[-2].minor);
  yy_destructor(35,&yymsp[-1].minor);
        break;
      case 29:
#line 448 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lslot ::= .";
    yygotominor.yy0->cargo=0;
    yygotominor.yy0->codegen=codegen_lslot; 
}
#line 1840 "./parser.c"
        break;
      case 30:
#line 455 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="lslot ::= lslot slot lnewline.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_lslot_lslot_slot_lnewline; 
}
#line 1850 "./parser.c"
        /* No destructor defined for lnewline */
        break;
      case 31:
#line 462 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="slot ::= ATTRIB SYMBOL.";
    yygotominor.yy0->codegen=codegen_slot_ATTRIB_SYMBOL; 
}
#line 1860 "./parser.c"
  yy_destructor(48,&yymsp[-1].minor);
        break;
      case 32:
#line 468 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="slot ::= METHOD SYMBOL.";
    yygotominor.yy0->codegen=codegen_slot_METHOD_SYMBOL; 
}
#line 1870 "./parser.c"
  yy_destructor(49,&yymsp[-1].minor);
        break;
      case 33:
#line 474 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="slot ::= METHOD SYMBOL expr.";
    yygotominor.yy0->codegen=codegen_slot_METHOD_SYMBOL_expr; 
}
#line 1880 "./parser.c"
  yy_destructor(49,&yymsp[-2].minor);
        break;
      case 34:
#line 480 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="slot ::= METHOD SYMBOL forw.";
    yygotominor.yy0->codegen=codegen_slot_METHOD_SYMBOL_forw; 
}
#line 1890 "./parser.c"
  yy_destructor(49,&yymsp[-2].minor);
        break;
      case 35:
#line 486 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="forw ::= COLON SYMBOL.";
    yygotominor.yy0->codegen=codegen_forw_COLON_SYMBOL; 
}
#line 1900 "./parser.c"
  yy_destructor(35,&yymsp[-1].minor);
        break;
      case 36:
#line 492 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="forw ::= forw COLON SYMBOL.";
    yygotominor.yy0->codegen=codegen_forw_forw_COLON_SYMBOL; 
}
#line 1910 "./parser.c"
  yy_destructor(35,&yymsp[-1].minor);
        break;
      case 37:
#line 498 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="ldsym ::= dotsymbol.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_ldsym_dotsymbol;  
}
#line 1921 "./parser.c"
        break;
      case 38:
#line 505 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="ldsym ::= ldsym COMMA dotsymbol.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_ldsym_ldsym_COMMA_dotsymbol;  
}
#line 1931 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 39:
#line 512 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="function ::= funcid LPAR argument RPAR newline body.";
    yygotominor.yy0->codegen=codegen_function_funcid_LPAR_argument_RPAR_newline_body; 

    //!
    (yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
}
#line 1944 "./parser.c"
  yy_destructor(43,&yymsp[-4].minor);
  yy_destructor(44,&yymsp[-2].minor);
        break;
      case 40:
#line 521 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="funcid ::= FUNCTION dotsymbol.";
    yygotominor.yy0->codegen=codegen_funcid_FUNCTION_dotsymbol;
}
#line 1955 "./parser.c"
  yy_destructor(50,&yymsp[-1].minor);
        break;
      case 41:
#line 527 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="funcid ::= STFUNCTION dotsymbol.";
    yygotominor.yy0->codegen=codegen_funcid_STFUNCTION_dotsymbol;
}
#line 1965 "./parser.c"
  yy_destructor(51,&yymsp[-1].minor);
        break;
      case 42:
#line 533 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="argument ::= .";
    yygotominor.yy0->codegen=codegen_argument;  
}
#line 1975 "./parser.c"
        break;
      case 43:
#line 539 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="argument ::= STAR.";
    yygotominor.yy0->codegen=codegen_argument_STAR;  
}
#line 1984 "./parser.c"
  yy_destructor(28,&yymsp[0].minor);
        break;
      case 44:
#line 545 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="argument ::= larg.";
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_argument_larg;  
}
#line 1995 "./parser.c"
        break;
      case 45:
#line 552 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-2].minor.yy0);
    yygotominor.yy0->text="argument ::= larg COMMA STAR.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_argument_larg_COMMA_STAR;  
}
#line 2005 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
  yy_destructor(28,&yymsp[0].minor);
        break;
      case 46:
#line 560 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="larg ::= arg.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_larg_arg;  
}
#line 2017 "./parser.c"
        break;
      case 47:
#line 567 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="larg ::= larg COMMA arg.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_larg_larg_COMMA_arg;  
}
#line 2027 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 48:
#line 574 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="arg ::= SYMBOL.";
    yygotominor.yy0->codegen=codegen_arg_SYMBOL;  
    
    //!
    add_local(yymsp[0].minor.yy0);
}
#line 2040 "./parser.c"
        break;
      case 49:
#line 583 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="arg ::= SYMBOL ASSIGN expr.";
    yygotominor.yy0->codegen=codegen_arg_SYMBOL_ASSIGN_expr;  
    
    //!
    add_local(yymsp[-2].minor.yy0);
    symbol_search(yymsp[-2].minor.yy0);
}
#line 2053 "./parser.c"
  yy_destructor(8,&yymsp[-1].minor);
        break;
      case 50:
#line 594 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="bargument ::= .";
    yygotominor.yy0->codegen=codegen_bargument;
    yygotominor.yy0->outsource=outsource_bargument;

    //!
    if( blockflag )
    {
        nested_block();
    }
    blockflag=1;
}
#line 2071 "./parser.c"
        break;
      case 51:
#line 608 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="bargument ::= lbarg.";
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_bargument_lbarg;
    yygotominor.yy0->outsource=outsource_bargument_lbarg;

    //!
    if( blockflag )
    {
        nested_block();
    }
    blockflag=1;
}
#line 2089 "./parser.c"
        break;
      case 52:
#line 623 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="bargument ::= STAR.";
    yygotominor.yy0->codegen=codegen_bargument_STAR;
    yygotominor.yy0->outsource=outsource_bargument_STAR;

    //!
    if( blockflag )
    {
        nested_block();
    }
    blockflag=1;
}
#line 2106 "./parser.c"
  yy_destructor(28,&yymsp[0].minor);
        break;
      case 53:
#line 637 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-2].minor.yy0);
    yygotominor.yy0->text="bargument ::= lbarg COMMA STAR.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_bargument_lbarg_COMMA_STAR;
    yygotominor.yy0->outsource=outsource_bargument_lbarg_COMMA_STAR;

    //!
    if( blockflag )
    {
        nested_block();
    }
    blockflag=1;
}
#line 2125 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
  yy_destructor(28,&yymsp[0].minor);
        break;
      case 54:
#line 652 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lbarg ::= SYMBOL.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_lbarg_SYMBOL;
    yygotominor.yy0->outsource=outsource_lbarg_SYMBOL;
    
    //!
    add_blkarg(yymsp[0].minor.yy0);
}
#line 2141 "./parser.c"
        break;
      case 55:
#line 663 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lbarg ::= lbarg COMMA SYMBOL.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_lbarg_lbarg_COMMA_SYMBOL;
    yygotominor.yy0->outsource=outsource_lbarg_lbarg_COMMA_SYMBOL;

    //!
    add_blkarg(yymsp[0].minor.yy0);
}
#line 2155 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 56:
#line 674 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="body ::= llocdefin lstatement.";
    yygotominor.yy0->codegen=codegen_body_llocdefin_lstatement;  
}
#line 2165 "./parser.c"
        break;
      case 57:
#line 680 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="llocdefin ::= .";
    yygotominor.yy0->codegen=codegen_llocdefin;
}
#line 2174 "./parser.c"
        break;
      case 58:
#line 686 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="llocdefin ::= llocdefin newline.";
    yygotominor.yy0->cargo=yymsp[-1].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_llocdefin_llocdefin_newline;
}
#line 2184 "./parser.c"
        break;
      case 59:
#line 693 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="llocdefin ::= llocdefin locdline newline.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+yymsp[-1].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_llocdefin_llocdefin_locdline_newline;
}
#line 2194 "./parser.c"
        break;
      case 60:
#line 700 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdline ::= STATIC statdefin.";
    yygotominor.yy0->codegen=codegen_locdline_STATIC_statdefin;
}
#line 2203 "./parser.c"
  yy_destructor(42,&yymsp[-1].minor);
        break;
      case 61:
#line 706 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdline ::= LOCAL locdefin.";
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_locdline_LOCAL_locdefin; 
}
#line 2214 "./parser.c"
  yy_destructor(52,&yymsp[-1].minor);
        break;
      case 62:
#line 713 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdefin ::= locdef.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_locdefin_locdef; 
}
#line 2225 "./parser.c"
        break;
      case 63:
#line 720 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdefin ::= locdefin COMMA locdef.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_locdefin_locdefin_COMMA_locdef;  
}
#line 2235 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 64:
#line 727 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdef ::= SYMBOL.";
    yygotominor.yy0->codegen=codegen_locdef_SYMBOL;
    
    //!
    add_local(yymsp[0].minor.yy0);
}
#line 2248 "./parser.c"
        break;
      case 65:
#line 736 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdef ::= SYMBOL ASSIGN expr.";
    yygotominor.yy0->codegen=codegen_locdef_SYMBOL_ASSIGN_expr; 

    //!
    add_local(yymsp[-2].minor.yy0);
    symbol_search(yymsp[-2].minor.yy0);
}
#line 2261 "./parser.c"
  yy_destructor(8,&yymsp[-1].minor);
        break;
      case 66:
#line 746 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lstatement ::= .";
    yygotominor.yy0->codegen=codegen_lstatement;  
}
#line 2271 "./parser.c"
        break;
      case 67:
#line 752 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lstatement ::= lstatement newline.";
    yygotominor.yy0->codegen=codegen_lstatement_lstatement_newline;  
}
#line 2280 "./parser.c"
        break;
      case 68:
#line 758 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lstatement ::= lstatement statement newline.";
    yygotominor.yy0->codegen=codegen_lstatement_lstatement_statement_newline;  
}
#line 2289 "./parser.c"
        break;
      case 69:
#line 764 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="statement ::= QUIT.";
    yygotominor.yy0->codegen=codegen_statement_QUIT;  
}
#line 2298 "./parser.c"
  yy_destructor(53,&yymsp[0].minor);
        break;
      case 70:
#line 770 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statement ::= RETURN expr.";
    yygotominor.yy0->codegen=codegen_statement_RETURN_expr;  
}
#line 2308 "./parser.c"
  yy_destructor(54,&yymsp[-1].minor);
        break;
      case 71:
#line 776 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="statement ::= begseq lrecov finally END.";
    yygotominor.yy0->codegen=codegen_statement_begseq_lrecov_finally_END;
}
#line 2318 "./parser.c"
  yy_destructor(55,&yymsp[0].minor);
        break;
      case 72:
#line 782 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statement ::= if lelseif else endif.";
    yygotominor.yy0->codegen=codegen_statement_if_lelseif_else_endif;
}
#line 2328 "./parser.c"
        break;
      case 73:
#line 788 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="statement ::= WHILE expr newline lstatement END.";
    yygotominor.yy0->codegen=codegen_statement_WHILE_expr_newline_lstatement_END;
}
#line 2337 "./parser.c"
  yy_destructor(56,&yymsp[-4].minor);
  yy_destructor(55,&yymsp[0].minor);
        break;
      case 74:
#line 794 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(6,yymsp[-8].minor.yy0,yymsp[-6].minor.yy0,yymsp[-4].minor.yy0,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="statement ::= FOR SYMBOL ASSIGN expr TO expr forstep newline lstatement END.";
    yygotominor.yy0->codegen=codegen_statement_FOR_SYMBOL_ASSIGN_expr_TO_expr_forstep_newline_lstatement_END; 

    //!
    symbol_search(yymsp[-8].minor.yy0);
}
#line 2351 "./parser.c"
  yy_destructor(57,&yymsp[-9].minor);
  yy_destructor(8,&yymsp[-7].minor);
  yy_destructor(58,&yymsp[-5].minor);
  yy_destructor(55,&yymsp[0].minor);
        break;
      case 75:
#line 803 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statement ::= LOOP.";
    yygotominor.yy0->codegen=codegen_statement_LOOP; 
}
#line 2364 "./parser.c"
        break;
      case 76:
#line 809 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statement ::= EXIT.";
    yygotominor.yy0->codegen=codegen_statement_EXIT; 
}
#line 2373 "./parser.c"
        break;
      case 77:
#line 815 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statement ::= expr.";
    yygotominor.yy0->codegen=codegen_statement_expr; 
}
#line 2382 "./parser.c"
        break;
      case 78:
#line 821 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="begseq ::= BEGSEQ newline lstatement.";
    yygotominor.yy0->codegen=codegen_begseq_BEGSEQ_newline_lstatement;  
}
#line 2391 "./parser.c"
  yy_destructor(61,&yymsp[-2].minor);
        break;
      case 79:
#line 827 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lrecov ::= .";
    yygotominor.yy0->codegen=codegen_lrecov;
}
#line 2401 "./parser.c"
        break;
      case 80:
#line 833 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lrecov ::= lrecov recov.";
    yygotominor.yy0->codegen=codegen_lrecov_lrecov_recov;
}
#line 2410 "./parser.c"
        break;
      case 81:
#line 839 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="recov ::= RECOVER newline lstatement.";
    yygotominor.yy0->codegen=codegen_recov_RECOVER_newline_lstatement; 
}
#line 2419 "./parser.c"
  yy_destructor(62,&yymsp[-2].minor);
        break;
      case 82:
#line 845 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="recov ::= RECOVER SYMBOL newline lstatement.";
    yygotominor.yy0->codegen=codegen_recov_RECOVER_SYMBOL_newline_lstatement;
    
    //!
    symbol_search(yymsp[-2].minor.yy0);
}
#line 2432 "./parser.c"
  yy_destructor(62,&yymsp[-3].minor);
        break;
      case 83:
#line 854 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="recov ::= RECOVER SYMBOL expr newline lstatement.";
    yygotominor.yy0->codegen=codegen_recov_RECOVER_SYMBOL_expr_newline_lstatement;
    
    //!
    symbol_search(yymsp[-3].minor.yy0);
}
#line 2445 "./parser.c"
  yy_destructor(62,&yymsp[-4].minor);
        break;
      case 84:
#line 863 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="recov ::= RECOVER SYMBOL LT dotsymbol GT newline lstatement.";
    yygotominor.yy0->codegen=codegen_recov_RECOVER_SYMBOL_LT_dotsymbol_GT_newline_lstatement;
    
    //!
    symbol_search(yymsp[-5].minor.yy0);
}
#line 2458 "./parser.c"
  yy_destructor(62,&yymsp[-6].minor);
  yy_destructor(24,&yymsp[-4].minor);
  yy_destructor(23,&yymsp[-2].minor);
        break;
      case 85:
#line 873 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="finally ::= .";
    yygotominor.yy0->codegen=codegen_finally;
}
#line 2470 "./parser.c"
        break;
      case 86:
#line 879 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="finally ::= FINALLY newline lstatement.";
    yygotominor.yy0->codegen=codegen_finally_FINALLY_newline_lstatement;
}
#line 2479 "./parser.c"
  yy_destructor(63,&yymsp[-2].minor);
        break;
      case 87:
#line 886 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="if ::= IF expr newline lstatement.";
    yygotominor.yy0->codegen=codegen_if_IF_expr_newline_lstatement; 
}
#line 2489 "./parser.c"
  yy_destructor(64,&yymsp[-3].minor);
        break;
      case 88:
#line 892 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-4].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="if ::= DOCASE newline CASE expr newline lstatement.";
    yygotominor.yy0->codegen=codegen_if_DOCASE_newline_CASE_expr_newline_lstatement;  
}
#line 2499 "./parser.c"
  yy_destructor(65,&yymsp[-5].minor);
  yy_destructor(66,&yymsp[-3].minor);
        break;
      case 89:
#line 898 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lelseif ::= .";
    yygotominor.yy0->cargo=0;
    yygotominor.yy0->codegen=codegen_lelseif;
}
#line 2511 "./parser.c"
        break;
      case 90:
#line 905 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lelseif ::= lelseif elseif.";
    yygotominor.yy0->cargo=yymsp[-1].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_lelseif_lelseif_elseif;
}
#line 2521 "./parser.c"
        break;
      case 91:
#line 912 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="elseif ::= ELSEIF expr newline lstatement.";
    yygotominor.yy0->codegen=codegen_elseif_ELSEIF_expr_newline_lstatement;
}
#line 2530 "./parser.c"
  yy_destructor(67,&yymsp[-3].minor);
        break;
      case 92:
#line 918 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="elseif ::= CASE expr newline lstatement.";
    yygotominor.yy0->codegen=codegen_elseif_CASE_expr_newline_lstatement;
}
#line 2540 "./parser.c"
  yy_destructor(66,&yymsp[-3].minor);
        break;
      case 93:
#line 924 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="else ::= .";
    yygotominor.yy0->codegen=codegen_else;
}
#line 2550 "./parser.c"
        break;
      case 94:
#line 930 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="else ::= ELSE newline lstatement";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_else_ELSE_newline_lstatement; 
}
#line 2560 "./parser.c"
  yy_destructor(68,&yymsp[-2].minor);
        break;
      case 95:
#line 937 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="else ::= OTHERWISE newline lstatement";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_else_OTHERWISE_newline_lstatement; 
}
#line 2571 "./parser.c"
  yy_destructor(69,&yymsp[-2].minor);
        break;
      case 96:
#line 944 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="endif ::= END";
    yygotominor.yy0->codegen=codegen_endif_END;
}
#line 2581 "./parser.c"
  yy_destructor(55,&yymsp[0].minor);
        break;
      case 97:
#line 950 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="forstep ::= .";
    yygotominor.yy0->codegen=codegen_forstep;
}
#line 2591 "./parser.c"
        break;
      case 98:
#line 956 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="forstep ::= STEP expr.";
    yygotominor.yy0->codegen=codegen_forstep_STEP_expr; 
}
#line 2600 "./parser.c"
  yy_destructor(70,&yymsp[-1].minor);
        break;
      case 99:
#line 962 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lfuncpar ::= .";
    yygotominor.yy0->codegen=codegen_lfuncpar;
    yygotominor.yy0->outsource=outsource_lfuncpar;
    yygotominor.yy0->cargo=0;
}
#line 2612 "./parser.c"
        break;
      case 100:
#line 970 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfuncpar ::= parexpr.";
    yygotominor.yy0->codegen=codegen_lfuncpar_parexpr;
    yygotominor.yy0->outsource=outsource_lfuncpar_parexpr;
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo+1;
}
#line 2623 "./parser.c"
        break;
      case 101:
#line 978 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfuncpar ::= lfuncpar0 COMMA parexpr0.";
    yygotominor.yy0->codegen=codegen_lfuncpar_lfuncpar0_COMMA_parexpr0;
    yygotominor.yy0->outsource=outsource_lfuncpar_lfuncpar0_COMMA_parexpr0;
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+yymsp[0].minor.yy0->cargo+1;
}
#line 2634 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 102:
#line 986 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfuncpar0 ::= parexpr0.";
    yygotominor.yy0->codegen=codegen_lfuncpar0_parexpr0;
    yygotominor.yy0->outsource=outsource_lfuncpar0_parexpr0;
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo+1;
}
#line 2646 "./parser.c"
        break;
      case 103:
#line 994 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfuncpar0 ::= lfuncpar0 COMMA parexpr0.";
    yygotominor.yy0->codegen=codegen_lfuncpar0_lfuncpar0_COMMA_parexpr0;
    yygotominor.yy0->outsource=outsource_lfuncpar0_lfuncpar0_COMMA_parexpr0;
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+yymsp[0].minor.yy0->cargo+1;
}
#line 2657 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 104:
#line 1002 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="parexpr0 ::= .";
    yygotominor.yy0->codegen=codegen_parexpr0;
    yygotominor.yy0->outsource=outsource_parexpr0;
    yygotominor.yy0->cargo=0;
}
#line 2669 "./parser.c"
        break;
      case 105:
#line 1010 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="parexpr0 ::= parexpr.";
    yygotominor.yy0->codegen=codegen_parexpr0_parexpr;
    yygotominor.yy0->outsource=outsource_parexpr0_parexpr;
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo;
}
#line 2680 "./parser.c"
        break;
      case 106:
#line 1018 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="parexpr ::= expr.";
    yygotominor.yy0->codegen=codegen_parexpr_expr;
    yygotominor.yy0->outsource=outsource_parexpr_expr;
    yygotominor.yy0->cargo=0;
}
#line 2691 "./parser.c"
        break;
      case 107:
#line 1026 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="parexpr ::= STAR.";
    yygotominor.yy0->codegen=codegen_parexpr_STAR;
    yygotominor.yy0->outsource=outsource_parexpr_STAR;
    yygotominor.yy0->cargo=(1<<16);
}
#line 2702 "./parser.c"
  yy_destructor(28,&yymsp[0].minor);
        break;
      case 108:
#line 1034 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="parexpr ::= STAR LBRACKET parexpr0 DOTDOT parexpr0 RBRACKET.";
    yygotominor.yy0->codegen=codegen_parexpr_STAR_LBRACKET_parexpr0_DOTDOT_parexpr0_RBRACKET;
    yygotominor.yy0->outsource=outsource_parexpr_STAR_LBRACKET_parexpr0_DOTDOT_parexpr0_RBRACKET;
    yygotominor.yy0->cargo=(1<<16);
}
#line 2714 "./parser.c"
  yy_destructor(28,&yymsp[-5].minor);
  yy_destructor(34,&yymsp[-4].minor);
  yy_destructor(6,&yymsp[-2].minor);
  yy_destructor(71,&yymsp[0].minor);
        break;
      case 109:
#line 1042 "./parser.lem"
{  //@symbol
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="parexpr ::= AT SYMBOL.";
    yygotominor.yy0->codegen=codegen_parexpr_AT_SYMBOL;
    yygotominor.yy0->outsource=outsource_parexpr_AT_SYMBOL;
    yygotominor.yy0->cargo=0;

    //!
    symbol_search(yymsp[0].minor.yy0);
}
#line 2732 "./parser.c"
  yy_destructor(72,&yymsp[-1].minor);
        break;
      case 110:
#line 1053 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lexpr ::= .";
    yygotominor.yy0->codegen=codegen_lexpr;
    yygotominor.yy0->outsource=outsource_lexpr;
}
#line 2743 "./parser.c"
        break;
      case 111:
#line 1060 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lexpr ::= expr.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_lexpr_expr;
    yygotominor.yy0->outsource=outsource_lexpr_expr;
}
#line 2754 "./parser.c"
        break;
      case 112:
#line 1068 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lexpr ::= lexpr0 COMMA expr0.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_lexpr_lexpr0_COMMA_expr0;
    yygotominor.yy0->outsource=outsource_lexpr_lexpr0_COMMA_expr0;
}
#line 2765 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 113:
#line 1076 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lexpr0 ::= expr0.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_lexpr0_expr0;
    yygotominor.yy0->outsource=outsource_lexpr0_expr0;
}
#line 2777 "./parser.c"
        break;
      case 114:
#line 1084 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lexpr0 ::= lexpr0 COMMA expr0.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_lexpr0_lexpr0_COMMA_expr0;
    yygotominor.yy0->outsource=outsource_lexpr0_lexpr0_COMMA_expr0;
}
#line 2788 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 115:
#line 1092 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="expr0 ::= .";
    yygotominor.yy0->codegen=codegen_expr0;
    yygotominor.yy0->outsource=outsource_expr0;
}
#line 2799 "./parser.c"
        break;
      case 116:
#line 1099 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr0 ::= expr.";
    yygotominor.yy0->codegen=codegen_expr0_expr;
    yygotominor.yy0->outsource=outsource_expr0_expr;
}
#line 2809 "./parser.c"
        break;
      case 117:
#line 1106 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="msgpar ::= .";
    yygotominor.yy0->codegen=codegen_msgpar;
    yygotominor.yy0->outsource=outsource_msgpar;
}
#line 2819 "./parser.c"
        break;
      case 118:
#line 1113 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="msgpar ::= ASSIGN expr.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_msgpar_ASSIGN_expr;
    yygotominor.yy0->outsource=outsource_msgpar_ASSIGN_expr;
}
#line 2830 "./parser.c"
  yy_destructor(8,&yymsp[-1].minor);
        break;
      case 119:
#line 1121 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="msgpar ::= LPAR lfuncpar RPAR.";
    yygotominor.yy0->cargo=yymsp[-1].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_msgpar_LPAR_lfuncpar_RPAR;
    yygotominor.yy0->outsource=outsource_msgpar_LPAR_lfuncpar_RPAR;
}
#line 2842 "./parser.c"
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
        break;
      case 120:
#line 1129 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-3].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="msgpar ::= LPAR lfuncpar RPAR ASSIGN expr.";
    yygotominor.yy0->cargo=yymsp[-3].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_msgpar_LPAR_lfuncpar_RPAR_ASSIGN_expr;
    yygotominor.yy0->outsource=outsource_msgpar_LPAR_lfuncpar_RPAR_ASSIGN_expr;
}
#line 2855 "./parser.c"
  yy_destructor(43,&yymsp[-4].minor);
  yy_destructor(44,&yymsp[-2].minor);
  yy_destructor(8,&yymsp[-1].minor);
        break;
      case 121:
#line 1137 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lnewline ::= newline.";
    yygotominor.yy0->codegen=codegen_lnewline_newline;
}
#line 2867 "./parser.c"
        break;
      case 122:
#line 1143 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lnewline ::= lnewline newline.";
    yygotominor.yy0->codegen=codegen_lnewline_lnewline_newline;
}
#line 2876 "./parser.c"
        break;
      case 123:
#line 1149 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lnewline0 ::= .";
    yygotominor.yy0->codegen=codegen_lnewline0;
}
#line 2885 "./parser.c"
        break;
      case 124:
#line 1155 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lnewline0 ::= lnewline0 newline.";
    yygotominor.yy0->codegen=codegen_lnewline0_lnewline0_newline;
}
#line 2894 "./parser.c"
        break;
      case 125:
#line 1161 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="newline ::= NL.";
    yygotominor.yy0->codegen=codegen_newline_NL;
}
#line 2903 "./parser.c"
        break;
      case 126:
#line 1167 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= NUMBER.";
    yygotominor.yy0->codegen=codegen_expr_NUMBER;
    yygotominor.yy0->outsource=outsource_expr_NUMBER;
}
#line 2913 "./parser.c"
        break;
      case 127:
#line 1174 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= STRING.";
    yygotominor.yy0->codegen=codegen_expr_STRING;
    yygotominor.yy0->outsource=outsource_expr_STRING;
    
    static char *strtab_env=getenv("CCC_STRING_TAB");
    static FILE *strtab_fil=(strtab_env&&*strtab_env)?fopen(strtab_env,"a"):0;
    if( strtab_fil )
    {
        write_strtab(strtab_fil,yymsp[0].minor.yy0);
    }
}
#line 2930 "./parser.c"
        break;
      case 128:
#line 1188 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= NLSTEXT.";
    yygotominor.yy0->codegen=codegen_expr_NLSTEXT;
    yygotominor.yy0->outsource=outsource_expr_NLSTEXT;
    
    static char *strtab_env=getenv("CCC_NLSTEXT_TAB");
    static FILE *strtab_fil=(strtab_env&&*strtab_env)?fopen(strtab_env,"a"):0;
    if( strtab_fil )
    {
        write_strtab(strtab_fil,yymsp[0].minor.yy0);
    }
}
#line 2947 "./parser.c"
        break;
      case 129:
#line 1202 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= BINARYX.";
    yygotominor.yy0->codegen=codegen_expr_BINARYX;
    yygotominor.yy0->outsource=outsource_expr_BINARYX;
}
#line 2957 "./parser.c"
        break;
      case 130:
#line 1209 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= BINARYA.";
    yygotominor.yy0->codegen=codegen_expr_BINARYA;
    yygotominor.yy0->outsource=outsource_expr_BINARYA;
}
#line 2967 "./parser.c"
        break;
      case 131:
#line 1216 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= TRUE.";
    yygotominor.yy0->codegen=codegen_expr_TRUE;
    yygotominor.yy0->outsource=outsource_expr_TRUE;
}
#line 2977 "./parser.c"
        break;
      case 132:
#line 1223 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= FALSE.";
    yygotominor.yy0->codegen=codegen_expr_FALSE;
    yygotominor.yy0->outsource=outsource_expr_FALSE;
}
#line 2987 "./parser.c"
        break;
      case 133:
#line 1230 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= NIL.";
    yygotominor.yy0->codegen=codegen_expr_NIL;
    yygotominor.yy0->outsource=outsource_expr_NIL;
}
#line 2997 "./parser.c"
        break;
      case 134:
#line 1237 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= SYMBOL.";
    yygotominor.yy0->codegen=codegen_expr_SYMBOL;
    yygotominor.yy0->outsource=outsource_expr_SYMBOL;

    //!
    symbol_search(yymsp[0].minor.yy0);
}
#line 3010 "./parser.c"
        break;
      case 135:
#line 1247 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= SYMBOL ARROW SYMBOL.";
    yygotominor.yy0->codegen=codegen_expr_SYMBOL_ARROW_SYMBOL;
    yygotominor.yy0->outsource=outsource_expr_SYMBOL_ARROW_SYMBOL;
}
#line 3020 "./parser.c"
  yy_destructor(37,&yymsp[-1].minor);
        break;
      case 136:
#line 1254 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr COLON SYMBOL msgpar.";
    yygotominor.yy0->codegen=codegen_expr_expr_COLON_SYMBOL_msgpar;
    yygotominor.yy0->outsource=outsource_expr_expr_COLON_SYMBOL_msgpar;
}
#line 3031 "./parser.c"
  yy_destructor(35,&yymsp[-2].minor);
        break;
      case 137:
#line 1261 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-6].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr COLON LPAR dotsymbol RPAR SYMBOL msgpar.";
    yygotominor.yy0->codegen=codegen_expr_expr_COLON_LPAR_dotsymbol_RPAR_SYMBOL_msgpar;
    yygotominor.yy0->outsource=outsource_expr_expr_COLON_LPAR_dotsymbol_RPAR_SYMBOL_msgpar;
}
#line 3042 "./parser.c"
  yy_destructor(35,&yymsp[-5].minor);
  yy_destructor(43,&yymsp[-4].minor);
  yy_destructor(44,&yymsp[-2].minor);
        break;
      case 138:
#line 1268 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(5,yymsp[-8].minor.yy0,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr COLON LPAR dotsymbol AT dotsymbol RPAR SYMBOL msgpar.";
    yygotominor.yy0->codegen=codegen_expr_expr_COLON_LPAR_dotsymbol_AT_dotsymbol_RPAR_SYMBOL_msgpar;
    yygotominor.yy0->outsource=outsource_expr_expr_COLON_LPAR_dotsymbol_AT_dotsymbol_RPAR_SYMBOL_msgpar;
}
#line 3055 "./parser.c"
  yy_destructor(35,&yymsp[-7].minor);
  yy_destructor(43,&yymsp[-6].minor);
  yy_destructor(72,&yymsp[-4].minor);
  yy_destructor(44,&yymsp[-2].minor);
        break;
      case 139:
#line 1275 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= ddotsymbol LPAR lfuncpar RPAR.";
    yygotominor.yy0->codegen=codegen_expr_ddotsymbol_LPAR_lfuncpar_RPAR;
    yygotominor.yy0->outsource=outsource_expr_ddotsymbol_LPAR_lfuncpar_RPAR;
}
#line 3069 "./parser.c"
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
        break;
      case 140:
#line 1282 "./parser.lem"
{
    /*postfix fuggvenyhivas*/
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr COLCOL expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_COLCOL_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_COLCOL_expr;
}
#line 3082 "./parser.c"
  yy_destructor(36,&yymsp[-1].minor);
        break;
      case 141:
#line 1290 "./parser.lem"
{
    /*postfix fuggvenyhivas + ertekadas*/
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr COLCOLASS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_COLCOLASS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_COLCOLASS_expr;
}
#line 3094 "./parser.c"
  yy_destructor(14,&yymsp[-1].minor);
        break;
      case 142:
#line 1298 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[-2].minor.yy0); //sorrend!
    yygotominor.yy0->text="expr ::= LPAR lexpr RPAR.";
    yygotominor.yy0->lineno=yymsp[-2].minor.yy0->lineno;
    yygotominor.yy0->codegen=codegen_expr_LPAR_lexpr_RPAR;
    yygotominor.yy0->outsource=outsource_expr_LPAR_lexpr_RPAR;
}
#line 3106 "./parser.c"
  yy_destructor(44,&yymsp[0].minor);
        break;
      case 143:
#line 1306 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[-5].minor.yy0); //sorrend!
    yygotominor.yy0->text="expr ::= LBRACE PIPE bargument PIPE lexpr RBRACE.";
    yygotominor.yy0->lineno=yymsp[-5].minor.yy0->lineno;
    yygotominor.yy0->codegen=codegen_expr_LBRACE_PIPE_bargument_PIPE_lexpr_RBRACE;
    yygotominor.yy0->outsource=outsource_expr_LBRACE_PIPE_bargument_PIPE_lexpr_RBRACE;

    //!
    blockflag=0;
    nodetab_blkarg->clean();
}
#line 3122 "./parser.c"
  yy_destructor(82,&yymsp[-4].minor);
  yy_destructor(82,&yymsp[-2].minor);
  yy_destructor(83,&yymsp[0].minor);
        break;
      case 144:
#line 1318 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= IF LPAR expr COMMA expr COMMA expr RPAR.";
    yygotominor.yy0->codegen=codegen_expr_IF_LPAR_expr_COMMA_expr_COMMA_expr_RPAR;
    yygotominor.yy0->outsource=outsource_expr_IF_LPAR_expr_COMMA_expr_COMMA_expr_RPAR;
}
#line 3135 "./parser.c"
  yy_destructor(64,&yymsp[-7].minor);
  yy_destructor(43,&yymsp[-6].minor);
  yy_destructor(7,&yymsp[-4].minor);
  yy_destructor(7,&yymsp[-2].minor);
  yy_destructor(44,&yymsp[0].minor);
        break;
      case 145:
#line 1325 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= LBRACE lfuncpar RBRACE.";
    yygotominor.yy0->codegen=codegen_expr_LBRACE_lfuncpar_RBRACE;
    yygotominor.yy0->outsource=outsource_expr_LBRACE_lfuncpar_RBRACE;
}
#line 3150 "./parser.c"
  yy_destructor(81,&yymsp[-2].minor);
  yy_destructor(83,&yymsp[0].minor);
        break;
      case 146:
#line 1332 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= expr LBRACKET expr RBRACKET.";
    yygotominor.yy0->codegen=codegen_expr_expr_LBRACKET_expr_RBRACKET;
    yygotominor.yy0->outsource=outsource_expr_expr_LBRACKET_expr_RBRACKET;
}
#line 3162 "./parser.c"
  yy_destructor(34,&yymsp[-2].minor);
  yy_destructor(71,&yymsp[0].minor);
        break;
      case 147:
#line 1340 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= expr LBRACKET parexpr0 DOTDOT parexpr0 RBRACKET.";
    yygotominor.yy0->codegen=codegen_expr_expr_LBRACKET_parexpr0_DOTDOT_parexpr0_RBRACKET;
    yygotominor.yy0->outsource=outsource_expr_expr_LBRACKET_parexpr0_DOTDOT_parexpr0_RBRACKET;
}
#line 3174 "./parser.c"
  yy_destructor(34,&yymsp[-4].minor);
  yy_destructor(6,&yymsp[-2].minor);
  yy_destructor(71,&yymsp[0].minor);
        break;
      case 148:
#line 1348 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr ASSIGN expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_ASSIGN_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_ASSIGN_expr;
}
#line 3187 "./parser.c"
  yy_destructor(8,&yymsp[-1].minor);
        break;
      case 149:
#line 1355 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr ADDASS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_ADDASS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_ADDASS_expr;
}
#line 3198 "./parser.c"
  yy_destructor(9,&yymsp[-1].minor);
        break;
      case 150:
#line 1362 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr SUBASS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_SUBASS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_SUBASS_expr;
}
#line 3209 "./parser.c"
  yy_destructor(10,&yymsp[-1].minor);
        break;
      case 151:
#line 1369 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr MULASS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_MULASS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_MULASS_expr;
}
#line 3220 "./parser.c"
  yy_destructor(11,&yymsp[-1].minor);
        break;
      case 152:
#line 1376 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr DIVASS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_DIVASS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_DIVASS_expr;
}
#line 3231 "./parser.c"
  yy_destructor(12,&yymsp[-1].minor);
        break;
      case 153:
#line 1383 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr MODASS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_MODASS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_MODASS_expr;
}
#line 3242 "./parser.c"
  yy_destructor(13,&yymsp[-1].minor);
        break;
      case 154:
#line 1390 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= DBMINUS expr.";
    yygotominor.yy0->codegen=codegen_expr_DBMINUS_expr;
    yygotominor.yy0->outsource=outsource_expr_DBMINUS_expr;
}
#line 3253 "./parser.c"
  yy_destructor(33,&yymsp[-1].minor);
        break;
      case 155:
#line 1397 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= DBPLUS expr.";
    yygotominor.yy0->codegen=codegen_expr_DBPLUS_expr;
    yygotominor.yy0->outsource=outsource_expr_DBPLUS_expr;
}
#line 3264 "./parser.c"
  yy_destructor(32,&yymsp[-1].minor);
        break;
      case 156:
#line 1404 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= expr DBMINUS.";
    yygotominor.yy0->codegen=codegen_expr_expr_DBMINUS;
    yygotominor.yy0->outsource=outsource_expr_expr_DBMINUS;
}
#line 3275 "./parser.c"
  yy_destructor(33,&yymsp[0].minor);
        break;
      case 157:
#line 1411 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= expr DBPLUS.";
    yygotominor.yy0->codegen=codegen_expr_expr_DBPLUS;
    yygotominor.yy0->outsource=outsource_expr_expr_DBPLUS;
}
#line 3286 "./parser.c"
  yy_destructor(32,&yymsp[0].minor);
        break;
      case 158:
#line 1418 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr PLUS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_PLUS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_PLUS_expr;
}
#line 3297 "./parser.c"
  yy_destructor(26,&yymsp[-1].minor);
        break;
      case 159:
#line 1425 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr MINUS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_MINUS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_MINUS_expr;
}
#line 3308 "./parser.c"
  yy_destructor(27,&yymsp[-1].minor);
        break;
      case 160:
#line 1432 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr STAR expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_STAR_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_STAR_expr;
}
#line 3319 "./parser.c"
  yy_destructor(28,&yymsp[-1].minor);
        break;
      case 161:
#line 1439 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr SLASH expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_SLASH_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_SLASH_expr;
}
#line 3330 "./parser.c"
  yy_destructor(29,&yymsp[-1].minor);
        break;
      case 162:
#line 1446 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr MODULO expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_MODULO_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_MODULO_expr;
}
#line 3341 "./parser.c"
  yy_destructor(30,&yymsp[-1].minor);
        break;
      case 163:
#line 1453 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr DBSTAR expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_DBSTAR_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_DBSTAR_expr;
}
#line 3352 "./parser.c"
  yy_destructor(31,&yymsp[-1].minor);
        break;
      case 164:
#line 1460 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= MINUS expr.";
    yygotominor.yy0->codegen=codegen_expr_MINUS_expr;
    yygotominor.yy0->outsource=outsource_expr_MINUS_expr;
}
#line 3363 "./parser.c"
  yy_destructor(27,&yymsp[-1].minor);
        break;
      case 165:
#line 1467 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= PLUS expr.";
    yygotominor.yy0->codegen=codegen_expr_PLUS_expr;
    yygotominor.yy0->outsource=outsource_expr_PLUS_expr;
}
#line 3374 "./parser.c"
  yy_destructor(26,&yymsp[-1].minor);
        break;
      case 166:
#line 1474 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr EQEQ expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_EQEQ_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_EQEQ_expr;
}
#line 3385 "./parser.c"
  yy_destructor(19,&yymsp[-1].minor);
        break;
      case 167:
#line 1481 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr EXEQ expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_EXEQ_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_EXEQ_expr;
}
#line 3396 "./parser.c"
  yy_destructor(22,&yymsp[-1].minor);
        break;
      case 168:
#line 1488 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr GTEQ expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_GTEQ_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_GTEQ_expr;
}
#line 3407 "./parser.c"
  yy_destructor(20,&yymsp[-1].minor);
        break;
      case 169:
#line 1495 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr LTEQ expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_LTEQ_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_LTEQ_expr;
}
#line 3418 "./parser.c"
  yy_destructor(21,&yymsp[-1].minor);
        break;
      case 170:
#line 1502 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr GT expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_GT_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_GT_expr;
}
#line 3429 "./parser.c"
  yy_destructor(23,&yymsp[-1].minor);
        break;
      case 171:
#line 1509 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr LT expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_LT_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_LT_expr;
}
#line 3440 "./parser.c"
  yy_destructor(24,&yymsp[-1].minor);
        break;
      case 172:
#line 1516 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr DOLLAR expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_DOLLAR_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_DOLLAR_expr;
}
#line 3451 "./parser.c"
  yy_destructor(25,&yymsp[-1].minor);
        break;
      case 173:
#line 1523 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr OR expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_OR_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_OR_expr;
}
#line 3462 "./parser.c"
  yy_destructor(15,&yymsp[-1].minor);
        break;
      case 174:
#line 1530 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr AND expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_AND_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_AND_expr;
}
#line 3473 "./parser.c"
  yy_destructor(16,&yymsp[-1].minor);
        break;
      case 175:
#line 1537 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= NOT expr.";
    yygotominor.yy0->codegen=codegen_expr_NOT_expr;
    yygotominor.yy0->outsource=outsource_expr_NOT_expr;
}
#line 3484 "./parser.c"
  yy_destructor(17,&yymsp[-1].minor);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yypParser,yygoto);
  if( yyact < YYNSTATE ){
    yy_shift(yypParser,yyact,yygoto,&yygotominor);
  }else if( yyact == YYNSTATE + YYNRULE + 1 ){
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 173 "./parser.lem"

    fprintf(stderr,"Error: syntax error at #line %d %s.\n",
            lexer->getinputlineno(),
            lexer->getinputfspec());

    fflush(0);
    
    //Figyelem:
    //itt a "hivatalos" Lemon interface alá nyúlunk,
    //ami a teljes megértés hiányában könnyen segfault-hoz vezet.
    
    //Parser stack:
    int i;
    fprintf(stderr,"Stack:");
    for(i=1; i<=yypParser->yyidx; i++)
    {
        fprintf(stderr," %s",yyTokenName[yypParser->yystack[i].major]);
        //a parsenode text-je: yypParser->yystack[i].minor.yy0->text
        fflush(0);
    }
    fprintf(stderr,".\n");
    
    //Last input token:
    if( !lexer->geteofflag() )
    {
        fprintf(stderr,"Token: %s (%s).\n",yyTokenName[yymajor],yyminor.yy0->text);
        fflush(0);
    }
    else
    {
        fprintf(stderr,"Token: EOF.\n");
        fflush(0);
    }

    exit(1);

#line 3564 "./parser.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 210 "./parser.lem"

    if(parsing_complete)
    {
        printf("Parsing complete.\n");
    }

#line 3590 "./parser.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
    if( yymajor==0 ) return;
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      if( yyendofinput && yypParser->yyidx>=0 ){
        yymajor = 0;
      }else{
        yymajor = YYNOCODE;
      }
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else if( yyact == YY_ERROR_ACTION ){
      int yymx;
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_shift_action(yypParser,YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }else{
      yy_accept(yypParser);
      yymajor = YYNOCODE;
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
