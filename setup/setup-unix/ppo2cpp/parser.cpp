
/*
 *  CCC - The Clipper to C++ Compiler
 *  Copyright (C) 2005 ComFirm BT.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

//Vermes M.
//signed/unsigned comparison warning elkerülése,
//hogy cpp-ként is warning mentesen forduljon.
//void ParseTrace(FILE *TraceFILE, const char *zTracePrompt);

/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is include which follows the "include" declaration
** in the input file. */
#include <stdio.h>
#line 21 "./parser.lem"


#include <stdlib.h>
#include <parsenode.h>
#include <lexer.h>
#include <codegen.h>
#include <nodetab.h>

extern ppo2cpp_lexer *lexer;

int headerflag=1;
int parsing_complete=1;
static int blockflag=0;

static void nested_block()
{
    fprintf(stderr,"Error: nested code block at #line %d %s.\n",
            lexer->getinputlineno(),
            lexer->getinputfspec());

    exit(1);
}

static void double_defined_symbol(parsenode *p)
{
    fprintf(stderr,"Error: double defined symbol at #line %d %s (%s).\n",
            p->lineno, //lexer->getinputlineno(),
            lexer->getinputfspec(),
            p->text);

    exit(1);
}


static void add_static(parsenode *p)
{
    if( headerflag )
    {
        if( nodetab_globstat->search(p)>=0 )
        {
            double_defined_symbol(p);
        }
        nodetab_globstat->add(p);
    }
    else
    {
        if( nodetab_locstat->search(p)>=0 || nodetab_local->search(p)>=0 )
        {
            double_defined_symbol(p);
        }
        nodetab_locstat->add(p);
    }
}


static void add_local(parsenode *p)
{
    if( nodetab_locstat->search(p)>=0 || nodetab_local->search(p)>=0 )
    {
        double_defined_symbol(p);
    }
    nodetab_local->add(p);
}


static void add_blkarg(parsenode *p)
{
    //Itt felmerült, hogy hibát jelezzek, ha a blockargumentum 
    //korábbról definiálva van locstat-ként, vagy local-ként. 
    //Ehelyett azt az elvet követem, hogy belső változók
    //mindig felüldefiniálhatják a külső változókat.
    //A régebbi változat is így működött.

    if( nodetab_blkarg->search(p)>=0 )
    {
        double_defined_symbol(p);
    }
    nodetab_blkarg->add(p);
}


static void symbol_search(parsenode *p)
{
    int x;

    if( blockflag && (x=nodetab_blkarg->search(p))>=0 )
    {
        p->cargo=(x+1)|SYM_BLKARG;
    }
    else if( (x=nodetab_local->search(p))>=0 )
    {
        p->cargo=x|(blockflag?SYM_BLKLOC:SYM_LOCAL);
    }
    else if( (x=nodetab_locstat->search(p))>=0 )
    {
        p->cargo=x|(blockflag?SYM_BLKSTAT:SYM_LOCSTAT);
    }
    else if( (x=nodetab_globstat->search(p))>=0 )
    {
        p->cargo=x|SYM_GLOBSTAT;
    }
    else
    {
        fprintf(stderr,"Error: undefined symbol at #line %d %s (%s).\n",
                p->lineno, //lexer->getinputlineno(),
                lexer->getinputfspec(),
                p->text);
        exit(1);
    }

    //p->print("search");
    return;
}

static void write_strtab(FILE *strtab, parsenode *pnode)
{
    const char *p=pnode->text;
    int len=strlen(p);
    if( len>3 )
    {
        int i;
        for(i=0; i<len; i++)
        {
            if( isalpha(p[i]) || ((int)p[i]>128) )
            {
                break;
            }
        }
        if( i<len )
        {
            char inp[512];
            sprintf(inp,"%s",lexer->getinputfspec());
            unsigned int k;
            for( k=0; k<sizeof(inp); k++ )
            {
                if( inp[k]==0 )
                {
                    break;
                }
                else if( inp[k]=='\"' )
                {
                    inp[k]=' ';
                }
            }
            fprintf(strtab,"%s<<\"\" from %s (%d)\n",p,inp,pnode->lineno);
        }
    }
}


#line 165 "./parser.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
/*  */
#define YYCODETYPE unsigned char
#define YYNOCODE 135
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE parsenode*
typedef union {
  ParseTOKENTYPE yy0;
  int yy269;
} YYMINORTYPE;
#define YYSTACKDEPTH 100
#define ParseARG_SDECL
#define ParseARG_PDECL
#define ParseARG_FETCH
#define ParseARG_STORE
#define YYNSTATE 311
#define YYNRULE 166
#define YYERRORSYMBOL 80
#define YYERRSYMDT yy269
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static YYACTIONTYPE yy_action[] = {
 /*     0 */    18,   28,   64,   66,   68,   70,   59,   58,   35,   31,
 /*    10 */     5,  137,   70,   59,   58,   35,   31,   27,    6,  166,
 /*    20 */   135,  133,   90,  284,  286,  102,  131,  129,  478,    1,
 /*    30 */   398,  289,   27,    8,   24,   14,  101,   90,  311,   17,
 /*    40 */   102,  235,  196,  239,  242,  179,  180,  204,  200,  205,
 /*    50 */    27,  215,  216,  218,    8,   90,  221,  225,  232,  141,
 /*    60 */   103,  118,   18,   28,   36,   37,   38,   39,   40,   41,
 /*    70 */    42,   43,  107,  137,  119,  103,  118,   13,  302,    9,
 /*    80 */   166,  301,  135,  133,  284,  286,    2,  112,  131,  129,
 /*    90 */   153,   19,  141,  103,  118,   19,   24,   27,  101,  113,
 /*   100 */   288,    4,   90,  116,  110,   97,  168,  179,  180,  214,
 /*   110 */   200,  205,   27,  215,  216,  218,  156,   90,  221,  225,
 /*   120 */    30,   12,   18,   16,   18,   28,   36,   37,   38,   39,
 /*   130 */    40,   41,   42,   43,  107,  137,   96,   19,   95,  320,
 /*   140 */   336,   27,    3,    4,  135,  133,   90,   27,  168,  106,
 /*   150 */   131,  129,   90,  114,   27,  248,    7,  262,   24,   90,
 /*   160 */   101,   17,   34,  164,  246,  115,  270,   10,   25,  179,
 /*   170 */   180,  399,  200,  205,  320,  215,  216,  218,  173,  161,
 /*   180 */   221,  225,  174,   20,   22,  105,   18,   28,   36,   37,
 /*   190 */    38,   39,   40,   41,   42,   43,  107,  137,   11,   32,
 /*   200 */    27,  151,   18,  390,  355,   90,  135,  133,   44,   27,
 /*   210 */   187,  256,  131,  129,   90,  278,   27,   47,   27,  111,
 /*   220 */    24,   90,  101,   90,   49,   15,   51,  283,   33,    8,
 /*   230 */   349,  179,  180,  400,  200,  205,   27,  215,  216,  218,
 /*   240 */   259,   90,  221,  225,   53,    8,  175,  260,   18,   28,
 /*   250 */    36,   37,   38,   39,   40,   41,   42,   43,  107,  137,
 /*   260 */   302,  145,   27,  309,  324,   35,   31,   90,  135,  133,
 /*   270 */    55,   29,    8,    8,  131,  129,    8,   19,   27,   21,
 /*   280 */    27,  158,   24,   90,  101,   90,   57,  192,   61,  337,
 /*   290 */   356,  195,  253,  179,  180,  391,  200,  205,   27,  215,
 /*   300 */   216,  218,   18,   90,  221,  225,   63,  335,  325,  341,
 /*   310 */    18,   28,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   320 */   107,  137,  170,  163,   27,  279,   18,   18,   23,   90,
 /*   330 */   135,  133,   65,   27,  305,   26,  131,  129,   90,  226,
 /*   340 */    27,   67,   27,  184,   24,   90,  101,   90,   69,  186,
 /*   350 */    71,  264,  263,   19,    8,  179,  180,   91,  200,  205,
 /*   360 */   245,  215,  216,  218,   27,  303,  221,  225,  365,   90,
 /*   370 */   265,  366,   73,  272,   36,   37,   38,   39,   40,   41,
 /*   380 */    42,   43,  107,  402,  150,  227,   46,   48,   50,   52,
 /*   390 */    54,   56,   86,   88,  271,  277,   72,   76,   78,   74,
 /*   400 */    80,   82,   84,   60,   62,   64,   66,   68,   70,   59,
 /*   410 */    58,   35,   31,  124,   46,   48,   50,   52,   54,   56,
 /*   420 */    86,   88,  290,  410,   72,   76,   78,   74,   80,   82,
 /*   430 */    84,   60,   62,   64,   66,   68,   70,   59,   58,   35,
 /*   440 */    31,  292,  310,   94,   27,  233,  296,  408,  415,   90,
 /*   450 */   343,  100,   75,   46,   48,   50,   52,   54,   56,   86,
 /*   460 */    88,  104,  418,   72,   76,   78,   74,   80,   82,   84,
 /*   470 */    60,   62,   64,   66,   68,   70,   59,   58,   35,   31,
 /*   480 */    46,   48,   50,   52,   54,   56,   86,   88,  294,  263,
 /*   490 */    72,   76,   78,   74,   80,   82,   84,   60,   62,   64,
 /*   500 */    66,   68,   70,   59,   58,   35,   31,  420,   46,   48,
 /*   510 */    50,   52,   54,   56,   86,   88,  407,  358,   72,   76,
 /*   520 */    78,   74,   80,   82,   84,   60,   62,   64,   66,   68,
 /*   530 */    70,   59,   58,   35,   31,   60,   62,   64,   66,   68,
 /*   540 */    70,   59,   58,   35,   31,   27,   27,   18,  357,  265,
 /*   550 */    90,   90,   45,   77,   79,  295,  281,  117,  417,  124,
 /*   560 */    46,   48,   50,   52,   54,   56,   86,   88,  282,   19,
 /*   570 */    72,   76,   78,   74,   80,   82,   84,   60,   62,   64,
 /*   580 */    66,   68,   70,   59,   58,   35,   31,  126,   46,   48,
 /*   590 */    50,   52,   54,   56,   86,   88,  120,  122,   72,   76,
 /*   600 */    78,   74,   80,   82,   84,   60,   62,   64,   66,   68,
 /*   610 */    70,   59,   58,   35,   31,   46,   48,   50,   52,   54,
 /*   620 */    56,   86,   88,  140,  142,   72,   76,   78,   74,   80,
 /*   630 */    82,   84,   60,   62,   64,   66,   68,   70,   59,   58,
 /*   640 */    35,   31,   27,   27,  144,  147,  148,   90,   90,  128,
 /*   650 */    81,   83,   18,  152,  375,  154,  155,   46,   48,   50,
 /*   660 */    52,   54,   56,   86,   88,  157,  159,   72,   76,   78,
 /*   670 */    74,   80,   82,   84,   60,   62,   64,   66,   68,   70,
 /*   680 */    59,   58,   35,   31,   18,  162,    6,   46,   48,   50,
 /*   690 */    52,   54,   56,   86,   88,  160,  338,   72,   76,   78,
 /*   700 */    74,   80,   82,   84,   60,   62,   64,   66,   68,   70,
 /*   710 */    59,   58,   35,   31,   46,   48,   50,   52,   54,   56,
 /*   720 */    86,   88,  165,  167,   72,   76,   78,   74,   80,   82,
 /*   730 */    84,   60,   62,   64,   66,   68,   70,   59,   58,   35,
 /*   740 */    31,   88,  280,    8,   72,   76,   78,   74,   80,   82,
 /*   750 */    84,   60,   62,   64,   66,   68,   70,   59,   58,   35,
 /*   760 */    31,  209,    8,  169,  172,  171,  382,  178,  374,   46,
 /*   770 */    48,   50,   52,   54,   56,   86,   88,  351,  347,   72,
 /*   780 */    76,   78,   74,   80,   82,   84,   60,   62,   64,   66,
 /*   790 */    68,   70,   59,   58,   35,   31,  403,  348,  183,   46,
 /*   800 */    48,   50,   52,   54,   56,   86,   88,  185,  376,   72,
 /*   810 */    76,   78,   74,   80,   82,   84,   60,   62,   64,   66,
 /*   820 */    68,   70,   59,   58,   35,   31,   46,   48,   50,   52,
 /*   830 */    54,   56,   86,   88,  188,  191,   72,   76,   78,   74,
 /*   840 */    80,   82,   84,   60,   62,   64,   66,   68,   70,   59,
 /*   850 */    58,   35,   31,   28,  409,  189,  194,  193,  377,   27,
 /*   860 */    27,   27,  401,  137,   90,   90,   90,   85,   87,   89,
 /*   870 */   198,  199,  135,  133,   98,   27,   27,   27,  131,  129,
 /*   880 */    90,   90,   90,  123,  125,  127,   24,  202,  101,  203,
 /*   890 */    72,   76,   78,   74,   80,   82,   84,   60,   62,   64,
 /*   900 */    66,   68,   70,   59,   58,   35,   31,  378,  121,  206,
 /*   910 */   213,  207,  212,  211,  379,   99,   36,   37,   38,   39,
 /*   920 */    40,   41,   42,   43,  107,  109,  404,   28,  409,  380,
 /*   930 */    27,  381,  219,  220,   27,   90,  223,  137,   97,   90,
 /*   940 */   224,  229,   97,  230,  237,  238,  135,  133,   98,   27,
 /*   950 */    27,  241,  131,  129,   90,   90,   27,  130,  132,  267,
 /*   960 */    24,   90,  101,  404,  134,  240,  244,  247,  143,   92,
 /*   970 */    93,  108,  139,   92,   93,  108,  250,  243,  252,   27,
 /*   980 */    27,  249,  121,  254,   90,   90,  255,  136,  138,   99,
 /*   990 */    36,   37,   38,   39,   40,   41,   42,   43,  107,   28,
 /*  1000 */   257,  261,  266,  274,  258,   27,   27,   27,  268,  137,
 /*  1010 */    90,   90,   90,   97,  149,  181,  273,  275,  135,  133,
 /*  1020 */    98,  350,  352,   27,  131,  129,  285,  287,   90,  291,
 /*  1030 */   297,  197,   24,  298,  101,  299,  293,  300,  304,  306,
 /*  1040 */   308,  307,   27,  146,   92,   93,  108,   90,  302,  302,
 /*  1050 */   201,   27,   27,  302,  121,  302,   90,   90,  302,  208,
 /*  1060 */   210,   99,   36,   37,   38,   39,   40,   41,   42,   43,
 /*  1070 */   107,   28,  419,  302,   27,  302,  302,  302,   27,   90,
 /*  1080 */    27,  137,  222,   90,   27,   90,  228,  302,  234,   90,
 /*  1090 */   135,  133,  217,  302,   27,   27,  131,  129,  302,   90,
 /*  1100 */    90,  176,  236,  269,   24,  302,  101,  414,   27,  302,
 /*  1110 */   302,  177,  182,   90,  302,  190,  276,  302,  302,  302,
 /*  1120 */   302,  302,  302,  302,  302,  302,  121,  302,  302,  302,
 /*  1130 */   302,  302,  302,  302,   36,   37,   38,   39,   40,   41,
 /*  1140 */    42,   43,  107,   28,  419,  302,  302,  302,  302,  302,
 /*  1150 */   302,  302,  302,  137,  302,  302,  302,  302,  302,  302,
 /*  1160 */   302,  302,  135,  133,  302,  302,  302,  302,  131,  129,
 /*  1170 */   302,  302,  302,  302,  302,  302,   24,  302,  101,  302,
 /*  1180 */   302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
 /*  1190 */   302,  302,  302,  302,  302,  302,  302,  302,  121,  302,
 /*  1200 */   302,  302,  302,  302,  302,  302,   36,   37,   38,   39,
 /*  1210 */    40,   41,   42,   43,  107,  302,  414,   18,   28,  302,
 /*  1220 */   302,  302,  302,  302,  302,  302,  302,  302,  137,  302,
 /*  1230 */   302,  302,  302,  302,  302,  251,  302,  135,  133,  302,
 /*  1240 */   302,  302,  302,  131,  129,  302,  302,  302,  302,  302,
 /*  1250 */   302,   24,  302,  101,  302,  302,  302,  302,  302,  302,
 /*  1260 */   302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
 /*  1270 */   302,  302,  302,  121,  302,  302,  302,  302,  302,  302,
 /*  1280 */   302,   36,   37,   38,   39,   40,   41,   42,   43,  107,
 /*  1290 */   342,   28,  302,  302,  302,  302,  302,  302,  302,  302,
 /*  1300 */   302,  137,  302,  302,  302,  302,  302,  302,  302,  302,
 /*  1310 */   135,  133,  302,  302,  302,  302,  131,  129,  302,  302,
 /*  1320 */   302,  302,  302,  302,   24,  302,  101,  302,  302,  302,
 /*  1330 */   302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
 /*  1340 */   302,  302,  302,  302,  302,  302,  121,  302,  302,  302,
 /*  1350 */   302,  302,  302,  302,   36,   37,   38,   39,   40,   41,
 /*  1360 */    42,   43,  107,   28,  302,  302,  302,  302,  302,  302,
 /*  1370 */   302,  302,  302,  137,  302,  302,  302,  302,  302,  302,
 /*  1380 */   302,  302,  135,  133,  302,  302,  302,  302,  131,  129,
 /*  1390 */   302,  302,  302,  302,  302,  302,   24,  302,  101,  302,
 /*  1400 */   302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
 /*  1410 */   302,  302,  302,  302,  302,  302,  302,  302,  121,  302,
 /*  1420 */   302,  302,  302,  302,  302,  302,   36,   37,   38,   39,
 /*  1430 */    40,   41,   42,   43,  107,   28,  302,  302,  302,  302,
 /*  1440 */   302,  302,  302,  302,  302,  137,  302,  302,  302,  302,
 /*  1450 */   302,  302,  302,  302,  135,  133,  302,  302,  302,  302,
 /*  1460 */   131,  129,  302,  302,  302,  302,  302,  302,   24,  302,
 /*  1470 */   231,  302,  302,  302,  302,  302,  302,  302,  302,  302,
 /*  1480 */   302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
 /*  1490 */   121,  302,  302,  302,  302,  302,  302,  302,   36,   37,
 /*  1500 */    38,   39,   40,   41,   42,   43,  107,
};
static YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,    5,   26,   27,   28,   29,   30,   31,   32,   33,
 /*    10 */    40,   15,   29,   30,   31,   32,   33,   88,   38,   42,
 /*    20 */    24,   25,   93,   46,   47,   96,   30,   31,   81,   82,
 /*    30 */    51,   84,   88,    5,   38,  101,   40,   93,    0,  105,
 /*    40 */    96,   62,   63,   64,   65,   49,   50,   51,   52,   53,
 /*    50 */    88,   55,   56,   57,    5,   93,   60,   61,   96,  130,
 /*    60 */   131,  132,    4,    5,   68,   69,   70,   71,   72,   73,
 /*    70 */    74,   75,   76,   15,  130,  131,  132,   91,   88,   38,
 /*    80 */    42,   91,   24,   25,   46,   47,   83,   26,   30,   31,
 /*    90 */    41,  105,  130,  131,  132,  105,   38,   88,   40,   38,
 /*   100 */    97,   98,   93,  108,  109,   96,  103,   49,   50,   51,
 /*   110 */    52,   53,   88,   55,   56,   57,   67,   93,   60,   61,
 /*   120 */    96,  100,    4,   91,    4,    5,   68,   69,   70,   71,
 /*   130 */    72,   73,   74,   75,   76,   15,  127,  105,  129,    5,
 /*   140 */     4,   88,   97,   98,   24,   25,   93,   88,  103,   96,
 /*   150 */    30,   31,   93,   26,   88,   96,   88,   39,   38,   93,
 /*   160 */    40,  105,   96,    6,  105,   38,   48,   99,   34,   49,
 /*   170 */    50,   51,   52,   53,   40,   55,   56,   57,  106,   43,
 /*   180 */    60,   61,  110,   44,   45,  132,    4,    5,   68,   69,
 /*   190 */    70,   71,   72,   73,   74,   75,   76,   15,   41,   38,
 /*   200 */    88,   40,    4,   51,   77,   93,   24,   25,   96,   88,
 /*   210 */    58,   59,   30,   31,   93,   26,   88,   96,   88,    6,
 /*   220 */    38,   93,   40,   93,   96,  102,   96,   38,    7,    5,
 /*   230 */    41,   49,   50,   51,   52,   53,   88,   55,   56,   57,
 /*   240 */   105,   93,   60,   61,   96,    5,  111,  112,    4,    5,
 /*   250 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   15,
 /*   260 */    88,   40,   88,   91,   40,   32,   33,   93,   24,   25,
 /*   270 */    96,   88,    5,    5,   30,   31,    5,  105,   88,   38,
 /*   280 */    88,   41,   38,   93,   40,   93,   96,  121,   96,    4,
 /*   290 */    77,  125,   21,   49,   50,   51,   52,   53,   88,   55,
 /*   300 */    56,   57,    4,   93,   60,   61,   96,   40,   40,    4,
 /*   310 */     4,    5,   68,   69,   70,   71,   72,   73,   74,   75,
 /*   320 */    76,   15,  104,   38,   88,  107,    4,    4,   38,   93,
 /*   330 */    24,   25,   96,   88,   36,   38,   30,   31,   93,   91,
 /*   340 */    88,   96,   88,  118,   38,   93,   40,   93,   96,  124,
 /*   350 */    96,   94,   95,  105,    5,   49,   50,   40,   52,   53,
 /*   360 */    38,   55,   56,   57,   88,   16,   60,   61,    4,   93,
 /*   370 */     6,    4,   96,    6,   68,   69,   70,   71,   72,   73,
 /*   380 */    74,   75,   76,    4,  133,   62,    7,    8,    9,   10,
 /*   390 */    11,   12,   13,   14,  113,  114,   17,   18,   19,   20,
 /*   400 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   410 */    31,   32,   33,    6,    7,    8,    9,   10,   11,   12,
 /*   420 */    13,   14,   85,    6,   17,   18,   19,   20,   21,   22,
 /*   430 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   440 */    33,   87,  105,    6,   88,   66,   92,    6,   41,   93,
 /*   450 */     4,   38,   96,    7,    8,    9,   10,   11,   12,   13,
 /*   460 */    14,    6,    6,   17,   18,   19,   20,   21,   22,   23,
 /*   470 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*   480 */     7,    8,    9,   10,   11,   12,   13,   14,   94,   95,
 /*   490 */    17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   500 */    27,   28,   29,   30,   31,   32,   33,    6,    7,    8,
 /*   510 */     9,   10,   11,   12,   13,   14,    6,   77,   17,   18,
 /*   520 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   530 */    29,   30,   31,   32,   33,   24,   25,   26,   27,   28,
 /*   540 */    29,   30,   31,   32,   33,   88,   88,    4,   77,    6,
 /*   550 */    93,   93,   79,   96,   96,   91,   26,   77,    6,    6,
 /*   560 */     7,    8,    9,   10,   11,   12,   13,   14,   38,  105,
 /*   570 */    17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   580 */    27,   28,   29,   30,   31,   32,   33,    6,    7,    8,
 /*   590 */     9,   10,   11,   12,   13,   14,   78,   40,   17,   18,
 /*   600 */    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
 /*   610 */    29,   30,   31,   32,   33,    7,    8,    9,   10,   11,
 /*   620 */    12,   13,   14,   78,   41,   17,   18,   19,   20,   21,
 /*   630 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*   640 */    32,   33,   88,   88,   41,   41,    7,   93,   93,   41,
 /*   650 */    96,   96,    4,   88,    4,   38,  133,    7,    8,    9,
 /*   660 */    10,   11,   12,   13,   14,   88,   38,   17,   18,   19,
 /*   670 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   680 */    30,   31,   32,   33,    4,   33,   38,    7,    8,    9,
 /*   690 */    10,   11,   12,   13,   14,  133,    4,   17,   18,   19,
 /*   700 */    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
 /*   710 */    30,   31,   32,   33,    7,    8,    9,   10,   11,   12,
 /*   720 */    13,   14,   88,   88,   17,   18,   19,   20,   21,   22,
 /*   730 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   740 */    33,   14,    6,    5,   17,   18,   19,   20,   21,   22,
 /*   750 */    23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
 /*   760 */    33,   54,    5,   40,  105,   41,    4,  105,    4,    7,
 /*   770 */     8,    9,   10,   11,   12,   13,   14,   41,   40,   17,
 /*   780 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   790 */    28,   29,   30,   31,   32,   33,    4,   40,  117,    7,
 /*   800 */     8,    9,   10,   11,   12,   13,   14,   51,    4,   17,
 /*   810 */    18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
 /*   820 */    28,   29,   30,   31,   32,   33,    7,    8,    9,   10,
 /*   830 */    11,   12,   13,   14,  105,  120,   17,   18,   19,   20,
 /*   840 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   850 */    31,   32,   33,    5,    6,  111,   51,  122,    4,   88,
 /*   860 */    88,   88,    4,   15,   93,   93,   93,   96,   96,   96,
 /*   870 */   105,  111,   24,   25,   26,   88,   88,   88,   30,   31,
 /*   880 */    93,   93,   93,   96,   96,   96,   38,  105,   40,  111,
 /*   890 */    17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
 /*   900 */    27,   28,   29,   30,   31,   32,   33,    4,   60,   38,
 /*   910 */   111,    7,  105,  123,    4,   67,   68,   69,   70,   71,
 /*   920 */    72,   73,   74,   75,   76,   77,   78,    5,    6,    4,
 /*   930 */    88,    4,  105,  111,   88,   93,  105,   15,   96,   93,
 /*   940 */   111,  105,   96,  111,  105,  111,   24,   25,   26,   88,
 /*   950 */    88,  111,   30,   31,   93,   93,   88,   96,   96,   38,
 /*   960 */    38,   93,   40,   41,   96,  105,  111,  111,  126,  127,
 /*   970 */   128,  129,  126,  127,  128,  129,  111,  105,   88,   88,
 /*   980 */    88,  105,   60,  105,   93,   93,  111,   96,   96,   67,
 /*   990 */    68,   69,   70,   71,   72,   73,   74,   75,   76,    5,
 /*  1000 */   105,  105,   95,   38,  111,   88,   88,   88,    7,   15,
 /*  1010 */    93,   93,   93,   96,   96,   96,  114,    7,   24,   25,
 /*  1020 */    26,   41,   41,   88,   30,   31,   88,   88,   93,   86,
 /*  1030 */    37,   96,   38,   88,   40,   89,   39,   90,   38,   88,
 /*  1040 */    90,   89,   88,  126,  127,  128,  129,   93,  134,  134,
 /*  1050 */    96,   88,   88,  134,   60,  134,   93,   93,  134,   96,
 /*  1060 */    96,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  1070 */    76,    5,    6,  134,   88,  134,  134,  134,   88,   93,
 /*  1080 */    88,   15,   96,   93,   88,   93,   96,  134,   96,   93,
 /*  1090 */    24,   25,   96,  134,   88,   88,   30,   31,  134,   93,
 /*  1100 */    93,  105,   96,   96,   38,  134,   40,   41,   88,  134,
 /*  1110 */   134,  115,  116,   93,  134,  119,   96,  134,  134,  134,
 /*  1120 */   134,  134,  134,  134,  134,  134,   60,  134,  134,  134,
 /*  1130 */   134,  134,  134,  134,   68,   69,   70,   71,   72,   73,
 /*  1140 */    74,   75,   76,    5,    6,  134,  134,  134,  134,  134,
 /*  1150 */   134,  134,  134,   15,  134,  134,  134,  134,  134,  134,
 /*  1160 */   134,  134,   24,   25,  134,  134,  134,  134,   30,   31,
 /*  1170 */   134,  134,  134,  134,  134,  134,   38,  134,   40,  134,
 /*  1180 */   134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  1190 */   134,  134,  134,  134,  134,  134,  134,  134,   60,  134,
 /*  1200 */   134,  134,  134,  134,  134,  134,   68,   69,   70,   71,
 /*  1210 */    72,   73,   74,   75,   76,  134,   78,    4,    5,  134,
 /*  1220 */   134,  134,  134,  134,  134,  134,  134,  134,   15,  134,
 /*  1230 */   134,  134,  134,  134,  134,   22,  134,   24,   25,  134,
 /*  1240 */   134,  134,  134,   30,   31,  134,  134,  134,  134,  134,
 /*  1250 */   134,   38,  134,   40,  134,  134,  134,  134,  134,  134,
 /*  1260 */   134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  1270 */   134,  134,  134,   60,  134,  134,  134,  134,  134,  134,
 /*  1280 */   134,   68,   69,   70,   71,   72,   73,   74,   75,   76,
 /*  1290 */     4,    5,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  1300 */   134,   15,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  1310 */    24,   25,  134,  134,  134,  134,   30,   31,  134,  134,
 /*  1320 */   134,  134,  134,  134,   38,  134,   40,  134,  134,  134,
 /*  1330 */   134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  1340 */   134,  134,  134,  134,  134,  134,   60,  134,  134,  134,
 /*  1350 */   134,  134,  134,  134,   68,   69,   70,   71,   72,   73,
 /*  1360 */    74,   75,   76,    5,  134,  134,  134,  134,  134,  134,
 /*  1370 */   134,  134,  134,   15,  134,  134,  134,  134,  134,  134,
 /*  1380 */   134,  134,   24,   25,  134,  134,  134,  134,   30,   31,
 /*  1390 */   134,  134,  134,  134,  134,  134,   38,  134,   40,  134,
 /*  1400 */   134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  1410 */   134,  134,  134,  134,  134,  134,  134,  134,   60,  134,
 /*  1420 */   134,  134,  134,  134,  134,  134,   68,   69,   70,   71,
 /*  1430 */    72,   73,   74,   75,   76,    5,  134,  134,  134,  134,
 /*  1440 */   134,  134,  134,  134,  134,   15,  134,  134,  134,  134,
 /*  1450 */   134,  134,  134,  134,   24,   25,  134,  134,  134,  134,
 /*  1460 */    30,   31,  134,  134,  134,  134,  134,  134,   38,  134,
 /*  1470 */    40,  134,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  1480 */   134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
 /*  1490 */    60,  134,  134,  134,  134,  134,  134,  134,   68,   69,
 /*  1500 */    70,   71,   72,   73,   74,   75,   76,
};
#define YY_SHIFT_USE_DFLT (-31)
static short yy_shift_ofst[] = {
 /*     0 */   -31,  -23,   38,  -31,  -30,  -20,  -31,   28,   41,  -31,
 /*    10 */   157,  136,  198,  198,  139,  198,  198,  -31,  -31,  -31,
 /*    20 */   241,  305,  290, 1286,  134,  297,  -31,  224,  -20,  268,
 /*    30 */   446,  161,  221, 1358,  819, 1358,  -31,  -31,  -31,  -31,
 /*    40 */   -31,  -31,  -31,  -31,  473,  -31, 1358,  819, 1358,  819,
 /*    50 */  1358,  819, 1358,  819, 1358,  819, 1358,  819,  -31,  -31,
 /*    60 */  1358,  -24, 1358,  -24, 1358,  -17, 1358,  -17, 1358,  -17,
 /*    70 */  1358,  -17, 1358,  511, 1358,  511, 1358,  511, 1358,  511,
 /*    80 */  1358,  511, 1358,  511, 1358,  511, 1358,  727, 1358,  873,
 /*    90 */   317,  922,  417,  437,  994,  441,  -31,  819,  -31,  413,
 /*   100 */   -31, 1066,  501,  455, 1358,  456,  819,  848,  510,  127,
 /*   110 */   213,   61,  440,  -31,  471,  -31,  480, 1138,  552,  518,
 /*   120 */   -31,  557, 1358,  553, 1358,  581, 1358,  608,  -31, 1358,
 /*   130 */   233, 1358,  233, 1358,  233, 1358,  233, 1358,  873,  545,
 /*   140 */   -31,  583,  -31,  603,  -31,  922,  604,  639, 1358,  819,
 /*   150 */   -31,  -20,   49,  617,  221,  -31,  -20,  240,  628,  221,
 /*   160 */   -31,  652,  285,  692,  -20,   28,  -20,  267,  723,  189,
 /*   170 */   724,  198,  -31,  -31,  118,  306,  -31,  198,  -31,  764,
 /*   180 */  1358,  650,  -31,  152,  756,  804,  -31,  322,  -31,  306,
 /*   190 */   -31,  -21,  805,  854,  858,  -31, 1358,  680,  -31,  306,
 /*   200 */  1358,  680,  -31,   -4,  903,  871,  904, 1358,  707, 1358,
 /*   210 */   379,  198,  -31,   58,  910,  925,  927,  762,  198,  -31,
 /*   220 */   306, 1430,  680,  -31,  306,  198,  323, 1358,  680,  -31,
 /*   230 */   306, 1066,  407, 1358,  792, 1358,  680,  -31,  306,  198,
 /*   240 */   -31,  120,  198,  -31,  182, 1213,  -31,  306,  680,  -31,
 /*   250 */   306,  -20,  271,  198,  -31,  306,  198,  -31,  244,  -31,
 /*   260 */   198,  -31,  921,  -31,  364,  921,  -31, 1001, 1358,  819,
 /*   270 */   965,  367,  965,  -31, 1010, 1358,  819,  -31,  980,  736,
 /*   280 */   530,  981,  -31,  -31,  -20,  738,  -20,  757,  -31,  298,
 /*   290 */   -31,  993,  997,  921,  543,  198,  -31,  -20,  349,  -31,
 /*   300 */   648,  198,   28, 1000,  -31,  -20,  349,  -31,  648,  198,
 /*   310 */   -31,
};
#define YY_REDUCE_USE_DFLT (-72)
static short yy_reduce_ofst[] = {
 /*     0 */   -53,    3,   45,  -72,  -72,   68,  -72,  -72,  -72,  -72,
 /*    10 */   -72,   21,  -14,  -66,  123,   32,   56,  -72,  -72,  -72,
 /*    20 */   -72,  -72,  -72,   24,  -72,  -72,  -72,  -72,  183,  -72,
 /*    30 */   -72,  -72,  251,   66,  -72,  112,  -72,  -72,  -72,  -72,
 /*    40 */   -72,  -72,  -72,  -72,  -72,  -72,  121,  -72,  128,  -72,
 /*    50 */   130,  -72,  148,  -72,  174,  -72,  190,  -72,  -72,  -72,
 /*    60 */   192,  -72,  210,  -72,  236,  -72,  245,  -72,  252,  -72,
 /*    70 */   254,  -72,  276,  -72,  356,  -72,  457,  -72,  458,  -72,
 /*    80 */   554,  -72,  555,  -72,  771,  -72,  772,  -72,  773,  -72,
 /*    90 */   -72,  842,  -72,  -72,    9,  -72,  -72,  -72,  -72,  -72,
 /*   100 */   -72,  -71,  -72,  -72,   53,  -72,  -72,  846,  -72,   -5,
 /*   110 */   -72,  -72,  -72,  -72,  -72,  -72,  -72,  -56,  -72,  -72,
 /*   120 */   -72,  -72,  787,  -72,  788,  -72,  789,  -72,  -72,  861,
 /*   130 */   -72,  862,  -72,  868,  -72,  891,  -72,  892,  -72,  -72,
 /*   140 */   -72,  -72,  -72,  -72,  -72,  917,  -72,  -72,  918,  -72,
 /*   150 */   -72,  565,  -72,  -72,  523,  -72,  577,  -72,  -72,  562,
 /*   160 */   -72,  -72,  -72,  -72,  634,  -72,  635,  -72,  -72,  218,
 /*   170 */   -72,  659,   72,  -72,  135,  996,  -72,  662,  -72,  -72,
 /*   180 */   919,  -72,  681,  225,  -72,  -72,  -72,  729,  744,  996,
 /*   190 */   715,  166,  735,  -72,  -72,  -72,  935,  765,  760,  996,
 /*   200 */   954,  782,  778,  996,  -72,  -72,  -72,  963,  -72,  964,
 /*   210 */   790,  807,  799,  996,  -72,  -72,  -72,  -72,  827,  822,
 /*   220 */   996,  986,  831,  829,  996,  248,   56,  990,  836,  832,
 /*   230 */   996,  -38,  -72,  992,  -72, 1006,  839,  834,  996,  860,
 /*   240 */   840,  996,  872,  855,  996,   59,  856,  996,  876,  865,
 /*   250 */   996,  890,  -72,  878,  875,  996,  895,  893,  996,  -72,
 /*   260 */   896,  -72,  257,  -72,  -72,  907,  -72,  -72, 1007,  -72,
 /*   270 */   281,  -72,  902,  -72,  -72, 1020,  -72,  -72,  -72,  -72,
 /*   280 */   -72,  -72,  -72,  -72,  938,  -72,  939,  -72,  -72,  337,
 /*   290 */   943,  354,  -72,  394,  464,   56,  -72,  945,  946,  947,
 /*   300 */   -10,   56,  -72,  -72,  -72,  951,  952,  950,  172,   56,
 /*   310 */   -72,
};
static YYACTIONTYPE yy_default[] = {
 /*     0 */   427,  477,  477,  333,  477,  477,  320,  344,  477,  321,
 /*    10 */   477,  477,  477,  339,  334,  477,  340,  426,  429,  425,
 /*    20 */   477,  477,  477,  477,  438,  477,  439,  477,  477,  477,
 /*    30 */   477,  477,  421,  477,  422,  477,  430,  431,  432,  433,
 /*    40 */   434,  435,  436,  437,  477,  448,  477,  449,  477,  450,
 /*    50 */   477,  451,  477,  452,  477,  453,  477,  454,  457,  458,
 /*    60 */   477,  459,  477,  460,  477,  461,  477,  462,  477,  463,
 /*    70 */   477,  464,  477,  467,  477,  468,  477,  469,  477,  470,
 /*    80 */   477,  471,  477,  472,  477,  473,  477,  474,  477,  475,
 /*    90 */   477,  477,  405,  477,  409,  406,  410,  411,  412,  477,
 /*   100 */   413,  477,  415,  477,  419,  416,  420,  477,  477,  477,
 /*   110 */   477,  477,  477,  360,  477,  359,  477,  477,  477,  477,
 /*   120 */   445,  477,  477,  477,  477,  477,  477,  477,  446,  477,
 /*   130 */   455,  477,  456,  477,  465,  477,  466,  477,  476,  477,
 /*   140 */   447,  477,  444,  477,  443,  477,  477,  423,  477,  424,
 /*   150 */   440,  477,  477,  477,  421,  441,  477,  477,  477,  421,
 /*   160 */   442,  477,  477,  477,  477,  345,  477,  477,  477,  477,
 /*   170 */   477,  477,  362,  346,  371,  361,  372,  477,  373,  477,
 /*   180 */   477,  477,  384,  477,  477,  477,  385,  477,  371,  386,
 /*   190 */   394,  477,  477,  477,  477,  395,  477,  477,  371,  396,
 /*   200 */   477,  477,  371,  477,  477,  477,  477,  477,  477,  477,
 /*   210 */   477,  477,  371,  477,  477,  477,  477,  477,  477,  371,
 /*   220 */   383,  477,  477,  371,  392,  477,  477,  477,  477,  371,
 /*   230 */   393,  477,  477,  477,  477,  477,  477,  371,  397,  477,
 /*   240 */   371,  477,  477,  371,  477,  477,  371,  387,  477,  371,
 /*   250 */   388,  477,  477,  477,  371,  389,  477,  371,  477,  363,
 /*   260 */   477,  364,  477,  328,  477,  477,  329,  330,  477,  331,
 /*   270 */   477,  477,  477,  368,  369,  477,  370,  367,  477,  477,
 /*   280 */   477,  477,  354,  353,  477,  477,  477,  477,  332,  313,
 /*   290 */   315,  326,  312,  477,  477,  327,  316,  477,  318,  322,
 /*   300 */   477,  317,  323,  477,  319,  477,  318,  322,  477,  314,
 /*   310 */   428,
};
#define YY_SZ_ACTTAB (sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammer, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  int stateno;       /* The state-number */
  int major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
  YYMINORTYPE minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static const char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, const char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  ParseTrace(TraceFILE, (const char*) zTracePrompt);
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *yyTokenName[] = { 
  "$",             "LOWPRECEDENCE",  "UNEXPECTEDCHAR",  "INVALIDENCODING",
  "NL",            "DOT",           "COMMA",         "ASSIGN",      
  "ADDASS",        "SUBASS",        "MULASS",        "DIVASS",      
  "MODASS",        "OR",            "AND",           "NOT",         
  "EQ",            "EQEQ",          "GTEQ",          "LTEQ",        
  "EXEQ",          "GT",            "LT",            "DOLLAR",      
  "PLUS",          "MINUS",         "STAR",          "SLASH",       
  "MODULO",        "DBSTAR",        "DBPLUS",        "DBMINUS",     
  "LBRACKET",      "COLON",         "ARROW",         "HIGHPRECEDENCE",
  "NAMESPACE",     "USING",         "SYMBOL",        "STATIC",      
  "LPAR",          "RPAR",          "CLASS",         "NEW",         
  "ATTRIB",        "METHOD",        "FUNCTION",      "STFUNCTION",  
  "LOCAL",         "QUIT",          "RETURN",        "END",         
  "WHILE",         "FOR",           "TO",            "LOOP",        
  "EXIT",          "BEGSEQ",        "RECOVER",       "FINALLY",     
  "IF",            "DOCASE",        "CASE",          "ELSEIF",      
  "ELSE",          "OTHERWISE",     "STEP",          "AT",          
  "NUMBER",        "STRING",        "NLSTEXT",       "BINARYX",     
  "BINARYA",       "TRUE",          "FALSE",         "NIL",         
  "LBRACE",        "PIPE",          "RBRACE",        "RBRACKET",    
  "error",         "prg",           "header",        "lfunction",   
  "lnewline0",     "namespace",     "lusing",        "lstatdefin",  
  "dotsymbol",     "nsalias",       "ldotsymbol",    "lnewline",    
  "using",         "ddotsymbol",    "statdefin",     "statdef",     
  "expr",          "function",      "classid",       "ldsym",       
  "newspec",       "lslot",         "slot",          "funcid",      
  "argument",      "newline",       "body",          "larg",        
  "bargument",     "lbarg",         "llocdefin",     "lstatement",  
  "locdline",      "locdefin",      "locdef",        "statement",   
  "begseq",        "lrecov",        "finally",       "if",          
  "lelseif",       "else",          "endif",         "forstep",     
  "recov",         "elseif",        "lfuncpar",      "parexpr",     
  "lfuncpar0",     "parexpr0",      "lexpr",         "lexpr0",      
  "expr0",         "msgpar",      
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *yyRuleName[] = {
 /*   0 */ "prg ::= header lfunction",
 /*   1 */ "header ::= lnewline0 namespace lusing lstatdefin",
 /*   2 */ "namespace ::=",
 /*   3 */ "namespace ::= NAMESPACE dotsymbol nsalias ldotsymbol lnewline",
 /*   4 */ "lusing ::=",
 /*   5 */ "lusing ::= lusing using",
 /*   6 */ "using ::= USING dotsymbol nsalias ldotsymbol lnewline",
 /*   7 */ "nsalias ::=",
 /*   8 */ "nsalias ::= EQ SYMBOL",
 /*   9 */ "dotsymbol ::= SYMBOL",
 /*  10 */ "dotsymbol ::= dotsymbol DOT SYMBOL",
 /*  11 */ "ldotsymbol ::=",
 /*  12 */ "ldotsymbol ::= ldotsymbol dotsymbol",
 /*  13 */ "ddotsymbol ::= dotsymbol",
 /*  14 */ "ddotsymbol ::= DOT dotsymbol",
 /*  15 */ "lstatdefin ::=",
 /*  16 */ "lstatdefin ::= lstatdefin STATIC statdefin lnewline",
 /*  17 */ "statdefin ::= statdef",
 /*  18 */ "statdefin ::= statdefin COMMA statdef",
 /*  19 */ "statdef ::= SYMBOL",
 /*  20 */ "statdef ::= SYMBOL ASSIGN expr",
 /*  21 */ "lfunction ::= function",
 /*  22 */ "lfunction ::= lfunction function",
 /*  23 */ "function ::= classid LPAR ldsym RPAR newspec lnewline lslot",
 /*  24 */ "classid ::= CLASS dotsymbol",
 /*  25 */ "newspec ::=",
 /*  26 */ "newspec ::= NEW COLON",
 /*  27 */ "newspec ::= NEW COLON SYMBOL",
 /*  28 */ "lslot ::=",
 /*  29 */ "lslot ::= lslot slot lnewline",
 /*  30 */ "slot ::= ATTRIB SYMBOL",
 /*  31 */ "slot ::= METHOD SYMBOL",
 /*  32 */ "slot ::= METHOD SYMBOL expr",
 /*  33 */ "ldsym ::= dotsymbol",
 /*  34 */ "ldsym ::= ldsym COMMA dotsymbol",
 /*  35 */ "function ::= funcid LPAR argument RPAR newline body",
 /*  36 */ "funcid ::= FUNCTION dotsymbol",
 /*  37 */ "funcid ::= STFUNCTION dotsymbol",
 /*  38 */ "argument ::=",
 /*  39 */ "argument ::= STAR",
 /*  40 */ "argument ::= larg",
 /*  41 */ "argument ::= larg COMMA STAR",
 /*  42 */ "larg ::= SYMBOL",
 /*  43 */ "larg ::= larg COMMA SYMBOL",
 /*  44 */ "bargument ::=",
 /*  45 */ "bargument ::= lbarg",
 /*  46 */ "bargument ::= STAR",
 /*  47 */ "bargument ::= lbarg COMMA STAR",
 /*  48 */ "lbarg ::= SYMBOL",
 /*  49 */ "lbarg ::= lbarg COMMA SYMBOL",
 /*  50 */ "body ::= llocdefin lstatement",
 /*  51 */ "llocdefin ::=",
 /*  52 */ "llocdefin ::= llocdefin newline",
 /*  53 */ "llocdefin ::= llocdefin locdline newline",
 /*  54 */ "locdline ::= STATIC statdefin",
 /*  55 */ "locdline ::= LOCAL locdefin",
 /*  56 */ "locdefin ::= locdef",
 /*  57 */ "locdefin ::= locdefin COMMA locdef",
 /*  58 */ "locdef ::= SYMBOL",
 /*  59 */ "locdef ::= SYMBOL ASSIGN expr",
 /*  60 */ "lstatement ::=",
 /*  61 */ "lstatement ::= lstatement newline",
 /*  62 */ "lstatement ::= lstatement statement newline",
 /*  63 */ "statement ::= QUIT",
 /*  64 */ "statement ::= RETURN expr",
 /*  65 */ "statement ::= begseq lrecov finally END",
 /*  66 */ "statement ::= if lelseif else endif",
 /*  67 */ "statement ::= WHILE expr newline lstatement END",
 /*  68 */ "statement ::= FOR SYMBOL ASSIGN expr TO expr forstep newline lstatement END",
 /*  69 */ "statement ::= LOOP",
 /*  70 */ "statement ::= EXIT",
 /*  71 */ "statement ::= expr",
 /*  72 */ "begseq ::= BEGSEQ newline lstatement",
 /*  73 */ "lrecov ::=",
 /*  74 */ "lrecov ::= lrecov recov",
 /*  75 */ "recov ::= RECOVER newline lstatement",
 /*  76 */ "recov ::= RECOVER SYMBOL newline lstatement",
 /*  77 */ "recov ::= RECOVER SYMBOL expr newline lstatement",
 /*  78 */ "recov ::= RECOVER SYMBOL LT dotsymbol GT newline lstatement",
 /*  79 */ "finally ::=",
 /*  80 */ "finally ::= FINALLY newline lstatement",
 /*  81 */ "if ::= IF expr newline lstatement",
 /*  82 */ "if ::= DOCASE lnewline CASE expr newline lstatement",
 /*  83 */ "lelseif ::=",
 /*  84 */ "lelseif ::= lelseif elseif",
 /*  85 */ "elseif ::= ELSEIF expr newline lstatement",
 /*  86 */ "elseif ::= CASE expr newline lstatement",
 /*  87 */ "else ::=",
 /*  88 */ "else ::= ELSE newline lstatement",
 /*  89 */ "else ::= OTHERWISE newline lstatement",
 /*  90 */ "endif ::= END",
 /*  91 */ "forstep ::=",
 /*  92 */ "forstep ::= STEP expr",
 /*  93 */ "lfuncpar ::=",
 /*  94 */ "lfuncpar ::= parexpr",
 /*  95 */ "lfuncpar ::= lfuncpar0 COMMA parexpr0",
 /*  96 */ "lfuncpar0 ::= parexpr0",
 /*  97 */ "lfuncpar0 ::= lfuncpar0 COMMA parexpr0",
 /*  98 */ "parexpr0 ::=",
 /*  99 */ "parexpr0 ::= parexpr",
 /* 100 */ "parexpr ::= expr",
 /* 101 */ "parexpr ::= STAR",
 /* 102 */ "parexpr ::= AT SYMBOL",
 /* 103 */ "lexpr ::=",
 /* 104 */ "lexpr ::= expr",
 /* 105 */ "lexpr ::= lexpr0 COMMA expr0",
 /* 106 */ "lexpr0 ::= expr0",
 /* 107 */ "lexpr0 ::= lexpr0 COMMA expr0",
 /* 108 */ "expr0 ::=",
 /* 109 */ "expr0 ::= expr",
 /* 110 */ "msgpar ::=",
 /* 111 */ "msgpar ::= ASSIGN expr",
 /* 112 */ "msgpar ::= LPAR lfuncpar RPAR",
 /* 113 */ "msgpar ::= LPAR lfuncpar RPAR ASSIGN expr",
 /* 114 */ "lnewline ::= newline",
 /* 115 */ "lnewline ::= lnewline newline",
 /* 116 */ "lnewline0 ::=",
 /* 117 */ "lnewline0 ::= lnewline0 newline",
 /* 118 */ "newline ::= NL",
 /* 119 */ "expr ::= NUMBER",
 /* 120 */ "expr ::= STRING",
 /* 121 */ "expr ::= NLSTEXT",
 /* 122 */ "expr ::= BINARYX",
 /* 123 */ "expr ::= BINARYA",
 /* 124 */ "expr ::= TRUE",
 /* 125 */ "expr ::= FALSE",
 /* 126 */ "expr ::= NIL",
 /* 127 */ "expr ::= SYMBOL",
 /* 128 */ "expr ::= SYMBOL ARROW SYMBOL",
 /* 129 */ "expr ::= expr COLON SYMBOL msgpar",
 /* 130 */ "expr ::= expr COLON LPAR dotsymbol RPAR SYMBOL msgpar",
 /* 131 */ "expr ::= expr COLON LPAR dotsymbol AT dotsymbol RPAR SYMBOL msgpar",
 /* 132 */ "expr ::= ddotsymbol LPAR lfuncpar RPAR",
 /* 133 */ "expr ::= LPAR lexpr RPAR",
 /* 134 */ "expr ::= LBRACE PIPE bargument PIPE lexpr RBRACE",
 /* 135 */ "expr ::= IF LPAR expr COMMA expr COMMA expr RPAR",
 /* 136 */ "expr ::= LBRACE lfuncpar RBRACE",
 /* 137 */ "expr ::= expr LBRACKET expr RBRACKET",
 /* 138 */ "expr ::= expr ASSIGN expr",
 /* 139 */ "expr ::= expr ADDASS expr",
 /* 140 */ "expr ::= expr SUBASS expr",
 /* 141 */ "expr ::= expr MULASS expr",
 /* 142 */ "expr ::= expr DIVASS expr",
 /* 143 */ "expr ::= expr MODASS expr",
 /* 144 */ "expr ::= DBMINUS expr",
 /* 145 */ "expr ::= DBPLUS expr",
 /* 146 */ "expr ::= expr DBMINUS",
 /* 147 */ "expr ::= expr DBPLUS",
 /* 148 */ "expr ::= expr PLUS expr",
 /* 149 */ "expr ::= expr MINUS expr",
 /* 150 */ "expr ::= expr STAR expr",
 /* 151 */ "expr ::= expr SLASH expr",
 /* 152 */ "expr ::= expr MODULO expr",
 /* 153 */ "expr ::= expr DBSTAR expr",
 /* 154 */ "expr ::= MINUS expr",
 /* 155 */ "expr ::= PLUS expr",
 /* 156 */ "expr ::= expr EQEQ expr",
 /* 157 */ "expr ::= expr EXEQ expr",
 /* 158 */ "expr ::= expr GTEQ expr",
 /* 159 */ "expr ::= expr LTEQ expr",
 /* 160 */ "expr ::= expr GT expr",
 /* 161 */ "expr ::= expr LT expr",
 /* 162 */ "expr ::= expr DOLLAR expr",
 /* 163 */ "expr ::= expr OR expr",
 /* 164 */ "expr ::= expr AND expr",
 /* 165 */ "expr ::= NOT expr",
};
#endif /* NDEBUG */

/*
** This function returns the symbolic name associated with a token
** value.
*/
const char *ParseTokenName(int tokenType){
#ifndef NDEBUG
  if( tokenType>0 && tokenType<(int)(sizeof(yyTokenName)/sizeof(yyTokenName[0])) ){
    return yyTokenName[tokenType];
  }else{
    return "Unknown";
  }
#else
  return "";
#endif
}

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(YYCODETYPE yymajor, YYMINORTYPE *yypminor){
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
#line 218 "./parser.lem"
{delete (yypminor->yy0);}
#line 1124 "./parser.c"
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor( yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
  (*freeProc)((void*)pParser);
}

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  int iLookAhead            /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  /* if( pParser->yyidx<0 ) return YY_NO_ACTION;  */
  i = yy_shift_ofst[stateno];
  if( i==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  if( iLookAhead==YYNOCODE ){
    return YY_NO_ACTION;
  }
  i += iLookAhead;
  if( i<0 || i>=(int)YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
    int iFallback;            /* Fallback token */
    if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
           && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
           yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
      }
#endif
      return yy_find_shift_action(pParser, iFallback);
    }
#endif
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  yyParser *pParser,        /* The parser */
  int iLookAhead            /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  i = yy_reduce_ofst[stateno];
  if( i==YY_REDUCE_USE_DFLT ){
    return yy_default[stateno];
  }
  if( iLookAhead==YYNOCODE ){
    return YY_NO_ACTION;
  }
  i += iLookAhead;
  if( i<0 || i>=(int)YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer ot the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
  if( yypParser->yyidx>=YYSTACKDEPTH ){
     ParseARG_FETCH;
     yypParser->yyidx--;
#ifndef NDEBUG
     if( yyTraceFILE ){
       fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
     }
#endif
     while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
     /* Here code is inserted which will execute if the parser
     ** stack every overflows */
     ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
     return;
  }
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = yyNewState;
  yytos->major = yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 81, 2 },
  { 82, 4 },
  { 85, 0 },
  { 85, 5 },
  { 86, 0 },
  { 86, 2 },
  { 92, 5 },
  { 89, 0 },
  { 89, 2 },
  { 88, 1 },
  { 88, 3 },
  { 90, 0 },
  { 90, 2 },
  { 93, 1 },
  { 93, 2 },
  { 87, 0 },
  { 87, 4 },
  { 94, 1 },
  { 94, 3 },
  { 95, 1 },
  { 95, 3 },
  { 83, 1 },
  { 83, 2 },
  { 97, 7 },
  { 98, 2 },
  { 100, 0 },
  { 100, 2 },
  { 100, 3 },
  { 101, 0 },
  { 101, 3 },
  { 102, 2 },
  { 102, 2 },
  { 102, 3 },
  { 99, 1 },
  { 99, 3 },
  { 97, 6 },
  { 103, 2 },
  { 103, 2 },
  { 104, 0 },
  { 104, 1 },
  { 104, 1 },
  { 104, 3 },
  { 107, 1 },
  { 107, 3 },
  { 108, 0 },
  { 108, 1 },
  { 108, 1 },
  { 108, 3 },
  { 109, 1 },
  { 109, 3 },
  { 106, 2 },
  { 110, 0 },
  { 110, 2 },
  { 110, 3 },
  { 112, 2 },
  { 112, 2 },
  { 113, 1 },
  { 113, 3 },
  { 114, 1 },
  { 114, 3 },
  { 111, 0 },
  { 111, 2 },
  { 111, 3 },
  { 115, 1 },
  { 115, 2 },
  { 115, 4 },
  { 115, 4 },
  { 115, 5 },
  { 115, 10 },
  { 115, 1 },
  { 115, 1 },
  { 115, 1 },
  { 116, 3 },
  { 117, 0 },
  { 117, 2 },
  { 124, 3 },
  { 124, 4 },
  { 124, 5 },
  { 124, 7 },
  { 118, 0 },
  { 118, 3 },
  { 119, 4 },
  { 119, 6 },
  { 120, 0 },
  { 120, 2 },
  { 125, 4 },
  { 125, 4 },
  { 121, 0 },
  { 121, 3 },
  { 121, 3 },
  { 122, 1 },
  { 123, 0 },
  { 123, 2 },
  { 126, 0 },
  { 126, 1 },
  { 126, 3 },
  { 128, 1 },
  { 128, 3 },
  { 129, 0 },
  { 129, 1 },
  { 127, 1 },
  { 127, 1 },
  { 127, 2 },
  { 130, 0 },
  { 130, 1 },
  { 130, 3 },
  { 131, 1 },
  { 131, 3 },
  { 132, 0 },
  { 132, 1 },
  { 133, 0 },
  { 133, 2 },
  { 133, 3 },
  { 133, 5 },
  { 91, 1 },
  { 91, 2 },
  { 84, 0 },
  { 84, 2 },
  { 105, 1 },
  { 96, 1 },
  { 96, 1 },
  { 96, 1 },
  { 96, 1 },
  { 96, 1 },
  { 96, 1 },
  { 96, 1 },
  { 96, 1 },
  { 96, 1 },
  { 96, 3 },
  { 96, 4 },
  { 96, 7 },
  { 96, 9 },
  { 96, 4 },
  { 96, 3 },
  { 96, 6 },
  { 96, 8 },
  { 96, 3 },
  { 96, 4 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 2 },
  { 96, 2 },
  { 96, 2 },
  { 96, 2 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 2 },
  { 96, 2 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 3 },
  { 96, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0:
#line 244 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="prg ::= header lfunction.";
    yygotominor.yy0->codegen=codegen_prg_header_lfunction;

    //!
    //(yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
    //Itt korábban takarítás volt, és a struktúrák teszt célú bejárása.
    //A parser 4.4.xx óta rekurzív, azért itt nem lehet takarítani.
}
#line 1514 "./parser.c"
        break;
      case 1:
#line 255 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="header ::= lnewline0 namespace lusing lstatdefin.";
    yygotominor.yy0->codegen=codegen_header_lnewline0_namespace_lusing_lstatdefin;

    if( headerflag )
    {
        //!
        (yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
        headerflag=0; //header kész
    }
}
#line 1530 "./parser.c"
        break;
      case 2:
#line 268 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="namespace ::= .";
    yygotominor.yy0->codegen=codegen_namespace;
}
#line 1539 "./parser.c"
        break;
      case 3:
#line 274 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="namespace ::= NAMESPACE dotsymbol nsalias ldotsymbol lnewline.";
    yygotominor.yy0->codegen=codegen_namespace_NAMESPACE_dotsymbol_nsalias_ldotsymbol_lnewline;

    //!
    (yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
}
#line 1551 "./parser.c"
  yy_destructor(36,&yymsp[-4].minor);
        break;
      case 4:
#line 283 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lusing ::= .";
    yygotominor.yy0->codegen=codegen_lusing;
}
#line 1561 "./parser.c"
        break;
      case 5:
#line 289 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lusing ::= lusing using.";
    yygotominor.yy0->codegen=codegen_lusing_lusing_using;
}
#line 1570 "./parser.c"
        break;
      case 6:
#line 295 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="using ::= USING dotsymbol nsalias ldotsymbol lnewline.";
    yygotominor.yy0->codegen=codegen_using_USING_dotsymbol_nsalias_ldotsymbol_lnewline;

    //!
    (yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
}
#line 1582 "./parser.c"
  yy_destructor(37,&yymsp[-4].minor);
        break;
      case 7:
#line 304 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="nsalias ::= .";
    yygotominor.yy0->codegen=codegen_nsalias;
}
#line 1592 "./parser.c"
        break;
      case 8:
#line 310 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="nsalias ::= EQ SYMBOL.";
    yygotominor.yy0->codegen=codegen_nsalias_EQ_SYMBOL;
}
#line 1601 "./parser.c"
  yy_destructor(16,&yymsp[-1].minor);
        break;
      case 9:
#line 316 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="dotsymbol ::= SYMBOL.";
    yygotominor.yy0->codegen=codegen_dotsymbol_SYMBOL;
}
#line 1611 "./parser.c"
        break;
      case 10:
#line 322 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="dotsymbol ::= dotsymbol DOT SYMBOL.";
    yygotominor.yy0->codegen=codegen_dotsymbol_dotsymbol_DOT_SYMBOL;
}
#line 1620 "./parser.c"
  yy_destructor(5,&yymsp[-1].minor);
        break;
      case 11:
#line 328 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="ldotsymbol ::= .";
    yygotominor.yy0->codegen=codegen_ldotsymbol;
}
#line 1630 "./parser.c"
        break;
      case 12:
#line 334 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="ldotsymbol ::= ldotsymbol dotsymbol.";
    yygotominor.yy0->codegen=codegen_ldotsymbol_ldotsymbol_dotsymbol;
}
#line 1639 "./parser.c"
        break;
      case 13:
#line 340 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="ddotsymbol ::= dotsymbol.";
    yygotominor.yy0->codegen=codegen_ddotsymbol_dotsymbol;
}
#line 1648 "./parser.c"
        break;
      case 14:
#line 346 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="ddotsymbol ::= DOT dotsymbol.";
    yygotominor.yy0->codegen=codegen_ddotsymbol_DOT_dotsymbol;
}
#line 1657 "./parser.c"
  yy_destructor(5,&yymsp[-1].minor);
        break;
      case 15:
#line 352 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lstatdefin ::= .";
    yygotominor.yy0->codegen=codegen_lstatdefin;
}
#line 1667 "./parser.c"
        break;
      case 16:
#line 358 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lstatdefin ::= lstatdefin STATIC statdefin lnewline.";
    yygotominor.yy0->codegen=codegen_lstatdefin_lstatdefin_STATIC_statdefin_lnewline; 
}
#line 1676 "./parser.c"
  yy_destructor(39,&yymsp[-2].minor);
        break;
      case 17:
#line 364 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statdefin ::= statdef.";
    yygotominor.yy0->codegen=codegen_statdefin_statdef; 
}
#line 1686 "./parser.c"
        break;
      case 18:
#line 370 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statdefin ::= statdefin COMMA statdef.";
    yygotominor.yy0->codegen=codegen_statdefin_statdefin_COMMA_statdef; 
}
#line 1695 "./parser.c"
  yy_destructor(6,&yymsp[-1].minor);
        break;
      case 19:
#line 376 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statdef ::= SYMBOL.";
    yygotominor.yy0->codegen=codegen_statdef_SYMBOL; 

    //!    
    add_static(yymsp[0].minor.yy0);
    yymsp[0].minor.yy0->cargo=headerflag?SYM_GLOBSTAT:SYM_LOCSTAT;
}
#line 1709 "./parser.c"
        break;
      case 20:
#line 386 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statdef ::= SYMBOL ASSIGN expr.";
    yygotominor.yy0->codegen=codegen_statdef_SYMBOL_ASSIGN_expr; 

    //!
    add_static(yymsp[-2].minor.yy0);
    yymsp[-2].minor.yy0->cargo=headerflag?SYM_GLOBSTAT:SYM_LOCSTAT;
}
#line 1722 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 21:
#line 396 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfunction ::= function.";
    yygotominor.yy0->codegen=codegen_lfunction_function;
}
#line 1732 "./parser.c"
        break;
      case 22:
#line 402 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfunction ::= lfunction function.";
    yygotominor.yy0->codegen=codegen_lfunction_lfunction_function;
}
#line 1741 "./parser.c"
        break;
      case 23:
#line 408 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-6].minor.yy0,yymsp[-4].minor.yy0,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="function ::= classid LPAR ldsym RPAR newspec lnewline lslot.";
    yygotominor.yy0->codegen=codegen_function_classid_LPAR_ldsym_RPAR_newspec_lnewline_lslot; 

    //!
    (yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
}
#line 1753 "./parser.c"
  yy_destructor(40,&yymsp[-5].minor);
  yy_destructor(41,&yymsp[-3].minor);
        /* No destructor defined for lnewline */
        break;
      case 24:
#line 417 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="classid ::= CLASS dotsymbol.";
    yygotominor.yy0->codegen=codegen_classid_CLASS_dotsymbol;
}
#line 1765 "./parser.c"
  yy_destructor(42,&yymsp[-1].minor);
        break;
      case 25:
#line 423 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="newspec ::= .";
    yygotominor.yy0->codegen=codegen_newspec;
}
#line 1775 "./parser.c"
        break;
      case 26:
#line 429 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="newspec ::= NEW COLON.";
    yygotominor.yy0->codegen=codegen_newspec_NEW_COLON;
}
#line 1784 "./parser.c"
  yy_destructor(43,&yymsp[-1].minor);
  yy_destructor(33,&yymsp[0].minor);
        break;
      case 27:
#line 435 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="newspec ::= NEW COLON SYMBOL.";
    yygotominor.yy0->codegen=codegen_newspec_NEW_COLON_SYMBOL;
}
#line 1795 "./parser.c"
  yy_destructor(43,&yymsp[-2].minor);
  yy_destructor(33,&yymsp[-1].minor);
        break;
      case 28:
#line 441 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lslot ::= .";
    yygotominor.yy0->cargo=0;
    yygotominor.yy0->codegen=codegen_lslot; 
}
#line 1807 "./parser.c"
        break;
      case 29:
#line 448 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="lslot ::= lslot slot lnewline.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_lslot_lslot_slot_lnewline; 
}
#line 1817 "./parser.c"
        /* No destructor defined for lnewline */
        break;
      case 30:
#line 455 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="slot ::= ATTRIB SYMBOL.";
    yygotominor.yy0->codegen=codegen_slot_ATTRIB_SYMBOL; 
}
#line 1827 "./parser.c"
  yy_destructor(44,&yymsp[-1].minor);
        break;
      case 31:
#line 461 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="slot ::= METHOD SYMBOL.";
    yygotominor.yy0->codegen=codegen_slot_METHOD_SYMBOL; 
}
#line 1837 "./parser.c"
  yy_destructor(45,&yymsp[-1].minor);
        break;
      case 32:
#line 467 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="slot ::= METHOD SYMBOL expr.";
    yygotominor.yy0->codegen=codegen_slot_METHOD_SYMBOL_expr; 
}
#line 1847 "./parser.c"
  yy_destructor(45,&yymsp[-2].minor);
        break;
      case 33:
#line 473 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="ldsym ::= dotsymbol.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_ldsym_dotsymbol;  
}
#line 1858 "./parser.c"
        break;
      case 34:
#line 480 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="ldsym ::= ldsym COMMA dotsymbol.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_ldsym_ldsym_COMMA_dotsymbol;  
}
#line 1868 "./parser.c"
  yy_destructor(6,&yymsp[-1].minor);
        break;
      case 35:
#line 487 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="function ::= funcid LPAR argument RPAR newline body.";
    yygotominor.yy0->codegen=codegen_function_funcid_LPAR_argument_RPAR_newline_body; 

    //!
    (yygotominor.yy0->codegen)(yygotominor.yy0,0); //EXEC
}
#line 1881 "./parser.c"
  yy_destructor(40,&yymsp[-4].minor);
  yy_destructor(41,&yymsp[-2].minor);
        break;
      case 36:
#line 496 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="funcid ::= FUNCTION dotsymbol.";
    yygotominor.yy0->codegen=codegen_funcid_FUNCTION_dotsymbol;
}
#line 1892 "./parser.c"
  yy_destructor(46,&yymsp[-1].minor);
        break;
      case 37:
#line 502 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="funcid ::= STFUNCTION dotsymbol.";
    yygotominor.yy0->codegen=codegen_funcid_STFUNCTION_dotsymbol;
}
#line 1902 "./parser.c"
  yy_destructor(47,&yymsp[-1].minor);
        break;
      case 38:
#line 508 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="argument ::= .";
    yygotominor.yy0->codegen=codegen_argument;  
}
#line 1912 "./parser.c"
        break;
      case 39:
#line 514 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="argument ::= STAR.";
    yygotominor.yy0->codegen=codegen_argument_STAR;  
}
#line 1921 "./parser.c"
  yy_destructor(26,&yymsp[0].minor);
        break;
      case 40:
#line 520 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="argument ::= larg.";
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_argument_larg;  
}
#line 1932 "./parser.c"
        break;
      case 41:
#line 527 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-2].minor.yy0);
    yygotominor.yy0->text="argument ::= larg COMMA STAR.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_argument_larg_COMMA_STAR;  
}
#line 1942 "./parser.c"
  yy_destructor(6,&yymsp[-1].minor);
  yy_destructor(26,&yymsp[0].minor);
        break;
      case 42:
#line 534 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="larg ::= SYMBOL.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_larg_SYMBOL;  
    
    //!
    add_local(yymsp[0].minor.yy0);
}
#line 1957 "./parser.c"
        break;
      case 43:
#line 544 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="larg ::= larg COMMA SYMBOL.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_larg_larg_COMMA_SYMBOL;  

    //!
    add_local(yymsp[0].minor.yy0);
}
#line 1970 "./parser.c"
  yy_destructor(6,&yymsp[-1].minor);
        break;
      case 44:
#line 554 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="bargument ::= .";
    yygotominor.yy0->codegen=codegen_bargument;
    yygotominor.yy0->outsource=outsource_bargument;

    //!
    if( blockflag )
    {
        nested_block();
    }
    blockflag=1;
}
#line 1988 "./parser.c"
        break;
      case 45:
#line 568 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="bargument ::= lbarg.";
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_bargument_lbarg;
    yygotominor.yy0->outsource=outsource_bargument_lbarg;

    //!
    if( blockflag )
    {
        nested_block();
    }
    blockflag=1;
}
#line 2006 "./parser.c"
        break;
      case 46:
#line 583 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="bargument ::= STAR.";
    yygotominor.yy0->codegen=codegen_bargument_STAR;
    yygotominor.yy0->outsource=outsource_bargument_STAR;

    //!
    if( blockflag )
    {
        nested_block();
    }
    blockflag=1;
}
#line 2023 "./parser.c"
  yy_destructor(26,&yymsp[0].minor);
        break;
      case 47:
#line 597 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-2].minor.yy0);
    yygotominor.yy0->text="bargument ::= lbarg COMMA STAR.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_bargument_lbarg_COMMA_STAR;
    yygotominor.yy0->outsource=outsource_bargument_lbarg_COMMA_STAR;

    //!
    if( blockflag )
    {
        nested_block();
    }
    blockflag=1;
}
#line 2042 "./parser.c"
  yy_destructor(6,&yymsp[-1].minor);
  yy_destructor(26,&yymsp[0].minor);
        break;
      case 48:
#line 612 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lbarg ::= SYMBOL.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_lbarg_SYMBOL;
    yygotominor.yy0->outsource=outsource_lbarg_SYMBOL;
    
    //!
    add_blkarg(yymsp[0].minor.yy0);
}
#line 2058 "./parser.c"
        break;
      case 49:
#line 623 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lbarg ::= lbarg COMMA SYMBOL.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_lbarg_lbarg_COMMA_SYMBOL;
    yygotominor.yy0->outsource=outsource_lbarg_lbarg_COMMA_SYMBOL;

    //!
    add_blkarg(yymsp[0].minor.yy0);
}
#line 2072 "./parser.c"
  yy_destructor(6,&yymsp[-1].minor);
        break;
      case 50:
#line 634 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="body ::= llocdefin lstatement.";
    yygotominor.yy0->codegen=codegen_body_llocdefin_lstatement;  
}
#line 2082 "./parser.c"
        break;
      case 51:
#line 640 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="llocdefin ::= .";
    yygotominor.yy0->codegen=codegen_llocdefin;
}
#line 2091 "./parser.c"
        break;
      case 52:
#line 646 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="llocdefin ::= llocdefin newline.";
    yygotominor.yy0->cargo=yymsp[-1].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_llocdefin_llocdefin_newline;
}
#line 2101 "./parser.c"
        break;
      case 53:
#line 653 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="llocdefin ::= llocdefin locdline newline.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+yymsp[-1].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_llocdefin_llocdefin_locdline_newline;
}
#line 2111 "./parser.c"
        break;
      case 54:
#line 660 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdline ::= STATIC statdefin.";
    yygotominor.yy0->codegen=codegen_locdline_STATIC_statdefin;
}
#line 2120 "./parser.c"
  yy_destructor(39,&yymsp[-1].minor);
        break;
      case 55:
#line 666 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdline ::= LOCAL locdefin.";
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_locdline_LOCAL_locdefin; 
}
#line 2131 "./parser.c"
  yy_destructor(48,&yymsp[-1].minor);
        break;
      case 56:
#line 673 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdefin ::= locdef.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_locdefin_locdef; 
}
#line 2142 "./parser.c"
        break;
      case 57:
#line 680 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdefin ::= locdefin COMMA locdef.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_locdefin_locdefin_COMMA_locdef;  
}
#line 2152 "./parser.c"
  yy_destructor(6,&yymsp[-1].minor);
        break;
      case 58:
#line 687 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdef ::= SYMBOL.";
    yygotominor.yy0->codegen=codegen_locdef_SYMBOL;
    
    //!
    add_local(yymsp[0].minor.yy0);
}
#line 2165 "./parser.c"
        break;
      case 59:
#line 696 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="locdef ::= SYMBOL ASSIGN expr.";
    yygotominor.yy0->codegen=codegen_locdef_SYMBOL_ASSIGN_expr; 

    //!
    add_local(yymsp[-2].minor.yy0);
    symbol_search(yymsp[-2].minor.yy0);
}
#line 2178 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 60:
#line 706 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lstatement ::= .";
    yygotominor.yy0->codegen=codegen_lstatement;  
}
#line 2188 "./parser.c"
        break;
      case 61:
#line 712 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lstatement ::= lstatement newline.";
    yygotominor.yy0->codegen=codegen_lstatement_lstatement_newline;  
}
#line 2197 "./parser.c"
        break;
      case 62:
#line 718 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lstatement ::= lstatement statement newline.";
    yygotominor.yy0->codegen=codegen_lstatement_lstatement_statement_newline;  
}
#line 2206 "./parser.c"
        break;
      case 63:
#line 724 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="statement ::= QUIT.";
    yygotominor.yy0->codegen=codegen_statement_QUIT;  
}
#line 2215 "./parser.c"
  yy_destructor(49,&yymsp[0].minor);
        break;
      case 64:
#line 730 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statement ::= RETURN expr.";
    yygotominor.yy0->codegen=codegen_statement_RETURN_expr;  
}
#line 2225 "./parser.c"
  yy_destructor(50,&yymsp[-1].minor);
        break;
      case 65:
#line 736 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="statement ::= begseq lrecov finally END.";
    yygotominor.yy0->codegen=codegen_statement_begseq_lrecov_finally_END;
}
#line 2235 "./parser.c"
  yy_destructor(51,&yymsp[0].minor);
        break;
      case 66:
#line 742 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statement ::= if lelseif else endif.";
    yygotominor.yy0->codegen=codegen_statement_if_lelseif_else_endif;
}
#line 2245 "./parser.c"
        break;
      case 67:
#line 748 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="statement ::= WHILE expr newline lstatement END.";
    yygotominor.yy0->codegen=codegen_statement_WHILE_expr_newline_lstatement_END;
}
#line 2254 "./parser.c"
  yy_destructor(52,&yymsp[-4].minor);
  yy_destructor(51,&yymsp[0].minor);
        break;
      case 68:
#line 754 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(6,yymsp[-8].minor.yy0,yymsp[-6].minor.yy0,yymsp[-4].minor.yy0,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="statement ::= FOR SYMBOL ASSIGN expr TO expr forstep newline lstatement END.";
    yygotominor.yy0->codegen=codegen_statement_FOR_SYMBOL_ASSIGN_expr_TO_expr_forstep_newline_lstatement_END; 

    //!
    symbol_search(yymsp[-8].minor.yy0);
}
#line 2268 "./parser.c"
  yy_destructor(53,&yymsp[-9].minor);
  yy_destructor(7,&yymsp[-7].minor);
  yy_destructor(54,&yymsp[-5].minor);
  yy_destructor(51,&yymsp[0].minor);
        break;
      case 69:
#line 763 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statement ::= LOOP.";
    yygotominor.yy0->codegen=codegen_statement_LOOP; 
}
#line 2281 "./parser.c"
        break;
      case 70:
#line 769 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statement ::= EXIT.";
    yygotominor.yy0->codegen=codegen_statement_EXIT; 
}
#line 2290 "./parser.c"
        break;
      case 71:
#line 775 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="statement ::= expr.";
    yygotominor.yy0->codegen=codegen_statement_expr; 
}
#line 2299 "./parser.c"
        break;
      case 72:
#line 781 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="begseq ::= BEGSEQ newline lstatement.";
    yygotominor.yy0->codegen=codegen_begseq_BEGSEQ_newline_lstatement;  
}
#line 2308 "./parser.c"
  yy_destructor(57,&yymsp[-2].minor);
        break;
      case 73:
#line 787 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lrecov ::= .";
    yygotominor.yy0->codegen=codegen_lrecov;
}
#line 2318 "./parser.c"
        break;
      case 74:
#line 793 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lrecov ::= lrecov recov.";
    yygotominor.yy0->codegen=codegen_lrecov_lrecov_recov;
}
#line 2327 "./parser.c"
        break;
      case 75:
#line 799 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="recov ::= RECOVER newline lstatement.";
    yygotominor.yy0->codegen=codegen_recov_RECOVER_newline_lstatement; 
}
#line 2336 "./parser.c"
  yy_destructor(58,&yymsp[-2].minor);
        break;
      case 76:
#line 805 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="recov ::= RECOVER SYMBOL newline lstatement.";
    yygotominor.yy0->codegen=codegen_recov_RECOVER_SYMBOL_newline_lstatement;
    
    //!
    symbol_search(yymsp[-2].minor.yy0);
}
#line 2349 "./parser.c"
  yy_destructor(58,&yymsp[-3].minor);
        break;
      case 77:
#line 814 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-3].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="recov ::= RECOVER SYMBOL expr newline lstatement.";
    yygotominor.yy0->codegen=codegen_recov_RECOVER_SYMBOL_expr_newline_lstatement;
    
    //!
    symbol_search(yymsp[-3].minor.yy0);
}
#line 2362 "./parser.c"
  yy_destructor(58,&yymsp[-4].minor);
        break;
      case 78:
#line 823 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="recov ::= RECOVER SYMBOL LT dotsymbol GT newline lstatement.";
    yygotominor.yy0->codegen=codegen_recov_RECOVER_SYMBOL_LT_dotsymbol_GT_newline_lstatement;
    
    //!
    symbol_search(yymsp[-5].minor.yy0);
}
#line 2375 "./parser.c"
  yy_destructor(58,&yymsp[-6].minor);
  yy_destructor(22,&yymsp[-4].minor);
  yy_destructor(21,&yymsp[-2].minor);
        break;
      case 79:
#line 833 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="finally ::= .";
    yygotominor.yy0->codegen=codegen_finally;
}
#line 2387 "./parser.c"
        break;
      case 80:
#line 839 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="finally ::= FINALLY newline lstatement.";
    yygotominor.yy0->codegen=codegen_finally_FINALLY_newline_lstatement;
}
#line 2396 "./parser.c"
  yy_destructor(59,&yymsp[-2].minor);
        break;
      case 81:
#line 846 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="if ::= IF expr newline lstatement.";
    yygotominor.yy0->codegen=codegen_if_IF_expr_newline_lstatement; 
}
#line 2406 "./parser.c"
  yy_destructor(60,&yymsp[-3].minor);
        break;
      case 82:
#line 852 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-4].minor.yy0,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="if ::= DOCASE newline CASE expr newline lstatement.";
    yygotominor.yy0->codegen=codegen_if_DOCASE_newline_CASE_expr_newline_lstatement;  
}
#line 2416 "./parser.c"
  yy_destructor(61,&yymsp[-5].minor);
  yy_destructor(62,&yymsp[-3].minor);
        break;
      case 83:
#line 858 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lelseif ::= .";
    yygotominor.yy0->cargo=0;
    yygotominor.yy0->codegen=codegen_lelseif;
}
#line 2428 "./parser.c"
        break;
      case 84:
#line 865 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lelseif ::= lelseif elseif.";
    yygotominor.yy0->cargo=yymsp[-1].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_lelseif_lelseif_elseif;
}
#line 2438 "./parser.c"
        break;
      case 85:
#line 872 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="elseif ::= ELSEIF expr newline lstatement.";
    yygotominor.yy0->codegen=codegen_elseif_ELSEIF_expr_newline_lstatement;
}
#line 2447 "./parser.c"
  yy_destructor(63,&yymsp[-3].minor);
        break;
      case 86:
#line 878 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-2].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="elseif ::= CASE expr newline lstatement.";
    yygotominor.yy0->codegen=codegen_elseif_CASE_expr_newline_lstatement;
}
#line 2457 "./parser.c"
  yy_destructor(62,&yymsp[-3].minor);
        break;
      case 87:
#line 884 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="else ::= .";
    yygotominor.yy0->codegen=codegen_else;
}
#line 2467 "./parser.c"
        break;
      case 88:
#line 890 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="else ::= ELSE newline lstatement";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_else_ELSE_newline_lstatement; 
}
#line 2477 "./parser.c"
  yy_destructor(64,&yymsp[-2].minor);
        break;
      case 89:
#line 897 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="else ::= OTHERWISE newline lstatement";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_else_OTHERWISE_newline_lstatement; 
}
#line 2488 "./parser.c"
  yy_destructor(65,&yymsp[-2].minor);
        break;
      case 90:
#line 904 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="endif ::= END";
    yygotominor.yy0->codegen=codegen_endif_END;
}
#line 2498 "./parser.c"
  yy_destructor(51,&yymsp[0].minor);
        break;
      case 91:
#line 910 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="forstep ::= .";
    yygotominor.yy0->codegen=codegen_forstep;
}
#line 2508 "./parser.c"
        break;
      case 92:
#line 916 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="forstep ::= STEP expr.";
    yygotominor.yy0->codegen=codegen_forstep_STEP_expr; 
}
#line 2517 "./parser.c"
  yy_destructor(66,&yymsp[-1].minor);
        break;
      case 93:
#line 922 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lfuncpar ::= .";
    yygotominor.yy0->codegen=codegen_lfuncpar;
    yygotominor.yy0->outsource=outsource_lfuncpar;
    yygotominor.yy0->cargo=0;
}
#line 2529 "./parser.c"
        break;
      case 94:
#line 930 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfuncpar ::= parexpr.";
    yygotominor.yy0->codegen=codegen_lfuncpar_parexpr;
    yygotominor.yy0->outsource=outsource_lfuncpar_parexpr;
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo+1;
}
#line 2540 "./parser.c"
        break;
      case 95:
#line 938 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfuncpar ::= lfuncpar0 COMMA parexpr0.";
    yygotominor.yy0->codegen=codegen_lfuncpar_lfuncpar0_COMMA_parexpr0;
    yygotominor.yy0->outsource=outsource_lfuncpar_lfuncpar0_COMMA_parexpr0;
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+yymsp[0].minor.yy0->cargo+1;
}
#line 2551 "./parser.c"
  yy_destructor(6,&yymsp[-1].minor);
        break;
      case 96:
#line 946 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfuncpar0 ::= parexpr0.";
    yygotominor.yy0->codegen=codegen_lfuncpar0_parexpr0;
    yygotominor.yy0->outsource=outsource_lfuncpar0_parexpr0;
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo+1;
}
#line 2563 "./parser.c"
        break;
      case 97:
#line 954 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lfuncpar0 ::= lfuncpar0 COMMA parexpr0.";
    yygotominor.yy0->codegen=codegen_lfuncpar0_lfuncpar0_COMMA_parexpr0;
    yygotominor.yy0->outsource=outsource_lfuncpar0_lfuncpar0_COMMA_parexpr0;
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+yymsp[0].minor.yy0->cargo+1;
}
#line 2574 "./parser.c"
  yy_destructor(6,&yymsp[-1].minor);
        break;
      case 98:
#line 962 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="parexpr0 ::= .";
    yygotominor.yy0->codegen=codegen_parexpr0;
    yygotominor.yy0->outsource=outsource_parexpr0;
    yygotominor.yy0->cargo=0;
}
#line 2586 "./parser.c"
        break;
      case 99:
#line 970 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="parexpr0 ::= parexpr.";
    yygotominor.yy0->codegen=codegen_parexpr0_parexpr;
    yygotominor.yy0->outsource=outsource_parexpr0_parexpr;
    yygotominor.yy0->cargo=yymsp[0].minor.yy0->cargo;
}
#line 2597 "./parser.c"
        break;
      case 100:
#line 978 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="parexpr ::= expr.";
    yygotominor.yy0->codegen=codegen_parexpr_expr;
    yygotominor.yy0->outsource=outsource_parexpr_expr;
    yygotominor.yy0->cargo=0;
}
#line 2608 "./parser.c"
        break;
      case 101:
#line 986 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="parexpr ::= STAR.";
    yygotominor.yy0->codegen=codegen_parexpr_STAR;
    yygotominor.yy0->outsource=outsource_parexpr_STAR;
    yygotominor.yy0->cargo=(1<<16);
}
#line 2619 "./parser.c"
  yy_destructor(26,&yymsp[0].minor);
        break;
      case 102:
#line 994 "./parser.lem"
{  //@symbol
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="parexpr ::= AT SYMBOL.";
    yygotominor.yy0->codegen=codegen_parexpr_AT_SYMBOL;
    yygotominor.yy0->outsource=outsource_parexpr_AT_SYMBOL;
    yygotominor.yy0->cargo=0;

    //!
    symbol_search(yymsp[0].minor.yy0);
}
#line 2634 "./parser.c"
  yy_destructor(67,&yymsp[-1].minor);
        break;
      case 103:
#line 1005 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lexpr ::= .";
    yygotominor.yy0->codegen=codegen_lexpr;
    yygotominor.yy0->outsource=outsource_lexpr;
}
#line 2645 "./parser.c"
        break;
      case 104:
#line 1012 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lexpr ::= expr.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_lexpr_expr;
    yygotominor.yy0->outsource=outsource_lexpr_expr;
}
#line 2656 "./parser.c"
        break;
      case 105:
#line 1020 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lexpr ::= lexpr0 COMMA expr0.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_lexpr_lexpr0_COMMA_expr0;
    yygotominor.yy0->outsource=outsource_lexpr_lexpr0_COMMA_expr0;
}
#line 2667 "./parser.c"
  yy_destructor(6,&yymsp[-1].minor);
        break;
      case 106:
#line 1028 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lexpr0 ::= expr0.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_lexpr0_expr0;
    yygotominor.yy0->outsource=outsource_lexpr0_expr0;
}
#line 2679 "./parser.c"
        break;
      case 107:
#line 1036 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lexpr0 ::= lexpr0 COMMA expr0.";
    yygotominor.yy0->cargo=yymsp[-2].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_lexpr0_lexpr0_COMMA_expr0;
    yygotominor.yy0->outsource=outsource_lexpr0_lexpr0_COMMA_expr0;
}
#line 2690 "./parser.c"
  yy_destructor(6,&yymsp[-1].minor);
        break;
      case 108:
#line 1044 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="expr0 ::= .";
    yygotominor.yy0->codegen=codegen_expr0;
    yygotominor.yy0->outsource=outsource_expr0;
}
#line 2701 "./parser.c"
        break;
      case 109:
#line 1051 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr0 ::= expr.";
    yygotominor.yy0->codegen=codegen_expr0_expr;
    yygotominor.yy0->outsource=outsource_expr0_expr;
}
#line 2711 "./parser.c"
        break;
      case 110:
#line 1058 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="msgpar ::= .";
    yygotominor.yy0->codegen=codegen_msgpar;
    yygotominor.yy0->outsource=outsource_msgpar;
}
#line 2721 "./parser.c"
        break;
      case 111:
#line 1065 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="msgpar ::= ASSIGN expr.";
    yygotominor.yy0->cargo=1;
    yygotominor.yy0->codegen=codegen_msgpar_ASSIGN_expr;
    yygotominor.yy0->outsource=outsource_msgpar_ASSIGN_expr;
}
#line 2732 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 112:
#line 1073 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="msgpar ::= LPAR lfuncpar RPAR.";
    yygotominor.yy0->cargo=yymsp[-1].minor.yy0->cargo;
    yygotominor.yy0->codegen=codegen_msgpar_LPAR_lfuncpar_RPAR;
    yygotominor.yy0->outsource=outsource_msgpar_LPAR_lfuncpar_RPAR;
}
#line 2744 "./parser.c"
  yy_destructor(40,&yymsp[-2].minor);
  yy_destructor(41,&yymsp[0].minor);
        break;
      case 113:
#line 1081 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-3].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="msgpar ::= LPAR lfuncpar RPAR ASSIGN expr.";
    yygotominor.yy0->cargo=yymsp[-3].minor.yy0->cargo+1;
    yygotominor.yy0->codegen=codegen_msgpar_LPAR_lfuncpar_RPAR_ASSIGN_expr;
    yygotominor.yy0->outsource=outsource_msgpar_LPAR_lfuncpar_RPAR_ASSIGN_expr;
}
#line 2757 "./parser.c"
  yy_destructor(40,&yymsp[-4].minor);
  yy_destructor(41,&yymsp[-2].minor);
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 114:
#line 1089 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lnewline ::= newline.";
    yygotominor.yy0->codegen=codegen_lnewline_newline;
}
#line 2769 "./parser.c"
        break;
      case 115:
#line 1095 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lnewline ::= lnewline newline.";
    yygotominor.yy0->codegen=codegen_lnewline_lnewline_newline;
}
#line 2778 "./parser.c"
        break;
      case 116:
#line 1101 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(0);
    yygotominor.yy0->text="lnewline0 ::= .";
    yygotominor.yy0->codegen=codegen_lnewline0;
}
#line 2787 "./parser.c"
        break;
      case 117:
#line 1107 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="lnewline0 ::= lnewline0 newline.";
    yygotominor.yy0->codegen=codegen_lnewline0_lnewline0_newline;
}
#line 2796 "./parser.c"
        break;
      case 118:
#line 1113 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="newline ::= NL.";
    yygotominor.yy0->codegen=codegen_newline_NL;
}
#line 2805 "./parser.c"
        break;
      case 119:
#line 1119 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= NUMBER.";
    yygotominor.yy0->codegen=codegen_expr_NUMBER;
    yygotominor.yy0->outsource=outsource_expr_NUMBER;
}
#line 2815 "./parser.c"
        break;
      case 120:
#line 1126 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= STRING.";
    yygotominor.yy0->codegen=codegen_expr_STRING;
    yygotominor.yy0->outsource=outsource_expr_STRING;
    
    static char *strtab_env=getenv("CCC_STRING_TAB");
    static FILE *strtab_fil=(strtab_env&&*strtab_env)?fopen(strtab_env,"a"):0;
    if( strtab_fil )
    {
        write_strtab(strtab_fil,yymsp[0].minor.yy0);
    }
}
#line 2832 "./parser.c"
        break;
      case 121:
#line 1140 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= NLSTEXT.";
    yygotominor.yy0->codegen=codegen_expr_NLSTEXT;
    yygotominor.yy0->outsource=outsource_expr_NLSTEXT;
    
    static char *strtab_env=getenv("CCC_NLSTEXT_TAB");
    static FILE *strtab_fil=(strtab_env&&*strtab_env)?fopen(strtab_env,"a"):0;
    if( strtab_fil )
    {
        write_strtab(strtab_fil,yymsp[0].minor.yy0);
    }
}
#line 2849 "./parser.c"
        break;
      case 122:
#line 1154 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= BINARYX.";
    yygotominor.yy0->codegen=codegen_expr_BINARYX;
    yygotominor.yy0->outsource=outsource_expr_BINARYX;
}
#line 2859 "./parser.c"
        break;
      case 123:
#line 1161 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= BINARYA.";
    yygotominor.yy0->codegen=codegen_expr_BINARYA;
    yygotominor.yy0->outsource=outsource_expr_BINARYA;
}
#line 2869 "./parser.c"
        break;
      case 124:
#line 1168 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= TRUE.";
    yygotominor.yy0->codegen=codegen_expr_TRUE;
    yygotominor.yy0->outsource=outsource_expr_TRUE;
}
#line 2879 "./parser.c"
        break;
      case 125:
#line 1175 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= FALSE.";
    yygotominor.yy0->codegen=codegen_expr_FALSE;
    yygotominor.yy0->outsource=outsource_expr_FALSE;
}
#line 2889 "./parser.c"
        break;
      case 126:
#line 1182 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= NIL.";
    yygotominor.yy0->codegen=codegen_expr_NIL;
    yygotominor.yy0->outsource=outsource_expr_NIL;
}
#line 2899 "./parser.c"
        break;
      case 127:
#line 1189 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= SYMBOL.";
    yygotominor.yy0->codegen=codegen_expr_SYMBOL;
    yygotominor.yy0->outsource=outsource_expr_SYMBOL;

    //!
    symbol_search(yymsp[0].minor.yy0);
}
#line 2912 "./parser.c"
        break;
      case 128:
#line 1199 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= SYMBOL ARROW SYMBOL.";
    yygotominor.yy0->codegen=codegen_expr_SYMBOL_ARROW_SYMBOL;
    yygotominor.yy0->outsource=outsource_expr_SYMBOL_ARROW_SYMBOL;
}
#line 2922 "./parser.c"
  yy_destructor(34,&yymsp[-1].minor);
        break;
      case 129:
#line 1206 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr COLON SYMBOL msgpar.";
    yygotominor.yy0->codegen=codegen_expr_expr_COLON_SYMBOL_msgpar;
    yygotominor.yy0->outsource=outsource_expr_expr_COLON_SYMBOL_msgpar;
}
#line 2933 "./parser.c"
  yy_destructor(33,&yymsp[-2].minor);
        break;
      case 130:
#line 1213 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(4,yymsp[-6].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr COLON LPAR dotsymbol RPAR SYMBOL msgpar.";
    yygotominor.yy0->codegen=codegen_expr_expr_COLON_LPAR_dotsymbol_RPAR_SYMBOL_msgpar;
    yygotominor.yy0->outsource=outsource_expr_expr_COLON_LPAR_dotsymbol_RPAR_SYMBOL_msgpar;
}
#line 2944 "./parser.c"
  yy_destructor(33,&yymsp[-5].minor);
  yy_destructor(40,&yymsp[-4].minor);
  yy_destructor(41,&yymsp[-2].minor);
        break;
      case 131:
#line 1220 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(5,yymsp[-8].minor.yy0,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr COLON LPAR dotsymbol AT dotsymbol RPAR SYMBOL msgpar.";
    yygotominor.yy0->codegen=codegen_expr_expr_COLON_LPAR_dotsymbol_AT_dotsymbol_RPAR_SYMBOL_msgpar;
    yygotominor.yy0->outsource=outsource_expr_expr_COLON_LPAR_dotsymbol_AT_dotsymbol_RPAR_SYMBOL_msgpar;
}
#line 2957 "./parser.c"
  yy_destructor(33,&yymsp[-7].minor);
  yy_destructor(40,&yymsp[-6].minor);
  yy_destructor(67,&yymsp[-4].minor);
  yy_destructor(41,&yymsp[-2].minor);
        break;
      case 132:
#line 1227 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= ddotsymbol LPAR lfuncpar RPAR.";
    yygotominor.yy0->codegen=codegen_expr_ddotsymbol_LPAR_lfuncpar_RPAR;
    yygotominor.yy0->outsource=outsource_expr_ddotsymbol_LPAR_lfuncpar_RPAR;
}
#line 2971 "./parser.c"
  yy_destructor(40,&yymsp[-2].minor);
  yy_destructor(41,&yymsp[0].minor);
        break;
      case 133:
#line 1234 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-1].minor.yy0,yymsp[-2].minor.yy0); //sorrend!
    yygotominor.yy0->text="expr ::= LPAR lexpr RPAR.";
    yygotominor.yy0->lineno=yymsp[-2].minor.yy0->lineno;
    yygotominor.yy0->codegen=codegen_expr_LPAR_lexpr_RPAR;
    yygotominor.yy0->outsource=outsource_expr_LPAR_lexpr_RPAR;
}
#line 2984 "./parser.c"
  yy_destructor(41,&yymsp[0].minor);
        break;
      case 134:
#line 1242 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0,yymsp[-5].minor.yy0); //sorrend!
    yygotominor.yy0->text="expr ::= LBRACE PIPE bargument PIPE lexpr RBRACE.";
    yygotominor.yy0->lineno=yymsp[-5].minor.yy0->lineno;
    yygotominor.yy0->codegen=codegen_expr_LBRACE_PIPE_bargument_PIPE_lexpr_RBRACE;
    yygotominor.yy0->outsource=outsource_expr_LBRACE_PIPE_bargument_PIPE_lexpr_RBRACE;

    //!
    blockflag=0;
    nodetab_blkarg->clean();
}
#line 3000 "./parser.c"
  yy_destructor(77,&yymsp[-4].minor);
  yy_destructor(77,&yymsp[-2].minor);
  yy_destructor(78,&yymsp[0].minor);
        break;
      case 135:
#line 1254 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(3,yymsp[-5].minor.yy0,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= IF LPAR expr COMMA expr COMMA expr RPAR.";
    yygotominor.yy0->codegen=codegen_expr_IF_LPAR_expr_COMMA_expr_COMMA_expr_RPAR;
    yygotominor.yy0->outsource=outsource_expr_IF_LPAR_expr_COMMA_expr_COMMA_expr_RPAR;
}
#line 3013 "./parser.c"
  yy_destructor(60,&yymsp[-7].minor);
  yy_destructor(40,&yymsp[-6].minor);
  yy_destructor(6,&yymsp[-4].minor);
  yy_destructor(6,&yymsp[-2].minor);
  yy_destructor(41,&yymsp[0].minor);
        break;
      case 136:
#line 1261 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= LBRACE lfuncpar RBRACE.";
    yygotominor.yy0->codegen=codegen_expr_LBRACE_lfuncpar_RBRACE;
    yygotominor.yy0->outsource=outsource_expr_LBRACE_lfuncpar_RBRACE;
}
#line 3028 "./parser.c"
  yy_destructor(76,&yymsp[-2].minor);
  yy_destructor(78,&yymsp[0].minor);
        break;
      case 137:
#line 1268 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-3].minor.yy0,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= expr LBRACKET expr RBRACKET.";
    yygotominor.yy0->codegen=codegen_expr_expr_LBRACKET_expr_RBRACKET;
    yygotominor.yy0->outsource=outsource_expr_expr_LBRACKET_expr_RBRACKET;
}
#line 3040 "./parser.c"
  yy_destructor(32,&yymsp[-2].minor);
  yy_destructor(79,&yymsp[0].minor);
        break;
      case 138:
#line 1275 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr ASSIGN expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_ASSIGN_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_ASSIGN_expr;
}
#line 3052 "./parser.c"
  yy_destructor(7,&yymsp[-1].minor);
        break;
      case 139:
#line 1282 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr ADDASS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_ADDASS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_ADDASS_expr;
}
#line 3063 "./parser.c"
  yy_destructor(8,&yymsp[-1].minor);
        break;
      case 140:
#line 1289 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr SUBASS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_SUBASS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_SUBASS_expr;
}
#line 3074 "./parser.c"
  yy_destructor(9,&yymsp[-1].minor);
        break;
      case 141:
#line 1296 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr MULASS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_MULASS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_MULASS_expr;
}
#line 3085 "./parser.c"
  yy_destructor(10,&yymsp[-1].minor);
        break;
      case 142:
#line 1303 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr DIVASS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_DIVASS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_DIVASS_expr;
}
#line 3096 "./parser.c"
  yy_destructor(11,&yymsp[-1].minor);
        break;
      case 143:
#line 1310 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr MODASS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_MODASS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_MODASS_expr;
}
#line 3107 "./parser.c"
  yy_destructor(12,&yymsp[-1].minor);
        break;
      case 144:
#line 1317 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= DBMINUS expr.";
    yygotominor.yy0->codegen=codegen_expr_DBMINUS_expr;
    yygotominor.yy0->outsource=outsource_expr_DBMINUS_expr;
}
#line 3118 "./parser.c"
  yy_destructor(31,&yymsp[-1].minor);
        break;
      case 145:
#line 1324 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= DBPLUS expr.";
    yygotominor.yy0->codegen=codegen_expr_DBPLUS_expr;
    yygotominor.yy0->outsource=outsource_expr_DBPLUS_expr;
}
#line 3129 "./parser.c"
  yy_destructor(30,&yymsp[-1].minor);
        break;
      case 146:
#line 1331 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= expr DBMINUS.";
    yygotominor.yy0->codegen=codegen_expr_expr_DBMINUS;
    yygotominor.yy0->outsource=outsource_expr_expr_DBMINUS;
}
#line 3140 "./parser.c"
  yy_destructor(31,&yymsp[0].minor);
        break;
      case 147:
#line 1338 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[-1].minor.yy0);
    yygotominor.yy0->text="expr ::= expr DBPLUS.";
    yygotominor.yy0->codegen=codegen_expr_expr_DBPLUS;
    yygotominor.yy0->outsource=outsource_expr_expr_DBPLUS;
}
#line 3151 "./parser.c"
  yy_destructor(30,&yymsp[0].minor);
        break;
      case 148:
#line 1345 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr PLUS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_PLUS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_PLUS_expr;
}
#line 3162 "./parser.c"
  yy_destructor(24,&yymsp[-1].minor);
        break;
      case 149:
#line 1352 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr MINUS expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_MINUS_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_MINUS_expr;
}
#line 3173 "./parser.c"
  yy_destructor(25,&yymsp[-1].minor);
        break;
      case 150:
#line 1359 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr STAR expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_STAR_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_STAR_expr;
}
#line 3184 "./parser.c"
  yy_destructor(26,&yymsp[-1].minor);
        break;
      case 151:
#line 1366 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr SLASH expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_SLASH_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_SLASH_expr;
}
#line 3195 "./parser.c"
  yy_destructor(27,&yymsp[-1].minor);
        break;
      case 152:
#line 1373 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr MODULO expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_MODULO_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_MODULO_expr;
}
#line 3206 "./parser.c"
  yy_destructor(28,&yymsp[-1].minor);
        break;
      case 153:
#line 1380 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr DBSTAR expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_DBSTAR_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_DBSTAR_expr;
}
#line 3217 "./parser.c"
  yy_destructor(29,&yymsp[-1].minor);
        break;
      case 154:
#line 1387 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= MINUS expr.";
    yygotominor.yy0->codegen=codegen_expr_MINUS_expr;
    yygotominor.yy0->outsource=outsource_expr_MINUS_expr;
}
#line 3228 "./parser.c"
  yy_destructor(25,&yymsp[-1].minor);
        break;
      case 155:
#line 1394 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= PLUS expr.";
    yygotominor.yy0->codegen=codegen_expr_PLUS_expr;
    yygotominor.yy0->outsource=outsource_expr_PLUS_expr;
}
#line 3239 "./parser.c"
  yy_destructor(24,&yymsp[-1].minor);
        break;
      case 156:
#line 1401 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr EQEQ expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_EQEQ_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_EQEQ_expr;
}
#line 3250 "./parser.c"
  yy_destructor(17,&yymsp[-1].minor);
        break;
      case 157:
#line 1408 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr EXEQ expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_EXEQ_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_EXEQ_expr;
}
#line 3261 "./parser.c"
  yy_destructor(20,&yymsp[-1].minor);
        break;
      case 158:
#line 1415 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr GTEQ expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_GTEQ_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_GTEQ_expr;
}
#line 3272 "./parser.c"
  yy_destructor(18,&yymsp[-1].minor);
        break;
      case 159:
#line 1422 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr LTEQ expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_LTEQ_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_LTEQ_expr;
}
#line 3283 "./parser.c"
  yy_destructor(19,&yymsp[-1].minor);
        break;
      case 160:
#line 1429 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr GT expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_GT_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_GT_expr;
}
#line 3294 "./parser.c"
  yy_destructor(21,&yymsp[-1].minor);
        break;
      case 161:
#line 1436 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr LT expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_LT_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_LT_expr;
}
#line 3305 "./parser.c"
  yy_destructor(22,&yymsp[-1].minor);
        break;
      case 162:
#line 1443 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr DOLLAR expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_DOLLAR_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_DOLLAR_expr;
}
#line 3316 "./parser.c"
  yy_destructor(23,&yymsp[-1].minor);
        break;
      case 163:
#line 1450 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr OR expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_OR_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_OR_expr;
}
#line 3327 "./parser.c"
  yy_destructor(13,&yymsp[-1].minor);
        break;
      case 164:
#line 1457 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(2,yymsp[-2].minor.yy0,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= expr AND expr.";
    yygotominor.yy0->codegen=codegen_expr_expr_AND_expr;
    yygotominor.yy0->outsource=outsource_expr_expr_AND_expr;
}
#line 3338 "./parser.c"
  yy_destructor(14,&yymsp[-1].minor);
        break;
      case 165:
#line 1464 "./parser.lem"
{
    yygotominor.yy0=(new parsenode)->rule(1,yymsp[0].minor.yy0);
    yygotominor.yy0->text="expr ::= NOT expr.";
    yygotominor.yy0->codegen=codegen_expr_NOT_expr;
    yygotominor.yy0->outsource=outsource_expr_NOT_expr;
}
#line 3349 "./parser.c"
  yy_destructor(15,&yymsp[-1].minor);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yypParser,yygoto);
  if( yyact < YYNSTATE ){
    yy_shift(yypParser,yyact,yygoto,&yygotominor);
  }else if( yyact == YYNSTATE + YYNRULE + 1 ){
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 173 "./parser.lem"

    fprintf(stderr,"Error: syntax error at #line %d %s.\n",
            lexer->getinputlineno(),
            lexer->getinputfspec());

    fflush(0);
    
    //Figyelem:
    //itt a "hivatalos" Lemon interface alá nyúlunk,
    //ami a teljes megértés hiányában könnyen segfault-hoz vezet.
    
    //Parser stack:
    int i;
    fprintf(stderr,"Stack:");
    for(i=1; i<=yypParser->yyidx; i++)
    {
        fprintf(stderr," %s",yyTokenName[yypParser->yystack[i].major]);
        //a parsenode text-je: yypParser->yystack[i].minor.yy0->text
        fflush(0);
    }
    fprintf(stderr,".\n");
    
    //Last input token:
    if( !lexer->geteofflag() )
    {
        fprintf(stderr,"Token: %s (%s).\n",yyTokenName[yymajor],yyminor.yy0->text);
        fflush(0);
    }
    else
    {
        fprintf(stderr,"Token: EOF.\n");
        fflush(0);
    }

    exit(1);

#line 3429 "./parser.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 210 "./parser.lem"

    if(parsing_complete)
    {
        printf("Parsing complete.\n");
    }

#line 3455 "./parser.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
    if( yymajor==0 ) return;
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      if( yyendofinput && yypParser->yyidx>=0 ){
        yymajor = 0;
      }else{
        yymajor = YYNOCODE;
      }
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else if( yyact == YY_ERROR_ACTION ){
      int yymx;
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_shift_action(yypParser,YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }else{
      yy_accept(yypParser);
      yymajor = YYNOCODE;
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
