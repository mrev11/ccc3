#line 2 "ppo/input.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else        /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif       /* __STDC__ */
#endif       /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *   if ( condition_holds )
 *           yyless( 5 );
 *   else
 *           do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
     do \
             { \
             /* Undo effects of setting up yytext. */ \
             *yy_cp = yy_hold_char; \
             YY_RESTORE_YY_MORE_OFFSET \
             yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
             YY_DO_BEFORE_ACTION; /* set up yytext again */ \
             } \
     while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
     {
     FILE *yy_input_file;

     char *yy_ch_buf;                /* input buffer */
     char *yy_buf_pos;               /* current position in input buffer */

     /* Size of input buffer in bytes, not including room for EOB
      * characters.
      */
     yy_size_t yy_buf_size;

     /* Number of characters read into yy_ch_buf, not including EOB
      * characters.
      */
     int yy_n_chars;

     /* Whether we "own" the buffer - i.e., we know we created it,
      * and can realloc() it to grow it, and should free() it to
      * delete it.
      */
     int yy_is_our_buffer;

     /* Whether this is an "interactive" input source; if so, and
      * if we're using stdio for input, then we want to use getc()
      * instead of fread(), to make sure we stop fetching input after
      * each newline.
      */
     int yy_is_interactive;

     /* Whether we're considered to be at the beginning of a line.
      * If so, '^' rules will be active on the next match, otherwise
      * not.
      */
     int yy_at_bol;

     /* Whether to try to fill the input buffer when we reach the
      * end of it.
      */
     int yy_fill_buffer;

     int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
     /* When an EOF's been seen but there's still some text to process
      * then we mark the buffer as YY_EOF_PENDING, to indicate that we
      * shouldn't try reading from the input source any more.  We might
      * still have a bunch of tokens to match, though, because of
      * possible backing-up.
      *
      * When we actually see the EOF, we change the status to "new"
      * (via yyrestart()), so that the user can continue scanning by
      * just pointing yyin at a new input file.
      */
#define YY_BUFFER_EOF_PENDING 2
     };

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;               /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;              /* whether we need to initialize */
static int yy_start = 0;     /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
     { \
     if ( ! yy_current_buffer ) \
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
     yy_current_buffer->yy_is_interactive = is_interactive; \
     }

#define yy_set_bol(at_bol) \
     { \
     if ( ! yy_current_buffer ) \
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
     yy_current_buffer->yy_at_bol = at_bol; \
     }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
     yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
     yy_hold_char = *yy_cp; \
     *yy_cp = '\0'; \
     yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 95
#define YY_END_OF_BUFFER 96
static yyconst short int yy_acclist[205] =
    {   0,
       40,   40,   96,   39,   95,   38,   95,   39,   95,   39,
       95,   39,   95,   34,   39,   95,   39,   95,   39,   95,
       39,   95,   39,   95,   50,   95,   47,   50,   95,   50,
       95,   54,   95,   51,   54,   95,   54,   95,   58,   95,
       55,   58,   95,   58,   95,   62,   95,   59,   62,   95,
       62,   95,   66,   95,   63,   66,   95,   66,   95,   70,
       95,   67,   70,   95,   70,   95,   74,   95,   71,   74,
       95,   74,   95,   78,   95,   75,   78,   95,   78,   95,
       94,   95,   93,   95,   94,   95,   94,   95,   94,   95,
       94,   95,   94,   95,   94,   95,   94,   95,   94,   95,

       46,   95,   43,   46,   95,   46,   95,   46,   95,   40,
       95,   95,    4,   95,    3,   95,    4,   95,    7,   95,
        6,   95,    7,   95,   11,   95,   10,   95,   11,   95,
       11,   95,   14,   95,   13,   95,   14,   95,   14,   95,
       37,   36,   33,   32,   48,   52,   64,   68,   72,   76,
       89,   91,   40,   41,   41,   42,   35,   90,   44,   49,
       53,   56,   60,   65,   69,   73,   77,    1,   23,   17,
       92,   83,   87,   45,    2,    5,    9,   12,    8,   24,
       15,   18,   31,   57,   61,   84,   85,   88,   26,   16,
       86,   30,   25,   21,   29,   81,   19,   22,   28,   79,

       82,   20,   27,   80
    } ;

static yyconst short int yy_accept[392] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    6,    8,   10,   12,
       14,   17,   19,   21,   23,   25,   27,   30,   32,   34,
       37,   39,   41,   44,   46,   48,   51,   53,   55,   58,
       60,   62,   65,   67,   69,   72,   74,   76,   79,   81,
       83,   85,   87,   89,   91,   93,   95,   97,   99,  101,
      103,  106,  108,  110,  112,  113,  115,  117,  119,  121,
      123,  125,  127,  129,  131,  133,  135,  137,  139,  141,

      141,  142,  142,  143,  143,  143,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      145,  145,  146,  146,  146,  146,  147,  147,  147,  147,
      147,  147,  147,  147,  148,  148,  148,  148,  149,  149,
      149,  149,  150,  150,  150,  150,  151,  151,  151,  151,
      152,  152,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  154,  155,  156,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

      158,  158,  158,  158,  158,  158,  158,  158,  159,  159,
      159,  159,  159,  159,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  161,
      161,  161,  161,  162,  162,  162,  162,  163,  163,  163,
      163,  164,  164,  164,  164,  165,  165,  165,  165,  166,
      166,  166,  166,  167,  167,  167,  167,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  169,  169,  169,  169,  170,
      170,  170,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  172,  173,  173,  173,  174,  174,
      174,  174,  175,  175,  175,  176,  177,  178,  179,  180,
      180,  180,  180,  180,  181,  182,  182,  183,  183,  183,
      184,  184,  184,  184,  185,  185,  185,  185,  186,  186,
      186,  186,  186,  187,  188,  188,  189,  189,  190,  190,
      191,  191,  191,  191,  191,  191,  192,  193,  193,  193,
      193,  194,  194,  194,  194,  194,  194,  194,  194,  195,
      195,  195,  195,  196,  196,  196,  197,  197,  197,  198,
      198,  199,  200,  200,  201,  201,  202,  203,  204,  205,
      205

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    1,
        1,    7,    1,    1,    1,    1,    8,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,   10,   11,
        1,   12,    1,    1,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        1,    1,    1,    1,   13,    1,   14,   13,   15,   16,

       17,   18,   19,   13,   20,   13,   13,   21,   22,   23,
       24,   13,   25,   26,   27,   28,   29,   13,   13,   30,
       13,   13,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[31] =
    {   0,
        1,    2,    3,    1,    1,    1,    4,    5,    6,    1,
        1,    7,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8
    } ;

static yyconst short int yy_base[458] =
    {   0,
        0,   10,   21,   33,   45,   57,   69,   81,   93,  105,
      117,  129,  141,  153,  165,  177,  189,  201,  211,  221,
        0,  216,  229,  232, 1074, 1073,  217,  234,  236,  237,
     1076,  239, 1075,  247, 1077, 1082, 1082, 1072, 1069,  246,
      253, 1063,  255,  248, 1070, 1082, 1082,  264, 1082, 1082,
      267, 1082, 1082, 1070, 1082, 1082, 1069, 1082, 1082,  271,
     1082, 1082,  278, 1082, 1082,  280, 1082, 1082,  282, 1082,
     1082, 1066, 1063,  251, 1057,  241,  272,  289,  276, 1082,
     1082, 1063, 1060,    0,  290, 1082, 1082, 1054, 1082, 1082,
     1053, 1082, 1082,  297, 1048, 1082, 1082,  298, 1047, 1057,

     1082, 1054, 1082, 1056,  302, 1082,  299,    0,  306,    0,
     1055,  288, 1040,  293,  297, 1030, 1032,  302, 1051, 1082,
      316, 1082,  314,  323,  325, 1082,  327,  334, 1051, 1050,
     1049, 1048,  336, 1082,  333,  343,  345, 1082,  342,  352,
      354, 1082,  351,  361,  363, 1082,  360,  370, 1045, 1082,
     1042, 1082, 1044,    0,  327,  357,  358, 1028,  378,  365,
     1022, 1040,  384, 1037,    0, 1082,  368, 1082,    0,    0,
      386, 1027, 1024,  388, 1025, 1022, 1035, 1082, 1030, 1033,
     1023, 1020, 1011, 1014, 1004, 1014,  378, 1014, 1014, 1011,
     1002,  999,  393, 1021,  395, 1020,  401,  403,  405, 1019,

      407, 1018,  410, 1017,  412, 1016, 1015, 1082, 1005,  989,
      999,  404,  420, 1082,  417, 1002, 1001,  989,  988, 1003,
     1001, 1005,  995,  994,  982,  982,  983,  985,  981,  983,
      974,  413,  977,  974,  979,  973,  980,  428, 1082,  381,
      990,  429, 1082,  430,  989,  437, 1082,  434,  441,  444,
     1082,  443,  451,  453, 1082,  454,  988,  458, 1082,  455,
      987,  461, 1082,  463,  986,  466, 1082,  464,  985,  975,
      974,  968,  964,  966,  957,  458,  473,  978,  968,  845,
      842,  838,  831,  780, 1082,  765,  769,  759,  341,  763,
      762, 1082,  760,  751,  746,  747,  755,  729,  719,  474,

      731,  475,  723, 1082,  350,  700,  696, 1082,  694,  682,
      476, 1082,  481,  701, 1082, 1082, 1082, 1082, 1082,  677,
      680,  414,  675, 1082, 1082,  672, 1082,  670,  663, 1082,
      669,  655,  483, 1082,  484,  676,  488, 1082,  485,  674,
      435,  658, 1082, 1082,  657, 1082,  656, 1082,  480, 1082,
      652,  651,  639,  625,  482, 1082, 1082,  621,  479,  484,
     1082,  474,  478,  471,  453,  423,  490,  408, 1082,  401,
      382,  382, 1082,  369,  305, 1082,  284,  270, 1082,  269,
     1082, 1082,  254, 1082,  233, 1082, 1082, 1082, 1082, 1082,
      507,  515,  523,  531,  539,  547,  555,  563,  571,  579,

      587,  595,  603,  611,  619,  627,  635,  643,  651,  658,
      665,  672,  679,  686,  693,  700,  707,  715,  723,  731,
      739,  747,  755,  763,  222,  770,  777,  785,  208,   11,
        1,  793,  801,  804,  812,  820,  828,  836,  843,  850,
      858,  866,  874,  882,  890,  898,  906,  914,  917,  920,
      923,  931,  939,  947,  955,  963,  971
    } ;

static yyconst short int yy_def[458] =
    {   0,
      391,  391,  392,  392,  393,  393,  394,  394,  395,  395,
      396,  396,  397,  397,  398,  398,  399,  399,  400,  400,
       20,   20,  401,  401,  402,  402,  403,  403,  404,  404,
      405,  405,  406,  406,  390,  390,  390,  407,  408,  390,
      390,  390,  390,  390,  409,  390,  390,  410,  390,  390,
      411,  390,  390,  412,  390,  390,  413,  390,  390,  414,
      390,  390,  415,  390,  390,  416,  390,  390,  417,  390,
      390,  418,  419,  390,  390,  390,  390,  390,  390,  390,
      390,  420,  421,  422,  423,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  407,

      390,  408,  390,  424,  390,  390,  390,  425,  390,   44,
      409,  390,  390,  390,  390,  390,  390,  390,  409,  390,
      390,  390,  390,  410,  390,  390,  390,  411,  426,  412,
      427,  413,  390,  390,  390,  414,  390,  390,  390,  415,
      390,  390,  390,  416,  390,  390,  390,  417,  418,  390,
      419,  390,  428,  429,  390,  390,  390,  390,  390,  390,
      390,  420,  390,  421,  422,  390,  423,  390,  430,  431,
      390,  390,  390,  390,  390,  390,  424,  390,  432,  433,
      434,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  435,  436,  437,  438,  439,  440,  441,  442,

      443,  444,  445,  446,  447,  448,  428,  390,  449,  390,
      390,  390,  390,  390,  390,  450,  451,  390,  390,  432,
      432,  433,  434,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  435,  390,  435,
      436,  437,  390,  437,  438,  390,  390,  390,  439,  390,
      390,  390,  440,  441,  390,  441,  442,  443,  390,  443,
      444,  445,  390,  445,  446,  447,  390,  447,  448,  449,
      390,  390,  390,  390,  390,  390,  452,  453,  450,  390,
      451,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  454,

      455,  456,  457,  390,  390,  390,  390,  390,  390,  390,
      452,  390,  452,  453,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  454,  390,  454,  455,  456,  390,  456,  457,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,    0,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390
    } ;

static yyconst short int yy_nxt[1113] =
    {   0,
      390,   70,   37,   38,   70,   39,  390,   40,  217,   41,
       42,   43,   37,   38,   44,   39,   45,   40,  216,   41,
       42,   46,   47,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   47,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   49,   50,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   50,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   52,
       53,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   53,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   55,   56,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   56,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   58,   59,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       59,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   61,   62,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   62,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   64,   65,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   65,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   67,
       68,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   68,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   71,   72,  209,   73,   78,   74,   87,
       79,   75,   76,   71,   72,   77,   73,   88,   74,  181,
       81,   75,   82,   81,   83,   82,   87,   83,   90,   90,
       94,   93,  155,   95,   88,  156,   91,   91,   98,   97,
      389,   99,  103,  104,  105,  106,  109,  152,  153,  110,
      107,  111,  112,  113,  114,  121,  122,  115,  125,  126,
      388,  123,  133,  134,  127,  116,  117,  118,  135,  137,
      138,  141,  142,  145,  146,  139,  387,  143,  157,  147,
      159,  158,  161,  160,  386,  158,  167,  168,  171,  174,

      385,  172,  175,  105,  106,  179,  180,  109,  182,  107,
      110,  183,  111,  185,  187,  186,  191,  121,  122,  188,
      193,  194,  384,  123,  121,  122,  125,  126,  155,  192,
      123,  156,  127,  195,  196,  125,  126,  133,  134,  199,
      200,  127,  322,  135,  133,  134,  137,  138,  201,  202,
      135,  341,  139,  137,  138,  141,  142,  203,  204,  139,
      323,  143,  141,  142,  145,  146,  205,  206,  143,  342,
      147,  145,  146,  157,  167,  168,  158,  147,  210,  159,
      211,  161,  160,  239,  158,  213,  214,  171,  121,  174,
      172,  215,  175,  230,  231,  239,  383,  243,  382,  240,

      232,  244,  246,  247,  250,  251,  381,  255,  248,  259,
      252,  256,  263,  260,  267,  322,  264,  380,  268,  274,
      275,  213,  214,  277,  278,  379,  276,  215,  293,  294,
      239,  243,  243,  323,  240,  244,  341,  125,  246,  247,
      300,  301,  246,  247,  248,  250,  251,  376,  248,  302,
      303,  252,  250,  251,  342,  255,  255,  259,  252,  256,
      259,  133,  137,  263,  260,  263,  267,  264,  267,  375,
      141,  145,  268,  309,  310,  312,  334,  338,  312,  313,
      335,  339,  313,  312,  374,  334,  334,  338,  213,  335,
      338,  246,  250,  373,  339,  358,  359,  365,  366,  370,

      371,  372,  360,  369,  367,  377,  378,   36,   36,   36,
       36,   36,   36,   36,   36,   48,   48,   48,   48,   48,
       48,   48,   48,   51,   51,   51,   51,   51,   51,   51,
       51,   54,   54,   54,   54,   54,   54,   54,   54,   57,
       57,   57,   57,   57,   57,   57,   57,   60,   60,   60,
       60,   60,   60,   60,   60,   63,   63,   63,   63,   63,
       63,   63,   63,   66,   66,   66,   66,   66,   66,   66,
       66,   69,   69,   69,   69,   69,   69,   69,   69,   70,
       70,   70,   70,   70,   70,   70,   70,   80,   80,   80,
       80,   80,   80,   80,   80,   84,   84,   84,   84,   84,

       84,   84,   84,   86,   86,   86,   86,   86,   86,   86,
       86,   89,   89,   89,   89,   89,   89,   89,   89,   92,
       92,   92,   92,   92,   92,   92,   92,   96,   96,   96,
       96,   96,   96,   96,   96,  100,  100,  368,  100,  100,
      100,  100,  100,  102,  102,  364,  102,  102,  102,  102,
      102,  119,  119,  119,  119,  119,  119,  119,  119,  124,
      124,  363,  124,  124,  362,  124,  128,  128,  361,  128,
      128,  357,  128,  130,  356,  355,  251,  130,  247,  130,
      132,  354,  353,  352,  132,  351,  132,  136,  136,  350,
      136,  136,  349,  136,  140,  140,  348,  140,  140,  347,

      140,  144,  144,  214,  144,  144,  346,  144,  148,  148,
      345,  148,  148,  344,  148,  149,  149,  343,  149,  149,
      149,  149,  149,  151,  151,  251,  151,  151,  151,  151,
      151,  162,  162,  247,  162,  162,  162,  162,  162,  164,
      164,  332,  164,  164,  164,  164,  164,  165,  165,  165,
      331,  165,  165,  165,  165,  166,  166,  166,  166,  166,
      166,  166,  166,  177,  177,  177,  177,  177,  177,  177,
      177,  197,  330,  329,  328,  327,  326,  197,  198,  325,
      324,  321,  320,  319,  198,  207,  207,  207,  207,  207,
      207,  207,  207,  220,  220,  318,  220,  220,  220,  220,

      220,  222,  222,  222,  222,  222,  222,  222,  222,  223,
      223,  223,  238,  238,  238,  238,  238,  238,  238,  238,
      241,  241,  241,  241,  241,  241,  241,  241,  242,  242,
      242,  242,  242,  242,  242,  242,  245,  245,  245,  245,
      245,  245,  245,  245,  249,  249,  317,  249,  249,  316,
      249,  253,  253,  282,  253,  253,  315,  253,  254,  254,
      254,  254,  254,  254,  254,  254,  257,  257,  257,  257,
      257,  257,  257,  257,  258,  258,  258,  258,  258,  258,
      258,  258,  261,  261,  261,  261,  261,  261,  261,  261,
      262,  262,  262,  262,  262,  262,  262,  262,  265,  265,

      265,  265,  265,  265,  265,  265,  266,  266,  266,  266,
      266,  266,  266,  266,  269,  269,  269,  269,  269,  269,
      269,  269,  270,  270,  270,  279,  279,  279,  281,  281,
      281,  311,  311,  311,  311,  311,  311,  311,  311,  314,
      314,  314,  314,  314,  314,  314,  314,  333,  333,  333,
      333,  333,  333,  333,  333,  336,  336,  336,  336,  336,
      336,  336,  336,  337,  337,  337,  337,  337,  337,  337,
      337,  340,  340,  340,  340,  340,  340,  340,  340,  280,
      214,  308,  307,  306,  305,  304,  271,  146,  142,  138,
      134,  126,  122,  299,  298,  297,  296,  295,  292,  291,

      290,  289,  288,  287,  286,  285,  224,  106,  105,  221,
      284,  283,  282,  280,  273,  272,  271,  208,  146,  142,
      138,  134,  126,  122,  237,  236,  235,  234,  233,  229,
      228,  227,  226,  225,  224,  106,  221,  178,  219,  176,
      218,  173,  163,  163,  211,  212,  208,  150,  150,  131,
      131,  129,  129,  120,  190,  189,  184,  120,  178,  101,
      101,  176,  173,  170,  169,  163,  163,  154,  150,  150,
      131,  129,  120,  108,  101,  101,  390,   97,   93,   85,
       85,   35,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390
    } ;

static yyconst short int yy_chk[1113] =
    {   0,
        0,   21,    1,    1,   21,    1,    0,    1,  431,    1,
        1,    2,    2,    2,    2,    2,    2,    2,  430,    2,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   19,   19,  429,   19,   22,   19,   27,
       22,   19,   20,   20,   20,   20,   20,   27,   20,  425,
       23,   20,   23,   24,   23,   24,   28,   24,   29,   30,
       32,   32,   76,   32,   28,   76,   29,   30,   34,   34,
      385,   34,   40,   40,   41,   41,   43,   74,   74,   43,
       41,   43,   44,   44,   44,   48,   48,   44,   51,   51,
      383,   48,   60,   60,   51,   44,   44,   44,   60,   63,
       63,   66,   66,   69,   69,   63,  380,   66,   77,   69,
       78,   77,   79,   78,  378,   79,   85,   85,   94,   98,

      377,   94,   98,  105,  105,  107,  107,  109,  112,  105,
      109,  112,  109,  114,  115,  114,  118,  121,  121,  115,
      123,  123,  375,  121,  124,  124,  125,  125,  155,  118,
      124,  155,  125,  127,  127,  128,  128,  133,  133,  135,
      135,  128,  289,  133,  136,  136,  137,  137,  139,  139,
      136,  305,  137,  140,  140,  141,  141,  143,  143,  140,
      289,  141,  144,  144,  145,  145,  147,  147,  144,  305,
      145,  148,  148,  156,  167,  167,  156,  148,  157,  159,
      157,  160,  159,  240,  160,  163,  163,  171,  240,  174,
      171,  163,  174,  187,  187,  193,  374,  195,  372,  193,

      187,  195,  197,  197,  198,  198,  371,  199,  197,  201,
      198,  199,  203,  201,  205,  322,  203,  370,  205,  212,
      212,  213,  213,  215,  215,  368,  212,  213,  232,  232,
      238,  242,  244,  322,  238,  242,  341,  244,  246,  246,
      248,  248,  249,  249,  246,  250,  250,  366,  249,  252,
      252,  250,  253,  253,  341,  254,  256,  260,  253,  254,
      258,  256,  260,  262,  258,  264,  268,  262,  266,  365,
      264,  268,  266,  276,  276,  277,  300,  302,  311,  277,
      300,  302,  311,  313,  364,  333,  335,  339,  313,  333,
      337,  335,  339,  363,  337,  349,  349,  355,  355,  360,

      360,  362,  349,  359,  355,  367,  367,  391,  391,  391,
      391,  391,  391,  391,  391,  392,  392,  392,  392,  392,
      392,  392,  392,  393,  393,  393,  393,  393,  393,  393,
      393,  394,  394,  394,  394,  394,  394,  394,  394,  395,
      395,  395,  395,  395,  395,  395,  395,  396,  396,  396,
      396,  396,  396,  396,  396,  397,  397,  397,  397,  397,
      397,  397,  397,  398,  398,  398,  398,  398,  398,  398,
      398,  399,  399,  399,  399,  399,  399,  399,  399,  400,
      400,  400,  400,  400,  400,  400,  400,  401,  401,  401,
      401,  401,  401,  401,  401,  402,  402,  402,  402,  402,

      402,  402,  402,  403,  403,  403,  403,  403,  403,  403,
      403,  404,  404,  404,  404,  404,  404,  404,  404,  405,
      405,  405,  405,  405,  405,  405,  405,  406,  406,  406,
      406,  406,  406,  406,  406,  407,  407,  358,  407,  407,
      407,  407,  407,  408,  408,  354,  408,  408,  408,  408,
      408,  409,  409,  409,  409,  409,  409,  409,  409,  410,
      410,  353,  410,  410,  352,  410,  411,  411,  351,  411,
      411,  347,  411,  412,  345,  342,  340,  412,  336,  412,
      413,  332,  331,  329,  413,  328,  413,  414,  414,  326,
      414,  414,  323,  414,  415,  415,  321,  415,  415,  320,

      415,  416,  416,  314,  416,  416,  310,  416,  417,  417,
      309,  417,  417,  307,  417,  418,  418,  306,  418,  418,
      418,  418,  418,  419,  419,  303,  419,  419,  419,  419,
      419,  420,  420,  301,  420,  420,  420,  420,  420,  421,
      421,  299,  421,  421,  421,  421,  421,  422,  422,  422,
      298,  422,  422,  422,  422,  423,  423,  423,  423,  423,
      423,  423,  423,  424,  424,  424,  424,  424,  424,  424,
      424,  426,  297,  296,  295,  294,  293,  426,  427,  291,
      290,  288,  287,  286,  427,  428,  428,  428,  428,  428,
      428,  428,  428,  432,  432,  284,  432,  432,  432,  432,

      432,  433,  433,  433,  433,  433,  433,  433,  433,  434,
      434,  434,  435,  435,  435,  435,  435,  435,  435,  435,
      436,  436,  436,  436,  436,  436,  436,  436,  437,  437,
      437,  437,  437,  437,  437,  437,  438,  438,  438,  438,
      438,  438,  438,  438,  439,  439,  283,  439,  439,  282,
      439,  440,  440,  281,  440,  440,  280,  440,  441,  441,
      441,  441,  441,  441,  441,  441,  442,  442,  442,  442,
      442,  442,  442,  442,  443,  443,  443,  443,  443,  443,
      443,  443,  444,  444,  444,  444,  444,  444,  444,  444,
      445,  445,  445,  445,  445,  445,  445,  445,  446,  446,

      446,  446,  446,  446,  446,  446,  447,  447,  447,  447,
      447,  447,  447,  447,  448,  448,  448,  448,  448,  448,
      448,  448,  449,  449,  449,  450,  450,  450,  451,  451,
      451,  452,  452,  452,  452,  452,  452,  452,  452,  453,
      453,  453,  453,  453,  453,  453,  453,  454,  454,  454,
      454,  454,  454,  454,  454,  455,  455,  455,  455,  455,
      455,  455,  455,  456,  456,  456,  456,  456,  456,  456,
      456,  457,  457,  457,  457,  457,  457,  457,  457,  279,
      278,  275,  274,  273,  272,  271,  270,  269,  265,  261,
      257,  245,  241,  237,  236,  235,  234,  233,  231,  230,

      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  218,  217,  216,  211,  210,  209,  207,  206,  204,
      202,  200,  196,  194,  192,  191,  190,  189,  188,  186,
      185,  184,  183,  182,  181,  180,  179,  177,  176,  175,
      173,  172,  164,  162,  161,  158,  153,  151,  149,  132,
      131,  130,  129,  119,  117,  116,  113,  111,  104,  102,
      100,   99,   95,   91,   88,   83,   82,   75,   73,   72,
       57,   54,   45,   42,   39,   38,   35,   33,   31,   26,
       25,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "./input.lex"
#define INITIAL 0
/*
 *  CCC - The Clipper to C++ Compiler
 *  Copyright (C) 2005 ComFirm BT.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
#define st_ifdef 1
#define st_ifndef 2
#define st_ifeq 3
#define st_ifneq 4

#define st_elifdef 5
#define st_elifndef 6
#define st_elifeq 7
#define st_elifneq 8

#define st_waitelse 9
#define st_waitendif 10

#define st_incl 11

#define st_comment 12

#define st_raw 13
#define st_waitraw 14

#define st_clang 15
#define st_waitcend 16

#line 30 "./input.lex"

//Ez a flex program vezérli az input olvasását
//
//  végzi az inkludálást,
//  kihagyja az ifdef/else/endif kihagyandó részeit,
//  kihagyja a kommenteket,
//  kiegyenesíti a folytatósorokat,
//  szétválasztja az egy sorba írt utasításokat,
//  számolja a sorokat,
//  kikerüli a stringeket.

//Figyelem:
//  A "st_comment" név helyett nem jó az egyszerű "comment",
//  mert a Windowson include filékben (msxml.h) zavart okoz
//  a Flex által generált '#define comment 8' makró.


#include <string.h>
#include <cccapi.h>

//a generalt kodban:
//#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
//gcc 4.3.2 warning: ignoring return value
//#define ECHO (0==fwrite(yytext,yyleng,1,yyout))

//Bizonyos esetekben (folytatósor, sorelválasztó ;)
//a generált kimeneten CR jelenhet meg, ami a további
//fordítást elrontja, ezért legegyszerűbb, ha a CR
//karaktereket, már a bemenet olvasásakor eldobjuk.
//Ugyancsak el kell dobni a filék végén lévő esetleges
//eof (chr(26)) karaktert, amit a UNIX nem fogad el.



#define YY_INPUT(buf,result,max_size)  yy_input(buf,&result,max_size)

static char *reproctxt=0;
static int   reproclen=0;
static int   reprocidx=0;

int yy_input(char *buf, int *result, int max_size)
{
    if( reproctxt!=0 )
    {
        int c=26;

        while( (reprocidx<reproclen) && ((c=='\r') || (c==26))  )
        {
            c=reproctxt[reprocidx++];
        }
        if( reprocidx>=reproclen )
        {
            free(reproctxt);
            reproctxt=0;
            reproclen=0;
            reprocidx=0;
        }
        if( c=='\n' )
        {
            --yylineno;
        }
        if( (c!='\r') && (c!=26) )
        {
            buf[0]=c;
            *result=1;
            return *result;
        }
    }

    int c=getc(yyin);

    while( (c=='\r') || (c==26) )
    {
        c=getc(yyin);
    }

    static int eof_reached=0;

    if( c!=EOF )
    {
        eof_reached=0;
        buf[0]=c;
        *result=1;
    }
    else
    {
        if(eof_reached==0)
        {
            //mesterséges \n a file végén
            //néha gond, ha az utolsó sor végén nincs \n
            //ilyen eset pl. ? //<<EOF>>
            //mert \n hiánya miatt nem illeszkedik a COMMENT1 szabály

            eof_reached=1;
            buf[0]='\n';   //mesterséges \n
            *result=1;
        }
        else
        {
            *result=YY_NULL;
        }
    }

    //printf("%c",c);
    return *result;
}



#define YY_NEVER_INTERACTIVE     1

#define MAX_INCLUDE_DEPTH       10
#define MAX_LINE_SIZE         8192
#define MAX_STATE_DEPTH         20

static YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
static unsigned lnumber_stack[MAX_INCLUDE_DEPTH];
static char *fname_stack[MAX_INCLUDE_DEPTH];
static int include_stack_ptr=0;
static int include_changed=0;

static int state_stack[MAX_STATE_DEPTH];
static int state_stack_ptr=0;

static char *outbuf=0;
static int  outbuf_idx=0;
static int  outbuf_siz=0;
static int  outlineno=0;
static int  outtype=0;

static char *filein;

extern void error(const char*);
static void procinclude(void);
static void procifdef(int type);
static void statepush(int state);
static void statepop(void);
static char *getfilename();
static char *tabular(int p);
static void outchar(int c);
static void outtrim();
static void outstr(const char *s);
static int  outempty(void);
static void printbuf(void);
static void counter(void);

extern void _clp_nextline(int argno);
extern void _clp_prepro(int argno);
extern void _clp_define(int argno);
extern void _clp_undef(int argno);
extern void _clp_translate(int argno);
extern void _clp_searchdefine(int argno);
extern void _clp_searchinclude(int argno);


#define IFDEF_STACK 32
static int ifdef_stack[IFDEF_STACK]={0};
static int ifdef_level=0; // stack pointer a top-ra

static void assert_open()
{
    if( ifdef_level<=0 )
        error("#else/#endif directive without #if");
}

static void assert_closed()
{
    if( ifdef_level!=0 )
        error("Unclosed #if directive at EOF");
}

static void ifdef_push()
{
    if( ifdef_level+1>=IFDEF_STACK )
    {
        error("ifdef_stack overflow");
    }
    else
    {
        BEGIN( ifdef_stack[++ifdef_level]=0 ); // belső ifdef kezdő állapota
    }
}

static void ifdef_pop()
{
    if( ifdef_level<=0 )
    { 
        error("#endif directive without #if");
    }
    else
    {
        BEGIN( ifdef_stack[--ifdef_level] ); // külső ifdef utolsó állapota
    }
}

static void ifdef_state(int state)
{
    BEGIN( ifdef_stack[ifdef_level]=state );
}



static char *raw_symbol=0;

static void raw_beg(int state)
{
    raw_symbol=strdup(yytext);
    statepush(state);
}

static void raw_end()
{
    if( 0==strcmp(raw_symbol,yytext) )
    {
        free(raw_symbol);
        statepop();
    }
}

#line 1049 "ppo/input.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
static int yy_ignored_retcode;
#define ECHO (yy_ignored_retcode=fwrite(yytext,yyleng,1,yyout))
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
     {
      yy_state_type yy_current_state;
      char *yy_cp, *yy_bp;
      int yy_act;

#line 265 "./input.lex"


#line 1207 "ppo/input.cpp"

     if ( yy_init )
             {
             yy_init = 0;

#ifdef YY_USER_INIT
             YY_USER_INIT;
#endif

             if ( ! yy_start )
                     yy_start = 1;   /* first start state */

             if ( ! yyin )
                     yyin = stdin;

             if ( ! yyout )
                     yyout = stdout;

             if ( ! yy_current_buffer )
                     yy_current_buffer =
                             yy_create_buffer( yyin, YY_BUF_SIZE );

             yy_load_buffer_state();
             }

     while ( 1 )             /* loops until end-of-file is reached */
             {
             yy_cp = yy_c_buf_p;

             /* Support of yytext. */
             *yy_cp = yy_hold_char;

             /* yy_bp points to the position in yy_ch_buf of the start of
              * the current run.
              */
             yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			 YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 391 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1082 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

             YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:   /* This label is used only to access EOF actions. */


             switch ( yy_act )
     { /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 267 "./input.lex"
{outstr(yytext);raw_beg(st_raw);}
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 269 "./input.lex"
{outstr(yytext);raw_end();}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 270 "./input.lex"
outchar(*yytext);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 271 "./input.lex"
outchar(*yytext);
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 274 "./input.lex"
{raw_end();}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 275 "./input.lex"

	YY_BREAK
case 7:
YY_RULE_SETUP
#line 276 "./input.lex"

	YY_BREAK

case 8:
YY_RULE_SETUP
#line 279 "./input.lex"
{outchar('\n');outstr(yytext);statepush(st_clang);}
	YY_BREAK

case 9:
YY_RULE_SETUP
#line 281 "./input.lex"
{outstr(yytext);statepop();outtype=9;printbuf();}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 282 "./input.lex"
{outchar(*yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 283 "./input.lex"
{outchar(*yytext);}
	YY_BREAK


case 12:
YY_RULE_SETUP
#line 286 "./input.lex"
{statepop();}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 287 "./input.lex"

	YY_BREAK
case 14:
YY_RULE_SETUP
#line 288 "./input.lex"

	YY_BREAK

case 15:
YY_RULE_SETUP
#line 291 "./input.lex"
{ifdef_push();statepush(st_ifdef);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 292 "./input.lex"
{ifdef_push();statepush(st_ifndef);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 293 "./input.lex"
{ifdef_push();statepush(st_ifeq);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 294 "./input.lex"
{ifdef_push();statepush(st_ifneq);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 295 "./input.lex"
{assert_open();ifdef_state(st_waitendif);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 296 "./input.lex"
{assert_open();ifdef_state(st_waitendif);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 297 "./input.lex"
{assert_open();ifdef_state(st_waitendif);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 298 "./input.lex"
{assert_open();ifdef_state(st_waitendif);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 299 "./input.lex"
{assert_open();ifdef_state(st_waitendif);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 300 "./input.lex"
{ifdef_pop();}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 302 "./input.lex"
statepush(st_incl);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 303 "./input.lex"
{if(outtype==0){outtype=1;}else{outstr(yytext);}}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 304 "./input.lex"
{if(outtype==0){outtype=2;}else{outstr(yytext);}}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 305 "./input.lex"
{if(outtype==0){outtype=2;}else{outstr(yytext);}}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 306 "./input.lex"
{if(outtype==0){outtype=3;}else{outstr(yytext);}}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 307 "./input.lex"
{if(outtype==0){outtype=3;}else{outstr(yytext);}}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 308 "./input.lex"
{if(outtype==0){outtype=4;}else{outstr(yytext);}}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 311 "./input.lex"
//comment
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 312 "./input.lex"
//folytató //comment
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 313 "./input.lex"
{outtrim();if(reproctxt==0){outchar(';');}else{printbuf();}} //szétválasztó
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 314 "./input.lex"
printbuf(); //egysoros
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 315 "./input.lex"
statepush(st_comment); //többsoros
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 316 "./input.lex"
outstr(yytext);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 317 "./input.lex"
printbuf();
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 318 "./input.lex"
outchar(*yytext);
	YY_BREAK

case 40:
YY_RULE_SETUP
#line 322 "./input.lex"

	YY_BREAK
case 41:
YY_RULE_SETUP
#line 323 "./input.lex"

	YY_BREAK
case 42:
YY_RULE_SETUP
#line 324 "./input.lex"
statepop();
	YY_BREAK


case 43:
YY_RULE_SETUP
#line 329 "./input.lex"

	YY_BREAK
case 44:
YY_RULE_SETUP
#line 330 "./input.lex"
{procinclude();}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 331 "./input.lex"
{procinclude();statepush(st_comment);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 332 "./input.lex"
error("Syntax ERROR in #include directive");
	YY_BREAK


case 47:
YY_RULE_SETUP
#line 336 "./input.lex"

	YY_BREAK
case 48:
YY_RULE_SETUP
#line 337 "./input.lex"
{procifdef(0);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 338 "./input.lex"
{procifdef(0);statepush(st_comment);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 339 "./input.lex"
error("Syntax ERROR in #ifdef directive");
	YY_BREAK


case 51:
YY_RULE_SETUP
#line 343 "./input.lex"

	YY_BREAK
case 52:
YY_RULE_SETUP
#line 344 "./input.lex"
{procifdef(1);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 345 "./input.lex"
{procifdef(1);statepush(st_comment);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 346 "./input.lex"
error("Syntax ERROR in #ifndef directive");
	YY_BREAK


case 55:
YY_RULE_SETUP
#line 350 "./input.lex"

	YY_BREAK
case 56:
YY_RULE_SETUP
#line 351 "./input.lex"
{procifdef(2);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 352 "./input.lex"
{procifdef(2);statepush(st_comment);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 353 "./input.lex"
error("Syntax ERROR in #ifeq directive");
	YY_BREAK


case 59:
YY_RULE_SETUP
#line 358 "./input.lex"

	YY_BREAK
case 60:
YY_RULE_SETUP
#line 359 "./input.lex"
{procifdef(3);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 360 "./input.lex"
{procifdef(3);statepush(st_comment);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 361 "./input.lex"
error("Syntax ERROR in #ifneq directive");
	YY_BREAK


case 63:
YY_RULE_SETUP
#line 365 "./input.lex"

	YY_BREAK
case 64:
YY_RULE_SETUP
#line 366 "./input.lex"
{procifdef(4);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 367 "./input.lex"
{procifdef(4);statepush(st_comment);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 368 "./input.lex"
error("Syntax ERROR in #else ifdef directive");
	YY_BREAK


case 67:
YY_RULE_SETUP
#line 373 "./input.lex"

	YY_BREAK
case 68:
YY_RULE_SETUP
#line 374 "./input.lex"
{procifdef(5);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 375 "./input.lex"
{procifdef(5);statepush(st_comment);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 376 "./input.lex"
error("Syntax ERROR in #else ifndef directive");
	YY_BREAK


case 71:
YY_RULE_SETUP
#line 380 "./input.lex"

	YY_BREAK
case 72:
YY_RULE_SETUP
#line 381 "./input.lex"
{procifdef(6);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 382 "./input.lex"
{procifdef(6);statepush(st_comment);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 383 "./input.lex"
error("Syntax ERROR in #else ifeq directive");
	YY_BREAK


case 75:
YY_RULE_SETUP
#line 388 "./input.lex"

	YY_BREAK
case 76:
YY_RULE_SETUP
#line 389 "./input.lex"
{procifdef(7);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 390 "./input.lex"
{procifdef(7);statepush(st_comment);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 391 "./input.lex"
error("Syntax ERROR in #else ifneq directive");
	YY_BREAK


case 79:
YY_RULE_SETUP
#line 397 "./input.lex"
{assert_open();statepush(st_ifdef);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 398 "./input.lex"
{assert_open();statepush(st_ifndef);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 399 "./input.lex"
{assert_open();statepush(st_ifeq);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 400 "./input.lex"
{assert_open();statepush(st_ifneq);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 401 "./input.lex"
{assert_open();ifdef_state(0);}
	YY_BREAK


case 84:
YY_RULE_SETUP
#line 406 "./input.lex"
{ifdef_pop();}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 407 "./input.lex"
{ifdef_push();ifdef_state(st_waitendif);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 408 "./input.lex"
{ifdef_push();ifdef_state(st_waitendif);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 409 "./input.lex"
{ifdef_push();ifdef_state(st_waitendif);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 410 "./input.lex"
{ifdef_push();ifdef_state(st_waitendif);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 411 "./input.lex"

	YY_BREAK
case 90:
YY_RULE_SETUP
#line 412 "./input.lex"

	YY_BREAK
case 91:
YY_RULE_SETUP
#line 413 "./input.lex"
statepush(st_comment); //többsoros
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 414 "./input.lex"
{raw_beg(st_waitraw);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 415 "./input.lex"

	YY_BREAK
case 94:
YY_RULE_SETUP
#line 416 "./input.lex"

	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(st_ifdef):
case YY_STATE_EOF(st_ifndef):
case YY_STATE_EOF(st_ifeq):
case YY_STATE_EOF(st_ifneq):
case YY_STATE_EOF(st_elifdef):
case YY_STATE_EOF(st_elifndef):
case YY_STATE_EOF(st_elifeq):
case YY_STATE_EOF(st_elifneq):
case YY_STATE_EOF(st_waitelse):
case YY_STATE_EOF(st_waitendif):
case YY_STATE_EOF(st_incl):
case YY_STATE_EOF(st_comment):
case YY_STATE_EOF(st_raw):
case YY_STATE_EOF(st_waitraw):
case YY_STATE_EOF(st_clang):
case YY_STATE_EOF(st_waitcend):
#line 420 "./input.lex"
{

    if( YYSTATE==st_raw )
    {
        char buf[256];
        sprintf(buf,"Unclosed long string %s at EOF",raw_symbol);
        error(buf);
    }

    printbuf();

    printf("\n%sEnd %s ",tabular(include_stack_ptr),getfilename());

    if( --include_stack_ptr<0 )
    {
        assert_closed();
        outtype=0;
        outchar('\n');
        printbuf();
        yyterminate();
    }
    else
    {
        fclose(yyin);
        yy_delete_buffer( YY_CURRENT_BUFFER );
        yy_switch_to_buffer(include_stack[include_stack_ptr] );
        free(fname_stack[include_stack_ptr]);
        yylineno=lnumber_stack[include_stack_ptr];
    }
    include_changed=1;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 452 "./input.lex"
ECHO;
	YY_BREAK
#line 1856 "ppo/input.cpp"

     case YY_END_OF_BUFFER:
             {
             /* Amount of text matched not including the EOB char. */
             int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

             /* Undo the effects of YY_DO_BEFORE_ACTION. */
             *yy_cp = yy_hold_char;
             YY_RESTORE_YY_MORE_OFFSET

             if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
                     {
                     /* We're scanning a new file or input source.  It's
                      * possible that this happened because the user
                      * just pointed yyin at a new source and called
                      * yylex().  If so, then we have to assure
                      * consistency between yy_current_buffer and our
                      * globals.  Here is the right place to do so, because
                      * this is the first action (other than possibly a
                      * back-up) that will match for the new input source.
                      */
                     yy_n_chars = yy_current_buffer->yy_n_chars;
                     yy_current_buffer->yy_input_file = yyin;
                     yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
                     }

             /* Note that here we test for yy_c_buf_p "<=" to the position
              * of the first EOB in the buffer, since yy_c_buf_p will
              * already have been incremented past the NUL character
              * (since all states make transitions on EOB to the
              * end-of-buffer state).  Contrast this with the test
              * in input().
              */
             if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                     { /* This was really a NUL. */
                     yy_state_type yy_next_state;

                     yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                     yy_current_state = yy_get_previous_state();

                     /* Okay, we're now positioned to make the NUL
                      * transition.  We couldn't have
                      * yy_get_previous_state() go ahead and do it
                      * for us because it doesn't know how to deal
                      * with the possibility of jamming (and we don't
                      * want to build jamming into it because then it
                      * will run more slowly).
                      */

                     yy_next_state = yy_try_NUL_trans( yy_current_state );

                     yy_bp = yytext_ptr + YY_MORE_ADJ;

                     if ( yy_next_state )
                             {
                             /* Consume the NUL. */
                             yy_cp = ++yy_c_buf_p;
                             yy_current_state = yy_next_state;
                             goto yy_match;
                             }

                     else
                             {
				yy_cp = yy_c_buf_p;
                             goto yy_find_action;
                             }
                     }

             else switch ( yy_get_next_buffer() )
                     {
                     case EOB_ACT_END_OF_FILE:
                             {
                             yy_did_buffer_switch_on_eof = 0;

                             if ( yywrap() )
                                     {
                                     /* Note: because we've taken care in
                                      * yy_get_next_buffer() to have set up
                                      * yytext, we can now set up
                                      * yy_c_buf_p so that if some total
                                      * hoser (like flex itself) wants to
                                      * call the scanner after we return the
                                      * YY_NULL, it'll still work - another
                                      * YY_NULL will get returned.
                                      */
                                     yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                                     yy_act = YY_STATE_EOF(YY_START);
                                     goto do_action;
                                     }

                             else
                                     {
                                     if ( ! yy_did_buffer_switch_on_eof )
                                             YY_NEW_FILE;
                                     }
                             break;
                             }

                     case EOB_ACT_CONTINUE_SCAN:
                             yy_c_buf_p =
                                     yytext_ptr + yy_amount_of_matched_text;

                             yy_current_state = yy_get_previous_state();

                             yy_cp = yy_c_buf_p;
                             yy_bp = yytext_ptr + YY_MORE_ADJ;
                             goto yy_match;

                     case EOB_ACT_LAST_MATCH:
                             yy_c_buf_p =
                             &yy_current_buffer->yy_ch_buf[yy_n_chars];

                             yy_current_state = yy_get_previous_state();

                             yy_cp = yy_c_buf_p;
                             yy_bp = yytext_ptr + YY_MORE_ADJ;
                             goto yy_find_action;
                     }
             break;
             }

     default:
             YY_FATAL_ERROR(
                     "fatal flex scanner internal error--no action found" );
     } /* end of action switch */
             } /* end of scanning one token */
     } /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *   EOB_ACT_LAST_MATCH -
 *   EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *   EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
     {
      char *dest = yy_current_buffer->yy_ch_buf;
      char *source = yytext_ptr;
      int number_to_move, i;
     int ret_val;

     if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
             YY_FATAL_ERROR(
             "fatal flex scanner internal error--end of buffer missed" );

     if ( yy_current_buffer->yy_fill_buffer == 0 )
             { /* Don't try to fill the buffer, so this is an EOF. */
             if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
                     {
                     /* We matched a single character, the EOB, so
                      * treat this as a final EOF.
                      */
                     return EOB_ACT_END_OF_FILE;
                     }

             else
                     {
                     /* We matched some text prior to the EOB, first
                      * process it.
                      */
                     return EOB_ACT_LAST_MATCH;
                     }
             }

     /* Try to read more data. */

     /* First move last chars to start of buffer. */
     number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

     for ( i = 0; i < number_to_move; ++i )
             *(dest++) = *(source++);

     if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
             /* don't do the read, it's not guaranteed to return an EOF,
              * just force an EOF
              */
             yy_current_buffer->yy_n_chars = yy_n_chars = 0;

     else
             {
             int num_to_read =
                     yy_current_buffer->yy_buf_size - number_to_move - 1;

             while ( num_to_read <= 0 )
                     { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
                     YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

                     /* just a shorter name for the current buffer */
                     YY_BUFFER_STATE b = yy_current_buffer;

                     int yy_c_buf_p_offset =
                             (int) (yy_c_buf_p - b->yy_ch_buf);

                     if ( b->yy_is_our_buffer )
                             {
                             int new_size = b->yy_buf_size * 2;

                             if ( new_size <= 0 )
                                     b->yy_buf_size += b->yy_buf_size / 8;
                             else
                                     b->yy_buf_size *= 2;

                             b->yy_ch_buf = (char *)
                                     /* Include room in for 2 EOB chars. */
                                     yy_flex_realloc( (void *) b->yy_ch_buf,
                                                      b->yy_buf_size + 2 );
                             }
                     else
                             /* Can't grow it, we don't own it. */
                             b->yy_ch_buf = 0;

                     if ( ! b->yy_ch_buf )
                             YY_FATAL_ERROR(
                             "fatal error - scanner input buffer overflow" );

                     yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                     num_to_read = yy_current_buffer->yy_buf_size -
                                             number_to_move - 1;
#endif
                     }

             if ( num_to_read > YY_READ_BUF_SIZE )
                     num_to_read = YY_READ_BUF_SIZE;

             /* Read in more data. */
             YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
                     yy_n_chars, num_to_read );

             yy_current_buffer->yy_n_chars = yy_n_chars;
             }

     if ( yy_n_chars == 0 )
             {
             if ( number_to_move == YY_MORE_ADJ )
                     {
                     ret_val = EOB_ACT_END_OF_FILE;
                     yyrestart( yyin );
                     }

             else
                     {
                     ret_val = EOB_ACT_LAST_MATCH;
                     yy_current_buffer->yy_buffer_status =
                             YY_BUFFER_EOF_PENDING;
                     }
             }

     else
             ret_val = EOB_ACT_CONTINUE_SCAN;

     yy_n_chars += number_to_move;
     yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
     yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

     yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

     return ret_val;
     }


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
     {
      yy_state_type yy_current_state;
      char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

     for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
             {
		 YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 391 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
             }

     return yy_current_state;
     }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *   next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
     {
      int yy_is_jam;

	 YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 391 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 390);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

     return yy_is_jam ? 0 : yy_current_state;
     }


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c,  char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
 char *yy_bp;
#endif
     {
      char *yy_cp = yy_c_buf_p;

     /* undo effects of setting up yytext */
     *yy_cp = yy_hold_char;

     if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
             { /* need to shift things up to make room */
             /* +2 for EOB chars. */
              int number_to_move = yy_n_chars + 2;
              char *dest = &yy_current_buffer->yy_ch_buf[
                                     yy_current_buffer->yy_buf_size + 2];
              char *source =
                             &yy_current_buffer->yy_ch_buf[number_to_move];

             while ( source > yy_current_buffer->yy_ch_buf )
                     *--dest = *--source;

             yy_cp += (int) (dest - source);
             yy_bp += (int) (dest - source);
             yy_current_buffer->yy_n_chars =
                     yy_n_chars = yy_current_buffer->yy_buf_size;

             if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                     YY_FATAL_ERROR( "flex scanner push-back overflow" );
             }

     *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

     yytext_ptr = yy_bp;
     yy_hold_char = *yy_cp;
     yy_c_buf_p = yy_cp;
     }
#endif       /* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
     {
     int c;

     *yy_c_buf_p = yy_hold_char;

     if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
             {
             /* yy_c_buf_p now points to the character we want to return.
              * If this occurs *before* the EOB characters, then it's a
              * valid NUL; if not, then we've hit the end of the buffer.
              */
             if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                     /* This was really a NUL. */
                     *yy_c_buf_p = '\0';

             else
                     { /* need more input */
                     int offset = yy_c_buf_p - yytext_ptr;
                     ++yy_c_buf_p;

                     switch ( yy_get_next_buffer() )
                             {
                             case EOB_ACT_LAST_MATCH:
                                     /* This happens because yy_g_n_b()
                                      * sees that we've accumulated a
                                      * token and flags that we need to
                                      * try matching the token before
                                      * proceeding.  But for input(),
                                      * there's no matching to consider.
                                      * So convert the EOB_ACT_LAST_MATCH
                                      * to EOB_ACT_END_OF_FILE.
                                      */

                                     /* Reset buffer status. */
                                     yyrestart( yyin );

                                     /* fall through */

                             case EOB_ACT_END_OF_FILE:
                                     {
                                     if ( yywrap() )
                                             return EOF;

                                     if ( ! yy_did_buffer_switch_on_eof )
                                             YY_NEW_FILE;
#ifdef __cplusplus
                                     return yyinput();
#else
                                     return input();
#endif
                                     }

                             case EOB_ACT_CONTINUE_SCAN:
                                     yy_c_buf_p = yytext_ptr + offset;
                                     break;
                             }
                     }
             }

     c = *(unsigned char *) yy_c_buf_p;      /* cast for 8-bit char's */
     *yy_c_buf_p = '\0';    /* preserve yytext */
     yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

     return c;
     }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
     {
     if ( ! yy_current_buffer )
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

     yy_init_buffer( yy_current_buffer, input_file );
     yy_load_buffer_state();
     }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
     {
     if ( yy_current_buffer == new_buffer )
             return;

     if ( yy_current_buffer )
             {
             /* Flush out information for old buffer. */
             *yy_c_buf_p = yy_hold_char;
             yy_current_buffer->yy_buf_pos = yy_c_buf_p;
             yy_current_buffer->yy_n_chars = yy_n_chars;
             }

     yy_current_buffer = new_buffer;
     yy_load_buffer_state();

     /* We don't actually know whether we did this switch during
      * EOF (yywrap()) processing, but the only time this flag
      * is looked at is after yywrap() is called, so it's safe
      * to go ahead and always set it.
      */
     yy_did_buffer_switch_on_eof = 1;
     }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
     {
     yy_n_chars = yy_current_buffer->yy_n_chars;
     yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
     yyin = yy_current_buffer->yy_input_file;
     yy_hold_char = *yy_c_buf_p;
     }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
     {
     YY_BUFFER_STATE b;

     b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
     if ( ! b )
             YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

     b->yy_buf_size = size;

     /* yy_ch_buf has to be 2 characters longer than the size given because
      * we need to put in 2 end-of-buffer characters.
      */
     b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
     if ( ! b->yy_ch_buf )
             YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

     b->yy_is_our_buffer = 1;

     yy_init_buffer( b, file );

     return b;
     }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
     {
     if ( ! b )
             return;

     if ( b == yy_current_buffer )
             yy_current_buffer = (YY_BUFFER_STATE) 0;

     if ( b->yy_is_our_buffer )
             yy_flex_free( (void *) b->yy_ch_buf );

     yy_flex_free( (void *) b );
     }


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
//extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


     {
     yy_flush_buffer( b );

     b->yy_input_file = file;
     b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
     b->yy_is_interactive = 1;
#else
//#if YY_NEVER_INTERACTIVE
     b->yy_is_interactive = 0;
//#else
//     b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
//#endif
#endif
     }


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

     {
     if ( ! b )
             return;

     b->yy_n_chars = 0;

     /* We always need two end-of-buffer characters.  The first causes
      * a transition to the end-of-buffer state.  The second causes
      * a jam in that state.
      */
     b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
     b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

     b->yy_buf_pos = &b->yy_ch_buf[0];

     b->yy_at_bol = 1;
     b->yy_buffer_status = YY_BUFFER_NEW;

     if ( b == yy_current_buffer )
             yy_load_buffer_state();
     }


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
     {
     YY_BUFFER_STATE b;

     if ( size < 2 ||
          base[size-2] != YY_END_OF_BUFFER_CHAR ||
          base[size-1] != YY_END_OF_BUFFER_CHAR )
             /* They forgot to leave room for the EOB's. */
             return 0;

     b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
     if ( ! b )
             YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

     b->yy_buf_size = size - 2;      /* "- 2" to take care of EOB's */
     b->yy_buf_pos = b->yy_ch_buf = base;
     b->yy_is_our_buffer = 0;
     b->yy_input_file = 0;
     b->yy_n_chars = b->yy_buf_size;
     b->yy_is_interactive = 0;
     b->yy_at_bol = 1;
     b->yy_fill_buffer = 0;
     b->yy_buffer_status = YY_BUFFER_NEW;

     yy_switch_to_buffer( b );

     return b;
     }
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
     {
     int len;
     for ( len = 0; yy_str[len]; ++len )
             ;

     return yy_scan_bytes( yy_str, len );
     }
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
     {
     YY_BUFFER_STATE b;
     char *buf;
     yy_size_t n;
     int i;

     /* Get memory for full buffer, including space for trailing EOB's. */
     n = len + 2;
     buf = (char *) yy_flex_alloc( n );
     if ( ! buf )
             YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

     for ( i = 0; i < len; ++i )
             buf[i] = bytes[i];

     buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

     b = yy_scan_buffer( buf, n );
     if ( ! b )
             YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

     /* It's okay to grow etc. this buffer, and we should throw it
      * away when we're done.
      */
     b->yy_is_our_buffer = 1;

     return b;
     }
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
     {
     if ( yy_start_stack_ptr >= yy_start_stack_depth )
             {
             yy_size_t new_size;

             yy_start_stack_depth += YY_START_STACK_INCR;
             new_size = yy_start_stack_depth * sizeof( int );

             if ( ! yy_start_stack )
                     yy_start_stack = (int *) yy_flex_alloc( new_size );

             else
                     yy_start_stack = (int *) yy_flex_realloc(
                                     (void *) yy_start_stack, new_size );

             if ( ! yy_start_stack )
                     YY_FATAL_ERROR(
                     "out of memory expanding start-condition stack" );
             }

     yy_start_stack[yy_start_stack_ptr++] = YY_START;

     BEGIN(new_state);
     }
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
     {
     if ( --yy_start_stack_ptr < 0 )
             YY_FATAL_ERROR( "start-condition stack underflow" );

     BEGIN(yy_start_stack[yy_start_stack_ptr]);
     }
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
     {
     return yy_start_stack[yy_start_stack_ptr - 1];
     }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
     {
     (void) fprintf( stderr, "%s\n", msg );
     exit( YY_EXIT_FAILURE );
     }



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
     do \
             { \
             /* Undo effects of setting up yytext. */ \
             yytext[yyleng] = yy_hold_char; \
             yy_c_buf_p = yytext + n; \
             yy_hold_char = *yy_c_buf_p; \
             *yy_c_buf_p = '\0'; \
             yyleng = n; \
             } \
     while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
     {
      int i;
     for ( i = 0; i < n; ++i )
             s1[i] = s2[i];
     }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
     {
      int n;
     for ( n = 0; s[n]; ++n )
             ;

     return n;
     }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
     {
     return (void *) malloc( size );
     }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
     {
     /* The cast to (char *) in the following accommodates both
      * implementations that use char* generic pointers, and those
      * that use void* generic pointers.  It works with the latter
      * because both ANSI C and C++ allow castless assignment from
      * any pointer type to void*, and deal with argument conversions
      * as though doing an assignment.
      */
     return (void *) realloc( (char *) ptr, size );
     }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
     {
     free( ptr );
     }

#if YY_MAIN
int main()
     {
     yylex();
     return 0;
     }
#endif
#line 452 "./input.lex"


//---------------------------------------------------------------------------
void _clp_processing(int argno)
{
    CCC_PROLOG("processing",1);
    _clp_convertfspec2nativeformat(1);

    filein=_parb(1);

    //FONTOS
    //a static változók megfelelő inicializálása,
    //másképp a program nem hívható többször

    printf("\nBeg %s ",filein);

    include_changed=0;
    include_stack_ptr=0;
    state_stack_ptr=0;
    outbuf_idx=0;
    outlineno=0;
    outtype=0;
    yylineno=1;

    yyin=fopen(filein,"r");
    if( !yyin )
    {
        yylineno=0;
        error("File not found");
    }

    yylex();

    _ret();
    CCC_EPILOG();
}


//---------------------------------------------------------------------------
static void outbuf_resize(int x)
{
    while(outbuf_idx+x+1>outbuf_siz)
    {
        outbuf=(char*)realloc(outbuf,outbuf_siz+=1024);
    }
}

//---------------------------------------------------------------------------
static void outchar(int c)
{
    if( outbuf_idx==0 && reproctxt==0 )
    {
        outlineno=yylineno;
    }
    outbuf_resize(1);
    outbuf[outbuf_idx]=c;
    outbuf_idx++;
}

//---------------------------------------------------------------------------
static void outtrim()
{
    while( (outbuf!=0) &&
           (outbuf_idx>0) &&
           ((outbuf[outbuf_idx-1]==' ') || (outbuf[outbuf_idx-1]=='\t')) )
    {
        outbuf_idx--;
    }
}

//---------------------------------------------------------------------------
static void outstr(const char *s)
{
    if( outbuf_idx==0 && reproctxt==0 )
    {
        outlineno=yylineno;
    }
    int len=strlen(s);
    outbuf_resize(len);
    memcpy(outbuf+outbuf_idx,s,len);
    outbuf_idx+=len;
}


//---------------------------------------------------------------------------
static int outempty()
{
    outchar(0);
    int c;
    char *p=outbuf;
    while( ((c=*p)==' ')||(c=='\t') ) p++;
    return !c;  //1, ha a string üres
}


//---------------------------------------------------------------------------
static void printbuf()
{
    if( !outempty() )
    {
        static int lastlineno=0;

        binaryn(outbuf);

        if( outtype==0 ) //normál programsor
        {
            ++lastlineno;

            if( include_changed || (lastlineno!=outlineno)  )
            {
                include_changed=0;
                lastlineno=outlineno;
                number(outlineno);
                stringnb(getfilename());
                _clp_nextline(2);
                pop();
            }
            counter();
            _clp_prepro(1);
        }

        else if( outtype==1 ) //#define direktíva
        {
            _clp_define(1);
        }
        else if( outtype==2 ) //#xtranslate direktíva
        {
            logical(0);
            _clp_translate(2);
        }
        else if( outtype==3 ) //#xcommand direktíva
        {
            logical(1);
            _clp_translate(2);
        }
        else if( outtype==4 ) //#undef direktíva
        {
            _clp_undef(1);
        }
        else
        {
            _clp_qqout(1);
        }

        pop();
        outtype=0;
    }

    outbuf_idx=0;
}

//---------------------------------------------------------------------------
void error(const char*txt)
{
    printf("\n%s",txt);
    printf("\nFile(%s) Line(%d) [%s]",getfilename(),yylineno,yytext);
    exit(1);
}

//---------------------------------------------------------------------------
void _clp_error(int argno) //ugyanaz Clipperből
{
    CCC_PROLOG("error",1);
    str2bin(base);
    char *txt=_parb(1);
    error(txt);
    _ret();
    CCC_EPILOG();
}


//---------------------------------------------------------------------------
static void counter()
{
    static int cnt=0;

    if( (++cnt%50)==0 )
    {
         printf(">");
    }
}

//---------------------------------------------------------------------------
static void statepush(int state)
{
    if( state_stack_ptr<MAX_STATE_DEPTH )
    {
        state_stack[state_stack_ptr++]=YYSTATE;
        BEGIN(state);
        //printf("\npush BEGIN %3d %s %d %d",yylineno,getfilename(),state_stack_ptr,state);
    }
    else
    {
        error("LEX state stack overflow");
    }
}

//---------------------------------------------------------------------------
static void statepop()
{
    if( --state_stack_ptr>=0 )
    {
        int state=state_stack[state_stack_ptr];
        BEGIN(state);
        //printf("\npop  BEGIN %3d %s %d %d",yylineno,getfilename(),state_stack_ptr,state);
    }
    else
    {
        error("LEX state stack underflow");
    }
}

//---------------------------------------------------------------------------
void _clp_reproctxt(int argno)
{
    CCC_PROLOG("reproctxt",1);
    int cursize=reproclen;
    reproctxt=(char*)realloc(reproctxt,reproclen=cursize+_parblen(1));
    memmove(reproctxt+cursize,_parb(1),_parblen(1));
    CCC_EPILOG();
}

//---------------------------------------------------------------------------
static void procinclude()
{
    if( include_stack_ptr>=MAX_INCLUDE_DEPTH )
    {
        error("Includes nested too deeply");
    }

    int i=1; while(yytext[i]!='"')i++; yytext[i]=0; ++yytext;   // unquote
    stringsb(yytext,i-1);                                       // CCC-STACK++
    //dup();number(yylineno-1);string(L"\n");_clp_outerr(3);pop();

    _clp_searchinclude(1);
    _clp_convertfspec2nativeformat(1);
    char *fspec=BINARYPTR(TOP());
    printf("\n%sBeg %s ",tabular(include_stack_ptr+1),fspec);
    yyin=fopen(fspec,"r");

    if( !yyin )
    {
        --yylineno;
        error("Include file not found");
    }

    include_stack[include_stack_ptr]=YY_CURRENT_BUFFER;
    fname_stack[include_stack_ptr]=strdup(fspec);
    lnumber_stack[include_stack_ptr]=yylineno;

    include_stack_ptr++;

    yylineno=1;
    yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE));

    statepop();
    pop();                                                      // CCC-STACK--

    number(1);
    stringnb(getfilename());
    _clp_nextline(2);
    pop();
    include_changed=1;
}


//---------------------------------------------------------------------------
static char *getfilename()
{
    if( include_stack_ptr>0 )
    {
        return fname_stack[include_stack_ptr-1];
    }

    return filein;
}

//---------------------------------------------------------------------------
static char *tabular(int pos)
{
    static char tab[128];
    int i;
    for( i=0; i<4*pos; i++ )
    {
        tab[i]=' ';
    }
    tab[i]=0;
    return &tab[0];
}


//---------------------------------------------------------------------------
static void procifdef(int type)
{
    statepop();

    int def=0;
    stringnb(yytext);
    _clp_searchdefine(1);
    if( TOP()->type==TYPE_FLAG )
    {
        def=(TOP()->data.flag)?2:1;
    }
    pop();

    //def==0 -> nem definiált
    //def==1 -> definiált, de nem egyenlő
    //def==2 -> definiált, és egyenlő

    if( (type==0 && def==0) ||  //#ifdef
        (type==1 && def!=0) ||  //#ifndef
        (type==2 && def!=2) ||  //#ifeq
        (type==3 && def==2) ||  //#ifneq
        (type==4 && def==0) ||  //#else ifdef
        (type==5 && def!=0) ||  //#else ifndef
        (type==6 && def!=2) ||  //#else ifeq
        (type==7 && def==2) )   //#else ifneq
    {
        // ha az #if utáni feltétel nem teljesül
        // ugrunk a következő #else-ig vagy #endif-ig
        ifdef_state(st_waitelse);
    }
    else
    {
        // ha az #if utáni feltétel teljesül
        // folytatjuk a normál feldolgozást
        ifdef_state(0);
    }
}


//---------------------------------------------------------------------------

