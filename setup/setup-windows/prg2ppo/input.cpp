#line 2 "ppo/input.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else        /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif       /* __STDC__ */
#endif       /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *   if ( condition_holds )
 *           yyless( 5 );
 *   else
 *           do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
     do \
             { \
             /* Undo effects of setting up yytext. */ \
             *yy_cp = yy_hold_char; \
             YY_RESTORE_YY_MORE_OFFSET \
             yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
             YY_DO_BEFORE_ACTION; /* set up yytext again */ \
             } \
     while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
     {
     FILE *yy_input_file;

     char *yy_ch_buf;                /* input buffer */
     char *yy_buf_pos;               /* current position in input buffer */

     /* Size of input buffer in bytes, not including room for EOB
      * characters.
      */
     yy_size_t yy_buf_size;

     /* Number of characters read into yy_ch_buf, not including EOB
      * characters.
      */
     int yy_n_chars;

     /* Whether we "own" the buffer - i.e., we know we created it,
      * and can realloc() it to grow it, and should free() it to
      * delete it.
      */
     int yy_is_our_buffer;

     /* Whether this is an "interactive" input source; if so, and
      * if we're using stdio for input, then we want to use getc()
      * instead of fread(), to make sure we stop fetching input after
      * each newline.
      */
     int yy_is_interactive;

     /* Whether we're considered to be at the beginning of a line.
      * If so, '^' rules will be active on the next match, otherwise
      * not.
      */
     int yy_at_bol;

     /* Whether to try to fill the input buffer when we reach the
      * end of it.
      */
     int yy_fill_buffer;

     int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
     /* When an EOF's been seen but there's still some text to process
      * then we mark the buffer as YY_EOF_PENDING, to indicate that we
      * shouldn't try reading from the input source any more.  We might
      * still have a bunch of tokens to match, though, because of
      * possible backing-up.
      *
      * When we actually see the EOF, we change the status to "new"
      * (via yyrestart()), so that the user can continue scanning by
      * just pointing yyin at a new input file.
      */
#define YY_BUFFER_EOF_PENDING 2
     };

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;               /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;              /* whether we need to initialize */
static int yy_start = 0;     /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
     { \
     if ( ! yy_current_buffer ) \
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
     yy_current_buffer->yy_is_interactive = is_interactive; \
     }

#define yy_set_bol(at_bol) \
     { \
     if ( ! yy_current_buffer ) \
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
     yy_current_buffer->yy_at_bol = at_bol; \
     }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
     yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
     yy_hold_char = *yy_cp; \
     *yy_cp = '\0'; \
     yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 71
#define YY_END_OF_BUFFER 72
static yyconst short int yy_acclist[161] =
    {   0,
       36,   36,   72,   35,   71,   34,   71,   35,   71,   35,
       71,   35,   71,   30,   35,   71,   35,   71,   35,   71,
       35,   71,   35,   71,   42,   71,   39,   42,   71,   42,
       71,   42,   71,   46,   71,   43,   46,   71,   46,   71,
       50,   71,   47,   50,   71,   50,   71,   54,   71,   51,
       54,   71,   54,   71,   58,   71,   55,   58,   71,   58,
       71,   70,   71,   69,   71,   70,   71,   70,   71,   70,
       71,   70,   71,   70,   71,   70,   71,   70,   71,   70,
       71,   36,   71,   71,    4,   71,    3,   71,    4,   71,
        7,   71,    6,   71,    7,   71,   11,   71,   10,   71,

       11,   71,   11,   71,   14,   71,   13,   71,   14,   71,
       14,   71,   33,   32,   29,   28,   44,   48,   65,   67,
       36,   37,   37,   38,   31,   40,   66,   45,   49,   52,
       56,    1,   20,   18,   41,   68,   59,   63,    2,    5,
        9,   12,    8,   21,   16,   19,   27,   53,   57,   60,
       61,   64,   22,   17,   62,   26,   15,   25,   24,   23
    } ;

static yyconst short int yy_accept[304] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    6,    8,
       10,   12,   14,   17,   19,   21,   23,   25,   27,   30,
       32,   34,   36,   39,   41,   43,   46,   48,   50,   53,
       55,   57,   60,   62,   64,   66,   68,   70,   72,   74,
       76,   78,   80,   82,   84,   85,   87,   89,   91,   93,
       95,   97,   99,  101,  103,  105,  107,  109,  111,  113,
      113,  114,  114,  115,  115,  115,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      117,  117,  117,  117,  117,  118,  118,  118,  118,  119,
      119,  119,  119,  119,  119,  119,  119,  120,  120,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  122,
      123,  124,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  129,  129,  129,

      129,  130,  130,  130,  130,  131,  131,  131,  131,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  133,  133,  133,  133,  134,
      134,  134,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  136,  136,  136,  136,  136,  136,  136,  137,  138,
      138,  138,  139,  139,  139,  140,  141,  142,  143,  144,
      144,  144,  145,  146,  146,  147,  147,  147,  148,  148,
      148,  148,  149,  149,  149,  149,  150,  150,  150,  151,
      152,  152,  153,  153,  154,  155,  155,  155,  155,  155,
      156,  157,  158,  158,  158,  158,  158,  159,  159,  160,

      160,  161,  161
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    1,
        1,    7,    1,    1,    1,    1,    8,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,   10,   11,
        1,   12,    1,    1,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        1,    1,    1,    1,   13,    1,   14,   13,   15,   16,

       17,   18,   19,   13,   20,   13,   13,   21,   22,   23,
       24,   13,   25,   26,   27,   28,   29,   13,   13,   30,
       13,   13,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[31] =
    {   0,
        1,    2,    3,    1,    1,    1,    4,    5,    6,    1,
        1,    7,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8
    } ;

static yyconst short int yy_base[354] =
    {   0,
        0,   10,    3,   20,   26,   38,   50,   62,   74,   86,
       98,  110,  120,  130,  125,  135,  754,  753,  136,  139,
      140,  141,  756,  143,  755,  151,  757,  762,  762,  752,
      749,  150,  157,  743,  159,  152,  750,  762,  762,  748,
      745,  762,  762,  168,  762,  762,  171,  762,  762,  748,
      762,  762,  747,  762,  762,  744,  741,  155,  735,  173,
      166,  182,  168,    0,  182,  762,  762,  734,  762,  762,
      733,  762,  762,  189,  728,  762,  762,  190,  727,  737,
      762,  734,  762,  736,  194,  762,  191,    0,  198,    0,
      735,  180,  720,    2,  188,  710,  712,  192,  731,  762,

      729,  206,  726,  210,  762,  208,  219,  221,  762,  218,
      228,  729,  728,  727,  726,  723,  762,  720,  762,  722,
        0,  230,  217,  196,  706,  236,  222,  700,    0,  762,
      236,  762,    0,    0,  243,  707,  704,  244,  705,  702,
      715,  762,  710,  713,  703,  700,  691,  694,  684,  694,
      234,  694,  694,  691,  682,  679,  250,  762,  247,  122,
      701,  253,  700,  259,  261,  699,  762,  689,  673,  683,
      249,  686,  685,  673,  672,  687,  685,  689,  679,  678,
      666,  666,  667,  669,  665,  667,  658,  254,  661,  658,
      663,  657,  664,  270,  674,  271,  762,  225,  673,  272,

      762,  273,  672,  280,  762,  277,  284,  287,  762,  286,
      294,  662,  661,  655,  651,  653,  644,  282,  656,  655,
      654,  595,  588,  584,  762,  578,  532,  511,  762,  515,
      514,  762,  514,  505,  498,  499,  507,  502,  500,  297,
      762,  298,  498,  300,  489,  302,  481,  762,  762,  462,
      460,  762,  460,  451,  762,  762,  762,  762,  762,  450,
      454,  762,  762,  452,  762,  453,  445,  762,  449,  432,
      305,  762,  307,  453,  310,  762,  308,  445,  762,  762,
      422,  762,  408,  762,  762,  399,  300,  268,  259,  762,
      762,  762,  240,  243,  233,  223,  762,  182,  762,  176,

      762,  762,  317,  325,  333,  341,  349,  357,  365,  373,
      381,  389,  397,  405,  413,  421,  429,  437,  445,  452,
      459,  466,  473,  481,  489,  497,  505,  513,  169,  520,
      527,  535,  147,  141,   11,  543,  551,  554,  562,  570,
      578,  586,  593,  600,  603,  606,  609,  617,  625,  633,
      641,  649,  657
    } ;

static yyconst short int yy_def[354] =
    {   0,
      303,  303,  304,  304,  305,  305,  306,  306,  307,  307,
      308,  308,  309,  309,   14,   14,  310,  310,  311,  311,
      312,  312,  313,  313,  314,  314,  302,  302,  302,  315,
      316,  302,  302,  302,  302,  302,  317,  302,  302,  318,
      319,  302,  302,  320,  302,  302,  321,  302,  302,  322,
      302,  302,  323,  302,  302,  324,  325,  302,  302,  302,
      302,  302,  302,  326,  327,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  315,
      302,  316,  302,  328,  302,  302,  302,  329,  302,   36,
      317,  302,  302,  302,  302,  302,  302,  302,  317,  302,

      318,  302,  319,  302,  302,  302,  320,  302,  302,  302,
      321,  330,  322,  331,  323,  324,  302,  325,  302,  332,
      333,  302,  302,  302,  302,  302,  302,  302,  326,  302,
      327,  302,  334,  335,  302,  302,  302,  302,  302,  302,
      328,  302,  336,  337,  338,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  339,
      340,  341,  342,  343,  344,  332,  302,  345,  302,  302,
      302,  346,  347,  302,  302,  336,  336,  337,  338,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  348,  349,  339,  302,  339,  340,  341,

      302,  341,  342,  302,  302,  302,  343,  302,  302,  302,
      344,  345,  302,  302,  302,  302,  302,  302,  346,  302,
      347,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  348,
      302,  348,  349,  350,  351,  352,  353,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      350,  302,  350,  351,  352,  302,  352,  353,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,

      302,    0,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302
    } ;

static yyconst short int yy_nxt[793] =
    {   0,
      302,  302,   29,   30,   39,   31,   40,   32,   41,   33,
       34,   35,   29,   30,   36,   31,   37,   32,  173,   33,
       34,   39,  149,   40,  150,   41,   42,   43,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   43,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       45,   46,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   46,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   48,   49,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   49,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   51,   52,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   52,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   55,   56,  197,   57,   54,   58,  198,   54,
       59,   60,   55,   56,   61,   57,   62,   58,   67,   63,
       59,   67,   70,   70,   74,   73,   68,   75,  172,   68,
       71,   71,   78,   77,  168,   79,   83,   84,   85,   86,
       89,  119,  120,   90,   87,   91,   92,   93,   94,  104,
      105,   95,  108,  109,  122,  106,  145,  123,  110,   96,
       97,   98,  124,  126,  128,  125,  127,  125,  131,  132,
      135,  138,  301,  136,  139,   85,   86,  143,  144,   89,

      146,   87,   90,  147,   91,  151,  155,  157,  158,  300,
      152,  104,  105,  159,  160,  161,  169,  106,  170,  156,
      104,  105,  108,  109,  162,  163,  106,  197,  110,  108,
      109,  122,  104,  124,  123,  110,  125,  126,  128,  299,
      127,  125,  131,  132,  135,  138,  298,  136,  139,  186,
      187,  157,  158,  194,  195,  201,  188,  159,  297,  202,
      204,  205,  208,  209,  216,  217,  206,  296,  210,  233,
      234,  218,  241,  197,  201,  201,  242,  198,  202,  295,
      108,  204,  205,  244,  245,  204,  205,  206,  208,  209,
      294,  206,  246,  247,  210,  208,  209,  253,  254,  241,

      241,  210,  272,  242,  276,  157,  273,  272,  277,  272,
      276,  273,  276,  293,  204,  208,  277,   28,   28,   28,
       28,   28,   28,   28,   28,   38,   38,   38,   38,   38,
       38,   38,   38,   44,   44,   44,   44,   44,   44,   44,
       44,   47,   47,   47,   47,   47,   47,   47,   47,   50,
       50,   50,   50,   50,   50,   50,   50,   53,   53,   53,
       53,   53,   53,   53,   53,   54,   54,   54,   54,   54,
       54,   54,   54,   64,   64,   64,   64,   64,   64,   64,
       64,   66,   66,   66,   66,   66,   66,   66,   66,   69,
       69,   69,   69,   69,   69,   69,   69,   72,   72,   72,

       72,   72,   72,   72,   72,   76,   76,   76,   76,   76,
       76,   76,   76,   80,   80,  292,   80,   80,   80,   80,
       80,   82,   82,  291,   82,   82,   82,   82,   82,   99,
       99,   99,   99,   99,   99,   99,   99,  101,  101,  290,
      101,  101,  101,  101,  101,  103,  103,  209,  103,  103,
      103,  103,  103,  107,  107,  205,  107,  107,  289,  107,
      111,  111,  288,  111,  111,  287,  111,  113,  286,  285,
      284,  113,  283,  113,  115,  282,  281,  280,  115,  279,
      115,  116,  116,  209,  116,  116,  116,  116,  116,  118,
      118,  205,  118,  118,  118,  118,  118,  129,  129,  129,

      158,  129,  129,  129,  129,  130,  130,  130,  130,  130,
      130,  130,  130,  141,  141,  141,  141,  141,  141,  141,
      141,  164,  270,  269,  268,  267,  266,  164,  165,  265,
      264,  263,  262,  261,  165,  166,  166,  166,  166,  166,
      166,  166,  166,  176,  176,  260,  176,  176,  176,  176,
      176,  178,  178,  178,  178,  178,  178,  178,  178,  179,
      179,  179,  196,  196,  196,  196,  196,  196,  196,  196,
      199,  199,  199,  199,  199,  199,  199,  199,  200,  200,
      200,  200,  200,  200,  200,  200,  203,  203,  203,  203,
      203,  203,  203,  203,  207,  207,  259,  207,  207,  258,

      207,  211,  211,  257,  211,  211,  256,  211,  212,  212,
      212,  219,  219,  219,  221,  221,  221,  240,  240,  240,
      240,  240,  240,  240,  240,  243,  243,  243,  243,  243,
      243,  243,  243,  271,  271,  271,  271,  271,  271,  271,
      271,  274,  274,  274,  274,  274,  274,  274,  274,  275,
      275,  275,  275,  275,  275,  275,  275,  278,  278,  278,
      278,  278,  278,  278,  278,  222,  255,  220,  252,  251,
      250,  249,  248,  213,  109,  105,  158,  239,  238,  237,
      236,  235,  232,  231,  230,  229,  228,  227,  226,  225,
      180,   86,   85,  177,  224,  223,  222,  220,  215,  214,

      213,  167,  109,  105,  193,  192,  191,  190,  189,  185,
      184,  183,  182,  181,  180,   86,  177,  142,  175,  140,
      174,  137,  170,  171,  167,  117,  117,  114,  114,  112,
      112,  102,  102,  100,  154,  153,  148,  100,  142,   81,
       81,  140,  137,  134,  133,  121,  117,  117,  114,  112,
      102,  102,  100,   88,   81,   81,  302,   77,   73,   65,
       65,   27,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302

    } ;

static yyconst short int yy_chk[793] =
    {   0,
        0,    0,    1,    1,    3,    1,    3,    1,    3,    1,
        1,    2,    2,    2,    2,    2,    2,    2,  335,    2,
        2,    4,   94,    4,   94,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   13,   13,  160,   13,   15,   13,  160,   15,
       13,   14,   14,   14,   14,   14,   16,   14,   19,   16,
       14,   20,   21,   22,   24,   24,   19,   24,  334,   20,
       21,   22,   26,   26,  333,   26,   32,   32,   33,   33,
       35,   58,   58,   35,   33,   35,   36,   36,   36,   44,
       44,   36,   47,   47,   60,   44,  329,   60,   47,   36,
       36,   36,   61,   62,   63,   61,   62,   63,   65,   65,
       74,   78,  300,   74,   78,   85,   85,   87,   87,   89,

       92,   85,   89,   92,   89,   95,   98,  102,  102,  298,
       95,  104,  104,  102,  106,  106,  124,  104,  124,   98,
      107,  107,  108,  108,  110,  110,  107,  198,  108,  111,
      111,  122,  198,  123,  122,  111,  123,  126,  127,  296,
      126,  127,  131,  131,  135,  138,  295,  135,  138,  151,
      151,  157,  157,  159,  159,  162,  151,  157,  294,  162,
      164,  164,  165,  165,  171,  171,  164,  293,  165,  188,
      188,  171,  194,  196,  200,  202,  194,  196,  200,  289,
      202,  204,  204,  206,  206,  207,  207,  204,  208,  208,
      288,  207,  210,  210,  208,  211,  211,  218,  218,  240,

      242,  211,  244,  240,  246,  242,  244,  271,  246,  273,
      277,  271,  275,  287,  273,  277,  275,  303,  303,  303,
      303,  303,  303,  303,  303,  304,  304,  304,  304,  304,
      304,  304,  304,  305,  305,  305,  305,  305,  305,  305,
      305,  306,  306,  306,  306,  306,  306,  306,  306,  307,
      307,  307,  307,  307,  307,  307,  307,  308,  308,  308,
      308,  308,  308,  308,  308,  309,  309,  309,  309,  309,
      309,  309,  309,  310,  310,  310,  310,  310,  310,  310,
      310,  311,  311,  311,  311,  311,  311,  311,  311,  312,
      312,  312,  312,  312,  312,  312,  312,  313,  313,  313,

      313,  313,  313,  313,  313,  314,  314,  314,  314,  314,
      314,  314,  314,  315,  315,  286,  315,  315,  315,  315,
      315,  316,  316,  283,  316,  316,  316,  316,  316,  317,
      317,  317,  317,  317,  317,  317,  317,  318,  318,  281,
      318,  318,  318,  318,  318,  319,  319,  278,  319,  319,
      319,  319,  319,  320,  320,  274,  320,  320,  270,  320,
      321,  321,  269,  321,  321,  267,  321,  322,  266,  264,
      261,  322,  260,  322,  323,  254,  253,  251,  323,  250,
      323,  324,  324,  247,  324,  324,  324,  324,  324,  325,
      325,  245,  325,  325,  325,  325,  325,  326,  326,  326,

      243,  326,  326,  326,  326,  327,  327,  327,  327,  327,
      327,  327,  327,  328,  328,  328,  328,  328,  328,  328,
      328,  330,  239,  238,  237,  236,  235,  330,  331,  234,
      233,  231,  230,  228,  331,  332,  332,  332,  332,  332,
      332,  332,  332,  336,  336,  227,  336,  336,  336,  336,
      336,  337,  337,  337,  337,  337,  337,  337,  337,  338,
      338,  338,  339,  339,  339,  339,  339,  339,  339,  339,
      340,  340,  340,  340,  340,  340,  340,  340,  341,  341,
      341,  341,  341,  341,  341,  341,  342,  342,  342,  342,
      342,  342,  342,  342,  343,  343,  226,  343,  343,  224,

      343,  344,  344,  223,  344,  344,  222,  344,  345,  345,
      345,  346,  346,  346,  347,  347,  347,  348,  348,  348,
      348,  348,  348,  348,  348,  349,  349,  349,  349,  349,
      349,  349,  349,  350,  350,  350,  350,  350,  350,  350,
      350,  351,  351,  351,  351,  351,  351,  351,  351,  352,
      352,  352,  352,  352,  352,  352,  352,  353,  353,  353,
      353,  353,  353,  353,  353,  221,  220,  219,  217,  216,
      215,  214,  213,  212,  203,  199,  195,  193,  192,  191,
      190,  189,  187,  186,  185,  184,  183,  182,  181,  180,
      179,  178,  177,  176,  175,  174,  173,  172,  170,  169,

      168,  166,  163,  161,  156,  155,  154,  153,  152,  150,
      149,  148,  147,  146,  145,  144,  143,  141,  140,  139,
      137,  136,  128,  125,  120,  118,  116,  115,  114,  113,
      112,  103,  101,   99,   97,   96,   93,   91,   84,   82,
       80,   79,   75,   71,   68,   59,   57,   56,   53,   50,
       41,   40,   37,   34,   31,   30,   27,   25,   23,   18,
       17,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302

    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "./input.lex"
#define INITIAL 0
/*
 *  CCC - The Clipper to C++ Compiler
 *  Copyright (C) 2005 ComFirm BT.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
#define st_incl 1
#define st_ifdef 2
#define st_ifndef 3
#define st_ifeq 4
#define st_ifneq 5
 
#define st_waitelse 6
#define st_waitendif 7
#define st_comment 8
 
#define st_raw 9
#define st_waitraw 10

#define st_clang 11
#define st_waitcend 12

#line 27 "./input.lex"

//Ez a flex program vezérli az input olvasását
//
//  végzi az inkludálást,
//  kihagyja az ifdef/else/endif kihagyandó részeit,
//  kihagyja a kommenteket,
//  kiegyenesíti a folytatósorokat,
//  szétválasztja az egy sorba írt utasításokat,
//  számolja a sorokat,
//  kikerüli a stringeket.

//Figyelem:
//  A "st_comment" név helyett nem jó az egyszerű "comment",
//  mert a Windowson include filékben (msxml.h) zavart okoz 
//  a Flex által generált '#define comment 8' makró.
 

#include <string.h>
#include <cccapi.h>

//a generalt kodban:
//#define ECHO (void) fwrite( yytext, yyleng, 1, yyout ) 
//gcc 4.3.2 warning: ignoring return value
//#define ECHO (0==fwrite(yytext,yyleng,1,yyout))

//Bizonyos esetekben (folytatósor, sorelválasztó ;)
//a generált kimeneten CR jelenhet meg, ami a további
//fordítást elrontja, ezért legegyszerűbb, ha a CR
//karaktereket, már a bemenet olvasásakor eldobjuk.
//Ugyancsak el kell dobni a filék végén lévő esetleges 
//eof (chr(26)) karaktert, amit a UNIX nem fogad el.



#define YY_INPUT(buf,result,max_size)  yy_input(buf,&result,max_size)

static char *reproctxt=0;
static int   reproclen=0;
static int   reprocidx=0;
 
int yy_input(char *buf, int *result, int max_size)
{
    if( reproctxt!=0 )
    {
        int c=26;

        while( (reprocidx<reproclen) && ((c=='\r') || (c==26))  )
        {
            c=reproctxt[reprocidx++];
        }
        if( reprocidx>=reproclen )
        {
            free(reproctxt);
            reproctxt=0;
            reproclen=0;
            reprocidx=0;
        }
        if( c=='\n' )
        {
            --yylineno;
        }
        if( (c!='\r') && (c!=26) )
        {
            buf[0]=c;
            *result=1;
            return *result;
        }
    }

    int c=getc(yyin);
    
    while( (c=='\r') || (c==26) )
    {
        c=getc(yyin);
    }

    static int eof_reached=0;

    if( c!=EOF )
    {
        eof_reached=0;
        buf[0]=c;
        *result=1;
    }
    else
    {
        if(eof_reached==0)
        {
            //mesterséges \n a file végén
            //néha gond, ha az utolsó sor végén nincs \n
            //ilyen eset pl. ? //<<EOF>>
            //mert \n hiánya miatt nem illeszkedik a COMMENT1 szabály

            eof_reached=1;
            buf[0]='\n';   //mesterséges \n
            *result=1;
        }
        else
        {
            *result=YY_NULL;
        }
    }
    
    //printf("%c",c);
    return *result;
}
 

 
#define YY_NEVER_INTERACTIVE     1

#define MAX_INCLUDE_DEPTH       10
#define MAX_LINE_SIZE         8192
#define MAX_STATE_DEPTH         20
 
static YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
static unsigned lnumber_stack[MAX_INCLUDE_DEPTH]; 
static char *fname_stack[MAX_INCLUDE_DEPTH]; 
static int include_stack_ptr=0;
static int include_changed=0;
 
static int state_stack[MAX_STATE_DEPTH];
static int state_stack_ptr=0;

static char *outbuf=0;
static int  outbuf_idx=0;
static int  outbuf_siz=0;
static int  outlineno=0;
static int  outtype=0;

static char *filein;

extern void error(const char*);
static void procinclude(void);
static void procifdef(int type);
static void statepush(int state);
static void statepop(void);
static char *getfilename();
static char *tabular(int p);
static void outchar(int c);
static void outtrim();
static void outstr(const char *s);
static int  outempty(void);
static void printbuf(void);
static void counter(void);

extern void _clp_nextline(int argno);
extern void _clp_prepro(int argno);
extern void _clp_define(int argno);
extern void _clp_undef(int argno);
extern void _clp_translate(int argno);
extern void _clp_searchdefine(int argno);
extern void _clp_searchinclude(int argno);


static int ifdef_level=0;
static void assert_else()
{
    if( ifdef_level<=0 )
        error("#else directive without #if");
}
static void assert_endif()
{
    if( ifdef_level<0 )
        error("#endif directive without #if");
}
static void assert_closed()
{
    if( ifdef_level!=0 )
        error("Unclosed #if directive at EOF");
}

static void ifdef_push()
{
    ++ifdef_level;
}
static void ifdef_pop()
{
    --ifdef_level;
    assert_endif();
}



static char *raw_symbol=0;

static void raw_beg(int state)
{
    raw_symbol=strdup(yytext);
    statepush(state);
}

static void raw_end()
{
    if( 0==strcmp(raw_symbol,yytext) )
    {
        free(raw_symbol);
        statepop();
    }
}

#line 916 "ppo/input.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
static int yy_ignored_retcode;
#define ECHO (yy_ignored_retcode=fwrite(yytext,yyleng,1,yyout))
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
     {
      yy_state_type yy_current_state;
      char *yy_cp, *yy_bp;
      int yy_act;

#line 244 "./input.lex"


#line 1074 "ppo/input.cpp"

     if ( yy_init )
             {
             yy_init = 0;

#ifdef YY_USER_INIT
             YY_USER_INIT;
#endif

             if ( ! yy_start )
                     yy_start = 1;   /* first start state */

             if ( ! yyin )
                     yyin = stdin;

             if ( ! yyout )
                     yyout = stdout;

             if ( ! yy_current_buffer )
                     yy_current_buffer =
                             yy_create_buffer( yyin, YY_BUF_SIZE );

             yy_load_buffer_state();
             }

     while ( 1 )             /* loops until end-of-file is reached */
             {
             yy_cp = yy_c_buf_p;

             /* Support of yytext. */
             *yy_cp = yy_hold_char;

             /* yy_bp points to the position in yy_ch_buf of the start of
              * the current run.
              */
             yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			 YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 303 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 762 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

             YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:   /* This label is used only to access EOF actions. */


             switch ( yy_act )
     { /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 246 "./input.lex"
{outstr(yytext);raw_beg(st_raw);}
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 248 "./input.lex"
{outstr(yytext);raw_end();}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 249 "./input.lex"
outchar(*yytext);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 250 "./input.lex"
outchar(*yytext);
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 253 "./input.lex"
{raw_end();}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 254 "./input.lex"

	YY_BREAK
case 7:
YY_RULE_SETUP
#line 255 "./input.lex"

	YY_BREAK

case 8:
YY_RULE_SETUP
#line 258 "./input.lex"
{outchar('\n');outstr(yytext);statepush(st_clang);}
	YY_BREAK

case 9:
YY_RULE_SETUP
#line 260 "./input.lex"
{outstr(yytext);statepop();outtype=9;printbuf();}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 261 "./input.lex"
{outchar(*yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 262 "./input.lex"
{outchar(*yytext);}
	YY_BREAK


case 12:
YY_RULE_SETUP
#line 265 "./input.lex"
{statepop();}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 266 "./input.lex"

	YY_BREAK
case 14:
YY_RULE_SETUP
#line 267 "./input.lex"

	YY_BREAK

case 15:
YY_RULE_SETUP
#line 271 "./input.lex"
statepush(st_incl);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 272 "./input.lex"
{ifdef_push();statepush(st_ifdef);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 273 "./input.lex"
{ifdef_push();statepush(st_ifndef);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 274 "./input.lex"
{ifdef_push();statepush(st_ifeq);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 275 "./input.lex"
{ifdef_push();statepush(st_ifneq);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 276 "./input.lex"
{assert_else();statepush(st_waitendif);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 277 "./input.lex"
{ifdef_pop();}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 279 "./input.lex"
{if(outtype==0){outtype=1;}else{outstr(yytext);}}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 280 "./input.lex"
{if(outtype==0){outtype=2;}else{outstr(yytext);}}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 281 "./input.lex"
{if(outtype==0){outtype=2;}else{outstr(yytext);}}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 282 "./input.lex"
{if(outtype==0){outtype=3;}else{outstr(yytext);}}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 283 "./input.lex"
{if(outtype==0){outtype=3;}else{outstr(yytext);}}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 284 "./input.lex"
{if(outtype==0){outtype=4;}else{outstr(yytext);}}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 287 "./input.lex"
//comment
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 288 "./input.lex"
//folytató //comment
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 289 "./input.lex"
{outtrim();if(reproctxt==0){outchar(';');}else{printbuf();}} //szétválasztó
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 290 "./input.lex"
printbuf(); //egysoros 
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 291 "./input.lex"
statepush(st_comment); //többsoros 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 292 "./input.lex"
outstr(yytext);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 293 "./input.lex"
printbuf();
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 294 "./input.lex"
outchar(*yytext);
	YY_BREAK

case 36:
YY_RULE_SETUP
#line 298 "./input.lex"

	YY_BREAK
case 37:
YY_RULE_SETUP
#line 299 "./input.lex"

	YY_BREAK
case 38:
YY_RULE_SETUP
#line 300 "./input.lex"
outstr("/**/");statepop(); 
	YY_BREAK


case 39:
YY_RULE_SETUP
#line 305 "./input.lex"

	YY_BREAK
case 40:
YY_RULE_SETUP
#line 306 "./input.lex"
{procinclude();}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 307 "./input.lex"
{procinclude();statepush(st_comment);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 308 "./input.lex"
error("Syntax ERROR in #include directive"); 
	YY_BREAK


case 43:
YY_RULE_SETUP
#line 312 "./input.lex"

	YY_BREAK
case 44:
YY_RULE_SETUP
#line 313 "./input.lex"
{procifdef(0);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 314 "./input.lex"
{procifdef(0);statepush(st_comment);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 315 "./input.lex"
error("Syntax ERROR in #ifdef directive");
	YY_BREAK


case 47:
YY_RULE_SETUP
#line 319 "./input.lex"

	YY_BREAK
case 48:
YY_RULE_SETUP
#line 320 "./input.lex"
{procifdef(1);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 321 "./input.lex"
{procifdef(1);statepush(st_comment);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 322 "./input.lex"
error("Syntax ERROR in #ifndef directive");
	YY_BREAK


case 51:
YY_RULE_SETUP
#line 326 "./input.lex"

	YY_BREAK
case 52:
YY_RULE_SETUP
#line 327 "./input.lex"
{procifdef(2);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 328 "./input.lex"
{procifdef(2);statepush(st_comment);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 329 "./input.lex"
error("Syntax ERROR in #ifeq directive");
	YY_BREAK


case 55:
YY_RULE_SETUP
#line 334 "./input.lex"

	YY_BREAK
case 56:
YY_RULE_SETUP
#line 335 "./input.lex"
{procifdef(3);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 336 "./input.lex"
{procifdef(3);statepush(st_comment);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 337 "./input.lex"
error("Syntax ERROR in #ifneq directive");
	YY_BREAK


case 59:
YY_RULE_SETUP
#line 342 "./input.lex"
{assert_else();statepop();}
	YY_BREAK


case 60:
YY_RULE_SETUP
#line 347 "./input.lex"
{ifdef_pop();statepop();}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 348 "./input.lex"
{ifdef_push();statepush(st_waitendif);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 349 "./input.lex"
{ifdef_push();statepush(st_waitendif);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 350 "./input.lex"
{ifdef_push();statepush(st_waitendif);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 351 "./input.lex"
{ifdef_push();statepush(st_waitendif);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 352 "./input.lex"

	YY_BREAK
case 66:
YY_RULE_SETUP
#line 353 "./input.lex"

	YY_BREAK
case 67:
YY_RULE_SETUP
#line 354 "./input.lex"
statepush(st_comment); //többsoros   
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 355 "./input.lex"
{raw_beg(st_waitraw);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 356 "./input.lex"

	YY_BREAK
case 70:
YY_RULE_SETUP
#line 357 "./input.lex"

	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(st_incl):
case YY_STATE_EOF(st_ifdef):
case YY_STATE_EOF(st_ifndef):
case YY_STATE_EOF(st_ifeq):
case YY_STATE_EOF(st_ifneq):
case YY_STATE_EOF(st_waitelse):
case YY_STATE_EOF(st_waitendif):
case YY_STATE_EOF(st_comment):
case YY_STATE_EOF(st_raw):
case YY_STATE_EOF(st_waitraw):
case YY_STATE_EOF(st_clang):
case YY_STATE_EOF(st_waitcend):
#line 361 "./input.lex"
{

    if( YYSTATE==st_raw )
    {
        char buf[256];
        sprintf(buf,"Unclosed long string %s at EOF",raw_symbol);
        error(buf);
    }

    printbuf();

    printf("\n%sEnd %s ",tabular(include_stack_ptr),getfilename());
     
    if( --include_stack_ptr<0 )
    {
        assert_closed();
        outtype=0;
        outchar('\n');
        printbuf();
        yyterminate();
    }
    else
    {
        fclose(yyin);
        yy_delete_buffer( YY_CURRENT_BUFFER );
        yy_switch_to_buffer(include_stack[include_stack_ptr] );
        free(fname_stack[include_stack_ptr]);
        yylineno=lnumber_stack[include_stack_ptr];
    }
    include_changed=1;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 393 "./input.lex"
ECHO;
	YY_BREAK
#line 1591 "ppo/input.cpp"

     case YY_END_OF_BUFFER:
             {
             /* Amount of text matched not including the EOB char. */
             int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

             /* Undo the effects of YY_DO_BEFORE_ACTION. */
             *yy_cp = yy_hold_char;
             YY_RESTORE_YY_MORE_OFFSET

             if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
                     {
                     /* We're scanning a new file or input source.  It's
                      * possible that this happened because the user
                      * just pointed yyin at a new source and called
                      * yylex().  If so, then we have to assure
                      * consistency between yy_current_buffer and our
                      * globals.  Here is the right place to do so, because
                      * this is the first action (other than possibly a
                      * back-up) that will match for the new input source.
                      */
                     yy_n_chars = yy_current_buffer->yy_n_chars;
                     yy_current_buffer->yy_input_file = yyin;
                     yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
                     }

             /* Note that here we test for yy_c_buf_p "<=" to the position
              * of the first EOB in the buffer, since yy_c_buf_p will
              * already have been incremented past the NUL character
              * (since all states make transitions on EOB to the
              * end-of-buffer state).  Contrast this with the test
              * in input().
              */
             if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                     { /* This was really a NUL. */
                     yy_state_type yy_next_state;

                     yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                     yy_current_state = yy_get_previous_state();

                     /* Okay, we're now positioned to make the NUL
                      * transition.  We couldn't have
                      * yy_get_previous_state() go ahead and do it
                      * for us because it doesn't know how to deal
                      * with the possibility of jamming (and we don't
                      * want to build jamming into it because then it
                      * will run more slowly).
                      */

                     yy_next_state = yy_try_NUL_trans( yy_current_state );

                     yy_bp = yytext_ptr + YY_MORE_ADJ;

                     if ( yy_next_state )
                             {
                             /* Consume the NUL. */
                             yy_cp = ++yy_c_buf_p;
                             yy_current_state = yy_next_state;
                             goto yy_match;
                             }

                     else
                             {
				yy_cp = yy_c_buf_p;
                             goto yy_find_action;
                             }
                     }

             else switch ( yy_get_next_buffer() )
                     {
                     case EOB_ACT_END_OF_FILE:
                             {
                             yy_did_buffer_switch_on_eof = 0;

                             if ( yywrap() )
                                     {
                                     /* Note: because we've taken care in
                                      * yy_get_next_buffer() to have set up
                                      * yytext, we can now set up
                                      * yy_c_buf_p so that if some total
                                      * hoser (like flex itself) wants to
                                      * call the scanner after we return the
                                      * YY_NULL, it'll still work - another
                                      * YY_NULL will get returned.
                                      */
                                     yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                                     yy_act = YY_STATE_EOF(YY_START);
                                     goto do_action;
                                     }

                             else
                                     {
                                     if ( ! yy_did_buffer_switch_on_eof )
                                             YY_NEW_FILE;
                                     }
                             break;
                             }

                     case EOB_ACT_CONTINUE_SCAN:
                             yy_c_buf_p =
                                     yytext_ptr + yy_amount_of_matched_text;

                             yy_current_state = yy_get_previous_state();

                             yy_cp = yy_c_buf_p;
                             yy_bp = yytext_ptr + YY_MORE_ADJ;
                             goto yy_match;

                     case EOB_ACT_LAST_MATCH:
                             yy_c_buf_p =
                             &yy_current_buffer->yy_ch_buf[yy_n_chars];

                             yy_current_state = yy_get_previous_state();

                             yy_cp = yy_c_buf_p;
                             yy_bp = yytext_ptr + YY_MORE_ADJ;
                             goto yy_find_action;
                     }
             break;
             }

     default:
             YY_FATAL_ERROR(
                     "fatal flex scanner internal error--no action found" );
     } /* end of action switch */
             } /* end of scanning one token */
     } /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *   EOB_ACT_LAST_MATCH -
 *   EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *   EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
     {
      char *dest = yy_current_buffer->yy_ch_buf;
      char *source = yytext_ptr;
      int number_to_move, i;
     int ret_val;

     if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
             YY_FATAL_ERROR(
             "fatal flex scanner internal error--end of buffer missed" );

     if ( yy_current_buffer->yy_fill_buffer == 0 )
             { /* Don't try to fill the buffer, so this is an EOF. */
             if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
                     {
                     /* We matched a single character, the EOB, so
                      * treat this as a final EOF.
                      */
                     return EOB_ACT_END_OF_FILE;
                     }

             else
                     {
                     /* We matched some text prior to the EOB, first
                      * process it.
                      */
                     return EOB_ACT_LAST_MATCH;
                     }
             }

     /* Try to read more data. */

     /* First move last chars to start of buffer. */
     number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

     for ( i = 0; i < number_to_move; ++i )
             *(dest++) = *(source++);

     if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
             /* don't do the read, it's not guaranteed to return an EOF,
              * just force an EOF
              */
             yy_current_buffer->yy_n_chars = yy_n_chars = 0;

     else
             {
             int num_to_read =
                     yy_current_buffer->yy_buf_size - number_to_move - 1;

             while ( num_to_read <= 0 )
                     { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
                     YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

                     /* just a shorter name for the current buffer */
                     YY_BUFFER_STATE b = yy_current_buffer;

                     int yy_c_buf_p_offset =
                             (int) (yy_c_buf_p - b->yy_ch_buf);

                     if ( b->yy_is_our_buffer )
                             {
                             int new_size = b->yy_buf_size * 2;

                             if ( new_size <= 0 )
                                     b->yy_buf_size += b->yy_buf_size / 8;
                             else
                                     b->yy_buf_size *= 2;

                             b->yy_ch_buf = (char *)
                                     /* Include room in for 2 EOB chars. */
                                     yy_flex_realloc( (void *) b->yy_ch_buf,
                                                      b->yy_buf_size + 2 );
                             }
                     else
                             /* Can't grow it, we don't own it. */
                             b->yy_ch_buf = 0;

                     if ( ! b->yy_ch_buf )
                             YY_FATAL_ERROR(
                             "fatal error - scanner input buffer overflow" );

                     yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                     num_to_read = yy_current_buffer->yy_buf_size -
                                             number_to_move - 1;
#endif
                     }

             if ( num_to_read > YY_READ_BUF_SIZE )
                     num_to_read = YY_READ_BUF_SIZE;

             /* Read in more data. */
             YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
                     yy_n_chars, num_to_read );

             yy_current_buffer->yy_n_chars = yy_n_chars;
             }

     if ( yy_n_chars == 0 )
             {
             if ( number_to_move == YY_MORE_ADJ )
                     {
                     ret_val = EOB_ACT_END_OF_FILE;
                     yyrestart( yyin );
                     }

             else
                     {
                     ret_val = EOB_ACT_LAST_MATCH;
                     yy_current_buffer->yy_buffer_status =
                             YY_BUFFER_EOF_PENDING;
                     }
             }

     else
             ret_val = EOB_ACT_CONTINUE_SCAN;

     yy_n_chars += number_to_move;
     yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
     yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

     yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

     return ret_val;
     }


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
     {
      yy_state_type yy_current_state;
      char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

     for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
             {
		 YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 303 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
             }

     return yy_current_state;
     }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *   next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
     {
      int yy_is_jam;

	 YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 303 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 302);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

     return yy_is_jam ? 0 : yy_current_state;
     }


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c,  char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
 char *yy_bp;
#endif
     {
      char *yy_cp = yy_c_buf_p;

     /* undo effects of setting up yytext */
     *yy_cp = yy_hold_char;

     if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
             { /* need to shift things up to make room */
             /* +2 for EOB chars. */
              int number_to_move = yy_n_chars + 2;
              char *dest = &yy_current_buffer->yy_ch_buf[
                                     yy_current_buffer->yy_buf_size + 2];
              char *source =
                             &yy_current_buffer->yy_ch_buf[number_to_move];

             while ( source > yy_current_buffer->yy_ch_buf )
                     *--dest = *--source;

             yy_cp += (int) (dest - source);
             yy_bp += (int) (dest - source);
             yy_current_buffer->yy_n_chars =
                     yy_n_chars = yy_current_buffer->yy_buf_size;

             if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                     YY_FATAL_ERROR( "flex scanner push-back overflow" );
             }

     *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

     yytext_ptr = yy_bp;
     yy_hold_char = *yy_cp;
     yy_c_buf_p = yy_cp;
     }
#endif       /* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
     {
     int c;

     *yy_c_buf_p = yy_hold_char;

     if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
             {
             /* yy_c_buf_p now points to the character we want to return.
              * If this occurs *before* the EOB characters, then it's a
              * valid NUL; if not, then we've hit the end of the buffer.
              */
             if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                     /* This was really a NUL. */
                     *yy_c_buf_p = '\0';

             else
                     { /* need more input */
                     int offset = yy_c_buf_p - yytext_ptr;
                     ++yy_c_buf_p;

                     switch ( yy_get_next_buffer() )
                             {
                             case EOB_ACT_LAST_MATCH:
                                     /* This happens because yy_g_n_b()
                                      * sees that we've accumulated a
                                      * token and flags that we need to
                                      * try matching the token before
                                      * proceeding.  But for input(),
                                      * there's no matching to consider.
                                      * So convert the EOB_ACT_LAST_MATCH
                                      * to EOB_ACT_END_OF_FILE.
                                      */

                                     /* Reset buffer status. */
                                     yyrestart( yyin );

                                     /* fall through */

                             case EOB_ACT_END_OF_FILE:
                                     {
                                     if ( yywrap() )
                                             return EOF;

                                     if ( ! yy_did_buffer_switch_on_eof )
                                             YY_NEW_FILE;
#ifdef __cplusplus
                                     return yyinput();
#else
                                     return input();
#endif
                                     }

                             case EOB_ACT_CONTINUE_SCAN:
                                     yy_c_buf_p = yytext_ptr + offset;
                                     break;
                             }
                     }
             }

     c = *(unsigned char *) yy_c_buf_p;      /* cast for 8-bit char's */
     *yy_c_buf_p = '\0';    /* preserve yytext */
     yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

     return c;
     }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
     {
     if ( ! yy_current_buffer )
             yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

     yy_init_buffer( yy_current_buffer, input_file );
     yy_load_buffer_state();
     }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
     {
     if ( yy_current_buffer == new_buffer )
             return;

     if ( yy_current_buffer )
             {
             /* Flush out information for old buffer. */
             *yy_c_buf_p = yy_hold_char;
             yy_current_buffer->yy_buf_pos = yy_c_buf_p;
             yy_current_buffer->yy_n_chars = yy_n_chars;
             }

     yy_current_buffer = new_buffer;
     yy_load_buffer_state();

     /* We don't actually know whether we did this switch during
      * EOF (yywrap()) processing, but the only time this flag
      * is looked at is after yywrap() is called, so it's safe
      * to go ahead and always set it.
      */
     yy_did_buffer_switch_on_eof = 1;
     }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
     {
     yy_n_chars = yy_current_buffer->yy_n_chars;
     yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
     yyin = yy_current_buffer->yy_input_file;
     yy_hold_char = *yy_c_buf_p;
     }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
     {
     YY_BUFFER_STATE b;

     b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
     if ( ! b )
             YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

     b->yy_buf_size = size;

     /* yy_ch_buf has to be 2 characters longer than the size given because
      * we need to put in 2 end-of-buffer characters.
      */
     b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
     if ( ! b->yy_ch_buf )
             YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

     b->yy_is_our_buffer = 1;

     yy_init_buffer( b, file );

     return b;
     }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
     {
     if ( ! b )
             return;

     if ( b == yy_current_buffer )
             yy_current_buffer = (YY_BUFFER_STATE) 0;

     if ( b->yy_is_our_buffer )
             yy_flex_free( (void *) b->yy_ch_buf );

     yy_flex_free( (void *) b );
     }


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
//extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


     {
     yy_flush_buffer( b );

     b->yy_input_file = file;
     b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
     b->yy_is_interactive = 1;
#else
//#if YY_NEVER_INTERACTIVE
     b->yy_is_interactive = 0;
//#else
//     b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
//#endif
#endif
     }


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

     {
     if ( ! b )
             return;

     b->yy_n_chars = 0;

     /* We always need two end-of-buffer characters.  The first causes
      * a transition to the end-of-buffer state.  The second causes
      * a jam in that state.
      */
     b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
     b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

     b->yy_buf_pos = &b->yy_ch_buf[0];

     b->yy_at_bol = 1;
     b->yy_buffer_status = YY_BUFFER_NEW;

     if ( b == yy_current_buffer )
             yy_load_buffer_state();
     }


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
     {
     YY_BUFFER_STATE b;

     if ( size < 2 ||
          base[size-2] != YY_END_OF_BUFFER_CHAR ||
          base[size-1] != YY_END_OF_BUFFER_CHAR )
             /* They forgot to leave room for the EOB's. */
             return 0;

     b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
     if ( ! b )
             YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

     b->yy_buf_size = size - 2;      /* "- 2" to take care of EOB's */
     b->yy_buf_pos = b->yy_ch_buf = base;
     b->yy_is_our_buffer = 0;
     b->yy_input_file = 0;
     b->yy_n_chars = b->yy_buf_size;
     b->yy_is_interactive = 0;
     b->yy_at_bol = 1;
     b->yy_fill_buffer = 0;
     b->yy_buffer_status = YY_BUFFER_NEW;

     yy_switch_to_buffer( b );

     return b;
     }
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
     {
     int len;
     for ( len = 0; yy_str[len]; ++len )
             ;

     return yy_scan_bytes( yy_str, len );
     }
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
     {
     YY_BUFFER_STATE b;
     char *buf;
     yy_size_t n;
     int i;

     /* Get memory for full buffer, including space for trailing EOB's. */
     n = len + 2;
     buf = (char *) yy_flex_alloc( n );
     if ( ! buf )
             YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

     for ( i = 0; i < len; ++i )
             buf[i] = bytes[i];

     buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

     b = yy_scan_buffer( buf, n );
     if ( ! b )
             YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

     /* It's okay to grow etc. this buffer, and we should throw it
      * away when we're done.
      */
     b->yy_is_our_buffer = 1;

     return b;
     }
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
     {
     if ( yy_start_stack_ptr >= yy_start_stack_depth )
             {
             yy_size_t new_size;

             yy_start_stack_depth += YY_START_STACK_INCR;
             new_size = yy_start_stack_depth * sizeof( int );

             if ( ! yy_start_stack )
                     yy_start_stack = (int *) yy_flex_alloc( new_size );

             else
                     yy_start_stack = (int *) yy_flex_realloc(
                                     (void *) yy_start_stack, new_size );

             if ( ! yy_start_stack )
                     YY_FATAL_ERROR(
                     "out of memory expanding start-condition stack" );
             }

     yy_start_stack[yy_start_stack_ptr++] = YY_START;

     BEGIN(new_state);
     }
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
     {
     if ( --yy_start_stack_ptr < 0 )
             YY_FATAL_ERROR( "start-condition stack underflow" );

     BEGIN(yy_start_stack[yy_start_stack_ptr]);
     }
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
     {
     return yy_start_stack[yy_start_stack_ptr - 1];
     }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
     {
     (void) fprintf( stderr, "%s\n", msg );
     exit( YY_EXIT_FAILURE );
     }



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
     do \
             { \
             /* Undo effects of setting up yytext. */ \
             yytext[yyleng] = yy_hold_char; \
             yy_c_buf_p = yytext + n; \
             yy_hold_char = *yy_c_buf_p; \
             *yy_c_buf_p = '\0'; \
             yyleng = n; \
             } \
     while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
     {
      int i;
     for ( i = 0; i < n; ++i )
             s1[i] = s2[i];
     }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
     {
      int n;
     for ( n = 0; s[n]; ++n )
             ;

     return n;
     }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
     {
     return (void *) malloc( size );
     }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
     {
     /* The cast to (char *) in the following accommodates both
      * implementations that use char* generic pointers, and those
      * that use void* generic pointers.  It works with the latter
      * because both ANSI C and C++ allow castless assignment from
      * any pointer type to void*, and deal with argument conversions
      * as though doing an assignment.
      */
     return (void *) realloc( (char *) ptr, size );
     }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
     {
     free( ptr );
     }

#if YY_MAIN
int main()
     {
     yylex();
     return 0;
     }
#endif
#line 393 "./input.lex"


//---------------------------------------------------------------------------
void _clp_processing(int argno) 
{
    CCC_PROLOG("processing",1);
    _clp_convertfspec2nativeformat(1);

    filein=_parb(1);
    
    //FONTOS
    //a static változók megfelelő inicializálása, 
    //másképp a program nem hívható többször
    
    printf("\nBeg %s ",filein);

    include_changed=0;
    include_stack_ptr=0;
    state_stack_ptr=0;
    outbuf_idx=0;
    outlineno=0;
    outtype=0;
    yylineno=1;
 
    yyin=fopen(filein,"r");
    if( !yyin )
    {
        yylineno=0;
        error("File not found");
    }

    yylex();

    _ret();
    CCC_EPILOG();
}


//---------------------------------------------------------------------------
static void outbuf_resize(int x)
{
    while(outbuf_idx+x+1>outbuf_siz)
    {
        outbuf=(char*)realloc(outbuf,outbuf_siz+=1024);
    }
}

//---------------------------------------------------------------------------
static void outchar(int c)
{
    if( outbuf_idx==0 && reproctxt==0 )
    {
        outlineno=yylineno;
    }
    outbuf_resize(1);
    outbuf[outbuf_idx]=c;
    outbuf_idx++;
}

//---------------------------------------------------------------------------
static void outtrim()
{
    while( (outbuf!=0) &&
           (outbuf_idx>0) && 
           ((outbuf[outbuf_idx-1]==' ') || (outbuf[outbuf_idx-1]=='\t')) )
    {
        outbuf_idx--;
    }
}

//---------------------------------------------------------------------------
static void outstr(const char *s)
{
    if( outbuf_idx==0 && reproctxt==0 )
    {
        outlineno=yylineno;
    }
    int len=strlen(s);
    outbuf_resize(len);
    memcpy(outbuf+outbuf_idx,s,len);
    outbuf_idx+=len;
}
 

//---------------------------------------------------------------------------
static int outempty()
{
    outchar(0);
    int c;
    char *p=outbuf;
    while( ((c=*p)==' ')||(c=='\t') ) p++;
    return !c;  //1, ha a string üres
}


//---------------------------------------------------------------------------
static void printbuf()
{
    if( !outempty() )
    {
        static int lastlineno=0;

        binaryn(outbuf);

        if( outtype==0 ) //normál programsor
        {
            ++lastlineno;
        
            if( include_changed || (lastlineno!=outlineno)  )
            {
                include_changed=0;
                lastlineno=outlineno;
                number(outlineno);
                stringnb(getfilename());
                _clp_nextline(2);
                pop();
            }
            counter();
            _clp_prepro(1); 
        }

        else if( outtype==1 ) //#define direktíva
        {
            _clp_define(1);
        }
        else if( outtype==2 ) //#xtranslate direktíva 
        {
            logical(0);
            _clp_translate(2);
        }
        else if( outtype==3 ) //#xcommand direktíva 
        {
            logical(1);
            _clp_translate(2);
        }
        else if( outtype==4 ) //#undef direktíva 
        {
            _clp_undef(1);
        }
        else
        {
            _clp_qqout(1);
        }
 
        pop();
        outtype=0;
    }

    outbuf_idx=0;
}
 
//---------------------------------------------------------------------------
void error(const char*txt)
{   
    printf("\n%s",txt);
    printf("\nFile(%s) Line(%d) [%s]",getfilename(),yylineno,yytext);
    exit(1);
}

//---------------------------------------------------------------------------
void _clp_error(int argno) //ugyanaz Clipperből
{
    CCC_PROLOG("error",1);
    str2bin(base);
    char *txt=_parb(1);
    error(txt);
    _ret();
    CCC_EPILOG();
}
 

//---------------------------------------------------------------------------
static void counter()
{
    static int cnt=0;

    if( (++cnt%50)==0 )
    {
         printf(">");
    }
}    

//---------------------------------------------------------------------------
static void statepush(int state)
{
    if( state_stack_ptr<MAX_STATE_DEPTH )
    {
        state_stack[state_stack_ptr++]=YYSTATE;
        BEGIN(state); 
        //printf("\npush BEGIN %3d %s %d %d",yylineno,getfilename(),state_stack_ptr,state);
    }
    else
    {
        error("LEX state stack overflow");
    }
}

//---------------------------------------------------------------------------
static void statepop()
{
    if( --state_stack_ptr>=0 )
    {
        int state=state_stack[state_stack_ptr]; 
        BEGIN(state);
        //printf("\npop  BEGIN %3d %s %d %d",yylineno,getfilename(),state_stack_ptr,state);
    }
    else
    {
        error("LEX state stack underflow");
    }
}

//---------------------------------------------------------------------------
void _clp_reproctxt(int argno)
{
    CCC_PROLOG("reproctxt",1);
    int cursize=reproclen;
    reproctxt=(char*)realloc(reproctxt,reproclen=cursize+_parblen(1));
    memmove(reproctxt+cursize,_parb(1),_parblen(1));
    CCC_EPILOG();
}

//---------------------------------------------------------------------------
static void procinclude()
{
    if( include_stack_ptr>=MAX_INCLUDE_DEPTH )
    {
        error("Includes nested too deeply");
    }

    int i=1;while( yytext[i]!='"')i++;yytext[i]=0;
    stringnb(yytext+1);                                     //CCC-STACK++
    _clp_searchinclude(1);
    _clp_convertfspec2nativeformat(1);
    char *fspec=BINARYPTR(TOP());
    printf("\n%sBeg %s ",tabular(include_stack_ptr+1),fspec);
    yyin=fopen(fspec,"r");

    if( !yyin )
    {
        error("Include file not found");
    }

    include_stack[include_stack_ptr]=YY_CURRENT_BUFFER;
    fname_stack[include_stack_ptr]=strdup(fspec);
    lnumber_stack[include_stack_ptr]=yylineno;

    include_stack_ptr++;

    yylineno=1;
    yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE));

    statepop();
    pop();                                                  //CCC-STACK--

    number(1);
    stringnb(getfilename());
    _clp_nextline(2);
    pop();
    include_changed=1;
}

 
//---------------------------------------------------------------------------
static char *getfilename()
{
    if( include_stack_ptr>0 )
    {
        return fname_stack[include_stack_ptr-1];
    }

    return filein;
}

//---------------------------------------------------------------------------
static char *tabular(int pos)
{
    static char tab[128];
    int i;
    for( i=0; i<4*pos; i++ )
    {
        tab[i]=' ';
    }
    tab[i]=0;
    return &tab[0];
}
 

//---------------------------------------------------------------------------
static void procifdef(int type)
{
    statepop();

    int def=0;    
    stringnb(yytext);
    _clp_searchdefine(1);
    if( TOP()->type==TYPE_FLAG )
    {
        def=(TOP()->data.flag)?2:1;
    }
    pop();
  
    //def==0 -> nem definiált
    //def==1 -> definiált, de nem egyenlő
    //def==2 -> definiált, és egyenlő

    if( ((type==0) && !def   ) ||  //#ifdef 
        ((type==1) &&  def   ) ||  //#ifndef 
        ((type==2) &&  def!=2) ||  //#ifeq
        ((type==3) &&  def==2) )   //#ifneq
    {
        statepush(st_waitelse); 
    }
}


//---------------------------------------------------------------------------

