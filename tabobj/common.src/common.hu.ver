2016.12.05
  tabchlog.prg-ben Cs.L. valtozatatasai CCC2-bol athozva.

2008.04.21
  Az indexek neve nagybetusen van tarolva a fajlban,
  ezert tabScanIndex-ben is nagybetusen kell keresni.

2004.03.10
  Naplozas bovult: tabWriteChangeLogDrop, Create, Upgrade.
  Napozando filek kivalasztasa tabPath+tabFile alapjan.
  tabPack, tabZap, tabUpgrade kikapcsolja a belso muveletek naplozasat.
 
2004.02.20
  A changelogba a mezok tipusat is kiirjuk.
  A changelogba a zapot es packot is kiirjuk. 
  Uj API: tabIsTableLogged(table)
  Uj API: tabWriteChangeLogPack(table)
  Uj API: tabWriteChangeLogZap(table)
  
  A naplozott tablakra a pack hatastalanitva lett, ui. 
  btbtx-ben a pack megvaltoztathatja a rekordok sorrendjet,
  ezert a replikacioban a packot nem lehet implementalni
  (mert nem ismertek a pack utani recno-k).
  
  A tabChangeLogLock, tabChangeLogUnlock fuggvenyek
  fdmutex helyett tevesen fdlog-ot lockoltak (javitva).
  
  Ha a log CCC_TRANSACTION_FILE_SIZE-nal nagyobbra no, 
  akkor a programok automatikusan uj logot kezdenek.
  A meretet MB-ban lehet megadni, a legkisebb 1MB, a default 1GB.
  Megvaltozott emiatt CCC_TRANSACTION_FILE_LOG jelentese.
  Ha pl. CCC_TRANSACTION_FILE_LOG=xxx, akkor ilyen logfilek
  lesznek: xxx000001, xxx000002, ... Mielott 1000000-t elerne,
  az egesz naplozast ujra kell kezdeni.  Azok a regi logok, 
  amiket mar egy processz sem tart nyitva torolhetok.
  
  A logba kiterjesztes nelkul irjuk be a filespecifikaciot.
 
2004.01.11
  Nem oroklodo filedescriptorok (protokoll lock megtartva).

2003.03.21
  tranRecordLockedInTransaction(table)
    A tranzakcio vegen (commit/rollback) pontosan azok a lockok
    szunnek meg, amik a tranzakcio kozben jottek letre.
  
  function tranDeleteOnRollback(table,pos)
    A rollback torli azokat a rekordokat, amik a tablak TAB_TRANDEL
    listajaban vannak felsorolva. Jelenleg csak a tabInsert hasznalja.
 
2003.02.28
  tabAutoUpgrade-ben a force flag tovabbadva.

2003.01.13
  Idekerult dbfclass es dbfedrec (nehez nekik jo helyet talalni).

2003.01.07
  CCC_TRANSACTION_FILE_LOG     logile specifikacioja
  CCC_TRANSACTION_FILE_CREATE  =auto eseten automatikusan letrehozza
  CCC_TRANSACTION_FILE_MUTEX   lockfile specifikacioja (nfs hasznalatakor szukseges)
  CCC_TRANSACTION_FILE_ALIAS   naplozando tablak aliasait tartalmazo file specifikacioja 

2002.12.19
  Naplozas, uj modulok: tabchlog.prg, mutex.cpp.
  flushall(), fflush() atkrult az alapkonyvtarba.
  Memok torlese, beirasa (szabadlista) signal vedelem alatt.
  tranCommit-ban az egymast koveto tabCommit-ok signal vedelem alatt.
 
2002.12.16
  vmm.cpp atirva a standard cccapi.h makrokeszletre:
   - argumentumok ellenorzese
   - bytehatarra illesztes egyseges, platformfuggetlen modon
   - xvgetlit16, ... fuggvenyekben bytehatarra illesztes 

2002.07.10
  transact.prg-ben print_debug_info() nem jol allitotta vissza
  a tabla eredeti allapotat.

2002.02.16
  transact.prg kiegeszitve tranSynchronizeRecord lockflag
  parameterevel (a szinkronizalt rekordot el lehet engedni).

2002.01.19
  Szemaforlock timeoutja: 5 sec (ezalatt 50-szer probalkozik).

2001.12.27
  tranLastRecordUpdate(table,@info) a teljes infot visszaadja,
  ha van fuggoben levo modositas, ui. BTBTX-ben ez szukseges.

2001.12.25
  Optimalizalt pack bt filekre rekordonkenti masolassal.
 
2001.12.14
  transact.prg-ben egy sor finomitas.

2001.11.05
  tranRollback utan a rekordot ujra kell olvasni,
  hogy az eredeti mezoertekek visszaalljanak.

  A pendingupdate array helyett tranindex kiuruleset kell vizsgalni,
  hogy megtudjuk tranRollback-kel veget ert-e a tranzakcio.

2001.10.12
  tranSynchronizeRecord neveben helyesirasi hiba kijavitva.

2001.09.04
  Kompatibilitas a regi Clipperrel.

2001.08.07
  Tranzakcio commit-janal a print_debug_info nem ertekeli ki
  torolt rekord mezoit, mert az SIGSEGV-t okozhat. Ez olyankor
  fordult elo, amikor datidx append kiirt egy nullkey-ekkel feltoltott
  torolt rekordot (hogy az recno-t kapjon), es egy ilyen rekordbol
  olvastunk be (lebegopontos) szammezot. (Valojaban az elszallas csak
  az ilyen szam kiirasakor kovetkezett be.) 
  
  A print_debug_info() append-nel es delete-nel csak a nem empty 
  erteku mezoket listazza.

2001.07.13
  tabpack.prg bovult a datidx optimalizalt packolasaval.

2001.07.08
  Uj modul: tabedrec.prg (kdirdd stilusu rekord editalas).

2000.09.29
  tabPath() dirsep konverzio javitva

2000.07.16
  Tranzakcio kezeles javitas: trantables


2000.06.06
  Tranzakcio kezeles


2000.02.22
  "\" helyettesitve a dirsep() hivassal
  a UNIX-os warningok kitisztitva


1999.06.04

  cucpydbf ujrairva
  
  Egy byte-os eltolodas keletkezett (reszben determinisztikusan) 
  a packolas kimeneteben. A problema oka az fseek/fwrite/xvwrite
  kozotti inkozisztencia. Kulonosen a Clipper fseek veszelyes.
  
  NG szerint fseek nem pozicionalhat EOF moge, peldak mutatjak
  azonban, hogy azt megis megteszi, es a C lseek modjara mukodik. 
  Sajnos azonban ez alol vannak kivetelek, ilyen kivetel okozta a 
  rossz packolast. 
  
  Lehet, hogy Leventenek igaza volt abban, hogy a vegyes 
  fuggvenyhasznalat volt rossz: pl. mindent megmagyarazna 
  fseek es fwrite olyan egyuttmukodese, hogy fseek vagy azonnal 
  pozicional, vagy csak beallitja frwrite-nak az uj poziciot, 
  amirol viszont xvwrite nem tudhat.
  
  Mellesleg a regi program a C256-nal hosszabb mezot tartalmazo
  file packolasara sem volt felkeszitve (pl. KTRNAPLO).



1999.06.01

  tabError visszaterese koruli anomaliak rendezese,
  mit kell csinalni tabError visszateresekor?

  Ha nincs beallitva err:canretry, vagy err:candefault,
  akkor az eval(erroblock(),err) koteles break-et csinalni,
  es ezert tabError nem terhet vissza.
    
  A helyzet bonyolodik a userblock, vagy a "PUK" megadasaval, 
  ekkor tabError nem ertekeli ki errorblock()-ot.
  tabError tehat csak akkor terhet vissza, ha az alabbi
  szamozott esetek valamelyike fennall, es akkor a zarojelben
  megadott tevekenyseget kell csinalni:

    1) canretry==.t.                 ( retry     )
    2) candefault==.t.               ( continue  )
    3) valtype(userblock)="B"        ( return    )
    4) userblock=="PUK"              ( retry     )
  

  tabSlock visszaterese a szemfor lockok szama, ezert a 
  tabSlock-nak csak olyan usrblk adhato, aminek a kiertekelese
  szamot ad, pl. {||.f.} hibas, mig {||0} helyes.
 

  Ebben a szellemben lett ellenorizve es javitva "tabSlock" es 
  "PUK" minden elofordulasat keresve: 

    taberror.prg
    tabslock.prg 
    tabupgrd.prg


 
1999.05.11
  #ifdef-ek ritkitasa
  kiterjesztes nevek atkerultek ???names.prg-be 
  uj fuggveny tabSubsystemName()
 

1999.03.21
  Kiserlet tortent a tabGetRecordBuffer/tabSetRecordBuffer funkciok
  bevezetesere, azonban kiderult, hogy DBFCTX-ben nem lehet megkerulni
  a mezo kodblokkok hasznalatat, mert mert nemcsak a TAB_MODIF-ot,
  hanem a TAB_MODIFKEY es TAB_MODIFAPP flageket is  kezelni kell.


1999.03.15
  xvgetbyte()-ban (unsigned char*) pointerrel kell olvasni,
  Watcom C-vel korabban is jo volt, de MSVC-ben kiutkozik a hiba.


1999.01.26
  OPEN_APPEND openmod bevezetve, ennek definicioja:

  exkluzivnal erosebb nyitast jelent, 
  az indexfilek torlodnek,
  az objektumban az indexdefiniciok megmaradnak,
  az indexek nem lesznek karbantartva,
  csak az append, commit, close muveletek engedelyezettek,
  mivel nincs indexfile a kovetkezo (normal) open indexelni fog

  Megjegyzesek:
  nincs ellenorizve a muveletek engedelyezettsege,
  egyes tablaobjektum implementaciok ertelmezhetik OPEN_APPEND-et
  OPEN_EXCLUSIVE-kent, azaz a tenyleges implementacio nem kotelezo,
  egyelore csak a DBFCTX motor tartalmaz tenyleges implementaciot
  
  az OPEN_APPEND mod belso haszalata tabUpgrade-ben
  
  cucpydbf.prg utility dbf-ek packolasara,
  ezzel mukodik DBFNTX es DBFCTX


1999.01.25
  _rename javitva, a korabbi peldanyt mindenkeppen torli,
  pl. f1-->f2 eseten, ha f1 nem letezik, akkor f2-t torolni kell,
  es a visszateresi ertek .t. 
  

1998.11.30
  A DBFNTX-es _upgrade-ben az indexek torlese javitva.


1998.11.21
  tabDelIndex tabAlias -> tabFile helyettesites


1998.11.19
  tabPath, tabAlias, tabFile-be upper(alltrim())


1998.11.18
  Korabban a sema_open es sema_close utility fuggvenyeket
  hasznaltuk a table szemaforozasahoz, a szemafor directoryt
  azonban jobb mindenhol kulon letrehozni, ezert itt sajat
  static fuggvenyeket hasznalok, mig az eredeti fuggvenyek
  meg vannak tartva altalanos celra. A szemafor file nevet
  nem tabAlias()-bol, hanem tabFile()-bol kell kepezni.

1998.11.11
  
  cucompat : ifdef finomitva
  tabbrowse: ifdef finomitva
  tabnames : bovult
  tabsave  : ifdef finomitva, idekerult tabFilter()

Egy modul statusz lehet

  kozos tabla metodus      tab...
  egyedi tabla metodus     dnx... dix... dcx.. ora...
  kozos utility            cu...
  lokal utility            lu...

