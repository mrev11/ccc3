
#ifdef _HISTORY_

2020-07-26 -- 3.0.0
  KETFELE TORLESI MOD

  1) Hagyomanyos: A torolt rekord benne marad a "recno" indexben
    es az osszes tobbi indexben. Beallitodik a (belso) torolt flag.
    A navigalo muveletek (skip, seek, gotop) a torolt flag alapjan
    ugorjak at a torolt rekordokat, a filterezeshez hasonloan.
    A torolt rekordra goto-val ra lehet pozicionalni.

  2) Uj torles: A torolt rekord kikerul a "recno" indexbol es az
    osszes tobbi indexbol, viszont bekerul az uj "deleted" indexbe-be.
    A (indexekben) navigalo muveletek (skip, seek, gotop, goto) 
    egyaltalan nem latjak a torolt rekordokat (a goto sem) es 
    ezert egy torolt rekordra semmikepp sem lehet rapozicionalni
    (a goto-val sem). Nemletezo poziciora pozicionalas EOF-ra allitja 
    a tablat, es a tabGoto() visszaterese false.

  Az ujfajta torles celja, hogy a torolt rekordok ujra felhasznalhatok
  legyenek a fajl packolasa nelkul. Mielott a fajl meretet novelne,
  az append megnezi, hogy a "deleted"-ben van-e ujra felhasznalhato
  rekord, es ha van, akkor ujrahasznositja, azaz visszateszi az elo
  rekordok koze.
    
  MILYEN ANOMALIAKRA KELL SZAMITANI?

  a) A goto sikertelen, ha a rekord idokozben torlodott.
  b) A goto egy uj rekordot talal, ha a rekord nem csak torlodott,
     de a recno-ja idokozben ujra felhasznalasra kerult.
  c) Egy uj rekord nem a recno-k vegere kerul (hanem barhova).

  KEEPDELETED

  Kulonosen veszelyes a b) anomalia. Ennek az elkerulesere valo
  a tablaobjektum uj keepdeleted attributuma. Ennek erteke egy szam,
  aminek a jelentese: Az append ennyi naptari napig nem hasznosit ujra
  egy torolt rekordot. 
  keepdeleted=0: a torolt rekord azonnal ujrahasznositodhat.
  keepdeleted=1: a hetfon torolt rekord kedden ujrahasznositodhat.
    
  VALASZTAS A KET TORLESI MOD KOZOTT

  Hogy a torles a regi vagy az uj modon tortenik az attol fugg,
  hogy a bt fajlban van-e "deleted" index.
  A bt fajlban NINCS DELETED index: a torles a KORABBI MODON mukodik.
  A bt fajlban VAN DELETED index: a torles az UJ MODON mukodik.
  
  HOGYAN KERUL DELETED INDEX BT FAJLBA?
  
  Berakja a deleted indexet: bti.exe -adeleted <btfajl>
  Kiveszi a deleted indexet: bti.exe -ddeleted <btfajl>
  
  Ha egy program az objektumban beallitja a keepdeleted-et, akkor
  a) nemletezo fajl krealasa deleted indexszel hozza letre a fajlt,
  b) fajl (nem readonly) megnyitasa beteszi a fajlba a deleted indexet,
  c) de leginkabb a tdc fajlban fogjuk megadni: !keepdeleted 2


2016.12.05 -- 2.1.0
  tabchlog.prg-ben Cs.L. valtozatatasai CCC2-bol athozva.

2015.11.12 -- 2.0.5
  mpool.cpp warning javitas

2015.09.03 -- 2.0.4
  mpool.cpp
    reszletesebb debug info
    mpool_put-ben CRC iras, mpool_get-ben CRC ellenorzes
  btcopy.prg
    packolas ORDERBY_RECNO algoritmussal
    ORDERBY_PAGE: 
       CRC hibas filet egyaltalan nem tud packolni,
       hiszen minden lapot be kell olvasni,
       hibas lapbol is kell info (index vagy adat)
    ORDERBY_RECNO: 
       CRC hibas filet is tud packolni,
       ha a recno index es az adatlapok hibatlanok

2013.09.26 -- 2.0.3
   tabKeyCompose() atirva.
   A korabbi valtozat oszlopblokkal olvasta a kulcsszegmenseket.
   Az oszlopblokk beepitett tipuskonverziot hajt vegre az erteken,
   amit vissza kellett konvertalni binary tipusra. Az odavissza 
   konverzio miatt egy karakteres mezobol kepzett kulcs elterhetett 
   a mezotol, ha a mezo ervenytelen UTF-8 kodot tartalmazott. 
   Pelda: Egy CCC2-vel keszult adatbazis C tipusu mezojeben legyen 
   mondjuk egy Latin-2 'a'. Ha ezt indexeltuk CCC3-ban, akkor az a-bol
   az indexben '?' lett. Ezutan a rekordot nem lehetett seek-kel megtalalni.
   Az uj valtozat xvgetchar-ral (tipuskonverzio nelkul) olvas,
   igy az indexbe mindig a mezovel egyezo ertek kerul (fuggetlenul
   a kodolastol).

2009.10.02 -- 2.0.2
   gcc 4.3.2 warningok javitva.

2008.04.21 -- 2.0.1
   Sun/Solarison nem mukodott a filemapping a file-share protokoll miatt,
   ezert a kulcsok rendezesere szolgalo ideiglenes file letrehozasa
    fcreate(KEYFILE(table,o),FO_READWRITE+FO_SHARED) helyett
    fopen(KEYFILE(table,o),FO_CREATE+FO_TRUNCATE+FO_READWRITE+FO_NOLOCK)-kal.
   Ket helyen is javitva: 1) a packolasnal 2) a suppindexeknel.
 
   Az eredeti fcreate-os valtozatnak mas hibai is vannak:
   FO_READWRITE felesleges, mivel fcreate-nal az a default.
   FO_SHARED hatastalan, mivel az fcreate nem veszi figyelembe.
   (Megj: Clipper orokseg, hogy az fcreate nem allitja be a share modot. 
   A CA-Tools setshare() fuggvennyel globalisan allithato az fcreate 
   altal hasznalt share mode.)
 
   Az indexinfot tabCreate-ban 3 helyett 4 hosszan kell a resourceba irni, 
   maskulonben a packolas atvaltoztatja a suppindexeket permanens indexsze.

2006.04.20 -- 2.0.0
   Portolas unicode-ra.
   Uj mezotipus: X.
   A C mezok str2bin-nel tarolodnak, es bin2str-rel olvasodnak ki.
   Az X mezok str2bin-nel tarolodnak, es binary-kent olvasodnak.
   A memo mezok str2bin-nel tarolodnak, es binary-kent olvasodnak.

   Megjegyzes: A program nincs az elejetol a vegeig atvizsgalva,
   sem tesztelve (ahogy lennie kellene), hanem ahol a probalgatas
   kihozta a string<-->binary konfliktusokat, ott javitottam.

2005.08.08 -- 1.1.14"
   A quitblock-ban csak akkor szabad tovabbi adatbazismuveleteket
   (pl. tabCloseAll) vegrehajtani, ha errorlevel()==0.


2005.04.26 -- 1.1.13"
   A filehozzaferesekben a specifikacio mindenhol kisbetus. 
   Ezekre kell figyelni: tabPathName, tabIndexName, tabMemoName.
   Korabban csak az esetek feleben volt beirva a lower,
   ami azt eredmenyezte, hogy a btbtx konyvtar nem mukodott
   a "set dosconv off" beallitassal. Most a dosconv beallitastol
   fuggetlenul a tablaobjektum (a programban) case insensitive,
   a fajlrendszerben pedig szigoruan kisbetus nevekkel tarolodik.
   Sajnos nem lehet elerni nagybetus directoryban levo tablat.
   
   Windowson a valtozas erdektelen. Unixon mint eddig, ezutan is 
   csak kisbetus tablaobjektumok letezhetnek, viszont a konyvtar 
   hasznalhato "set dosconv off"-os programmal, igy mas filek 
   (nem tablaobjektum) lehetnek case sensitivek.
   
   set dosconv off       : nevkonverzio es file-lock protokoll kikapcsolva
   set dosconv fileshare : file-lock protokoll be-, nevkonverzio kikapcsolva


2004.07.16 -- 1.1.12" 
   Hibajelzes memok indexelesere.

2004.04.18 -- 1.1.11" 
    Uj megoldas a rekordsorrend megtartasara packban:
    A modositott tabAppend nem hasznalja a szabadlistat
    (tabAppend->_db_append->__bt_append->__bt_new/__bt_new0)
    A rekordok masolasakor igy haladhatunk a lapok sorrendjeben.

    Megjegyzes:

    Eredetileg a pack a lapokon vegigfutva gyujtotte a nem torolt 
    rekordokat. Ez akkor is mukodokepes, ha a recno index serult.
    Mivel a tabAppend a szabadlistabol is hasznalt lapokat az uj 
    rekordok kiirasara, a pack utan megvaltozhatott a rekordok 
    recno szerinti rendezettsege. Ez akadalyozta pack replikalasat.
    A replikalhatosag erdekeben a 2004.03.10-es javitas ugy modositotta
    a packot, hogy az recno szerinti sorrendben gyujtse a rekordokat.
    A mostani modositas egyesiti a ket modszer elonyeit.

2004.03.10 -- 1.1.10" 
    tabPosition()==0-nal lockCurrent nem lockolhat.
    Rekordsorrendet megtarto packolas (a replikacio erdekeben).
    tabCreate naplozasa.

2004.01.14 -- 1.1.09" 
   Packolasnal nyitva maradt a memofile.
   Az elozo javitas elrontotta a lock protokollt.

2003.11.20 -- 1.1.08" 
   Nem oroklodo filedescriptorok.
 
2003.10.17 -- 1.1.07" 
   Portolas GCC 3.3-ra.
   Maximalis picture hossz a karakteres oszlopokban: 64.

2003.05.13 -- 1.1.06" 
   Az EOF irasanak ellenorzese elrontotta a memok packolasat.
   Javitas: a memok packolasakor az EOF flaget torolni kell.

2003.03.21 -- 1.1.05" 
  tranRecordLockedInTransaction(table)
    A tranzakcio vegen (commit/rollback) pontosan azok a lockok
    szunnek meg, amik a tranzakcio kozben jottek letre.
  
  function tranDeleteOnRollback(table,pos)
    A rollback torli azokat a rekordokat, amik a tablak TAB_TRANDEL
    listajaban vannak felsorolva. Jelenleg csak a tabInsert hasznalja.
 
2003.03.04 -- 1.1.04
  Az elozo javitas (tabKeyLength) elrontotta a packot, javitva.

2003.02.22 -- 1.1.03
  EOF irasanak ellenorzese (inkompatibilis?).

  Uj  fuggveny: tabKeyLength(). Korabban a len(tabKeyCompose())
  kifejezessel szamitottuk a kulcsok hosszat, ezzel azonban tobbszor 
  baj volt, amikor a tablaban nem volt egyetlen rekord sem, vagy
  nem volt pozicionalva.
  
  Elakadt 0 rekordot tartalmazo filek indexeleseben, a kritikus
  agakat at kell ugrani.
  
  tabVerify() ujraepiti az egesz oszlopstrukturat, igy a programba
  legvegul mindig a filevel osszhangban levo objektum kerul, meg 
  ha nem is tud a program minden oszloprol.
 
2003.02.13 -- 1.1.02
  A seek nem kalkulalta ujra a talalt kulcsot a getnext ag utan,
  ezert talalatot jelzett olyankor, amikor egyezo kulcsu, de torolt
  (kiszurt) rekordot talalt.

2003.02.10 -- 1.1.01
  Nem jo helyen volt tabOpen-ben a tabSunlock.
  A hiba csak Windowson jelentkezett (mert UNIX-on ugyanaz
  a processz ketszer is meg tud nyitni egy filet exkluzivan?).

2002.12.20 -- 1.1.00
  Naplozas, az alabbi kornyezeti valtozokkal szabalyozhato:

  CCC_TRANSACTION_FILE_LOG    fspec, amibe irja a naplot (lehet NFS-en)
  CCC_TRANSACTION_FILE_MUTEX  fspec, amit lockolashoz hasznal (lokalis)
  CCC_TRANSACTION_FILE_ALIAS  fspec, ami a naplozando aliasokat tartalmazza
  
  A naplozast a nem ures CCC_TRANSACTION_FILE_LOG kapcsolja be.
  Ha CCC_TRANSACTION_FILE_ALIAS ures, akkor mindent naploz.
 
2002.12.17 -- 1.0.00
  Memok packolasa (a tobbi driver meg nem packolja a memokat).

2002.12.16 -- 0.9.02
  A mezoertekadas kifejezes erteke (szabvanyosan) a jobboldal.

2002.11.13 -- 0.9.01
  Hibas volt a nulla rekordot tartalmazo filek packolasa.

2002.03.26 -- 0.8.30
  Optimalizalt indexeles (build_bt_index) kulcsrendezessel.
  tabOpen-ben az inkompatibilis indexek konverziojat 
  tabUpgrade helyett build_bt_index vegzi.

2002.03.25 -- 0.8.20
  Large file support Linuxon.

2002.03.22 -- 0.8.10
  Automatikus little/big endian swap.

2002.01.21 -- 0.8.00
  Optimalizalt pack rekordmasolassal, kulcsrendezessel. 

2001.12.25 -- 0.7.00

  OK szammezok kulcskepzese
  OK tabVerify az indexekre
  OK suppindex/dropindex implementaciot feleleszteni
  OK torolt indexet egyben a szabadlistaba fuzni
  OK konkurrencia kezeles a header lapok modositasakor
  OK konkurrencia kezeles az adatlapok modositasakor
  OK konkurrencia kezeles az index muveletekre
  OK tranzakciossa tenni az indexelest
  OK optimalizalt loaddbf (rekordmasolassal) 
  OK nyuzo teszt
     OPEN_APPEND mod tamogatas
     kereses szazalekra
#endif




