
/*
 *  CCC - The Clipper to C++ Compiler
 *  Copyright (C) 2005 ComFirm BT.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

//Miből áll a HTTP üzenet:  byteokból vagy karakterekből?
//Mire vonatkozik a Content-Length header:  a byte hosszra?
//
//Ezek a programok feltételezik, hogy az msg paraméter binary string.
//Minden más paramétert binaryra konvertálnak (ha eleve nem az).
//A http_writemessage az msg-t is binaryra konvertálja.
//A visszatérési értékük binary string, pl. http_readmessage --> binary.
//A Content-Length byte számban értendő.
//A http_readmessage megköveteli, hogy Content-Length meg legyen adva.


static crlf:=x"0d0a"
static debug:=getenv("HTTP_DEBUG") 

*****************************************************************************
function http_header(msg)
    return left(msg,at(crlf+crlf,msg)-1)


*****************************************************************************
function http_body(msg)
    return substr(msg,at(crlf+crlf,msg)+4)

 
*****************************************************************************
function http_getheader(msg,hdr)
local h, x, pos 

    hdr:=crlf+lower(str2bin(hdr))+a":"
    pos:=at(hdr,lower(msg))
    if( pos>0 .and. pos<at(crlf+crlf,msg) )
        x:=substr(msg,pos+len(hdr))
        pos:=at(crlf,x)
        h:=alltrim(left(x,pos-1))
    end
    return h


*****************************************************************************
function http_setheader(msg,hdr,value)

local x,y,pos

    hdr:=str2bin(hdr)
    value:=str2bin(value)

    hdr:=crlf+hdr+a":"
    pos:=at(lower(hdr),lower(msg))

    if( pos>0 .and. pos<at(crlf+crlf,msg) )
        x:=left(msg,pos-1)
        y:=substr(msg,pos+2) //crlf-et átlépni
        pos:=at(crlf,y)
        y:=substr(y,pos)
    else
        pos:=at(crlf+crlf,msg) 
        x:=left(msg,pos-1)
        y:=substr(msg,pos)
    end
    msg:=x+hdr+a" "+value+y

    return msg


*****************************************************************************
function http_getvalue(msg,hdrnam,parnam) 

local header,pos,value,t

    hdrnam:=str2bin(hdrnam)
    parnam:=str2bin(parnam)

    header:=http_getheader(msg,hdrnam)
    parnam+=a"="

    if( header!=NIL .and. 0<(pos:=at(lower(parnam),lower(header))) )
        value:=substr(header,pos+len(parnam))
        t:=left(value,1)
        if( t==a'"' )
            value:=substr(value,2)
            pos:=at(a'"',value)
        else
            pos:=len(value)+1
            if( a" "$value  )
                pos:=min(pos,at(a" ",value))
            end
            if( a";"$value  )
                pos:=min(pos,at(a";",value))
            end
        end
        value:=left(value,pos-1)

        //? hdrnam+a":", parnam+a'"'+value+a'"'
    end
    return value
 

*****************************************************************************
function http_getcookie(msg,parnam) 
    return http_getvalue(msg,"Cookie",parnam)


*****************************************************************************
function http_writemessage(s,msg)
local result

    msg:=str2bin(msg)
    result:=swrite(s,msg)  

    if( len(msg)!=result )
        ? "http_writemessage error",s,len(msg),result 
    end

    if( "W"$debug )    
        ? ">>>>WRITE",s
        if( !"B"$debug )    
            ? http_header(msg)
        else
            ? http_header(msg)+http_body(msg) 
        end
    end

    return result


*****************************************************************************
function http_readmessage(s)

local timeout:=10000 //10sec
local t0:=gettickcount()
local crcr:=x"0d0a0d0a"
local msg:=a"",hlen,blen 
local rcv:=sread(s,sready(s))
 
    if( rcv==NIL )
        ? "http_readmessage (1) error",s
        return NIL
    else
        msg+=rcv
    end
 
    while( 0==(hlen:=at(crcr,msg)) .and. gettickcount()-t0<timeout )
        if( 0<select({s},,,timeout) )  
            rcv:=sread(s,sready(s))    
            if( rcv==NIL )
                ? "http_readmessage (2) error",s
                return NIL
            else
                msg+=rcv
            end
        end
    end
    
    if( hlen==0  )
        ? "http_readmessage (3) error",s
        return NIL //nem jött header 
    end

    hlen+=(len(crcr)-1) //header length
    blen:=val( http_getheader(msg,a"Content-Length") ) //body length
    
    while( len(msg)<hlen+blen .and. gettickcount()-t0<timeout )
        if( 0<select({s},,,timeout) )
            rcv:=sread(s,sready(s))    
            if( rcv==NIL )
                ? "http_readmessage (4) error",s
                return NIL
            else
                msg+=rcv
            end
        end
    end

    if( "R"$debug )    
        ? ">>>>READ",s
        if( !"B"$debug )    
            ? http_header(msg)
        else
            ? http_header(msg)+http_body(msg) 
        end
    end
    
    return msg


****************************************************************************
