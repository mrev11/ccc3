
2012.05.25 -- 1.6.00
  új attrib xmlparser-ban : preservespace (az elemző megtartja a space-eket)
  új method xmlnode-ban   : xmloutpre (kiírás formázás nélkül)
  új method xmlnode-ban   : xmloutind (kiírás indentálva)


2012.05.25 -- 1.5.01
  Hibajavítás: 
    A bemenet végén (a gyökér tag után) levő szemetet nem vette észre, 
    most a szemétre szintaktikai hinát jelez.

2012.02.25 -- 1.5.00
  xmlparser2-ben új attrib: createnodeblock
  Ezzel hozza létre a nodeokat, defaultja: {|*|xmlnodeNew(*)}
  példa:  prs:createnodeblock:={|*|xhtmlnodeNew(*)}
  így lehetséges xmlnode lesszármazottaiból felépített domot csinálni.
  
  xmlattrib-ban új metódusok: setattrib, delattrib.

2011.11.28 -- 1.4.04
  Üres CDATA-ra (erre: '<![CDATA[]]>') elszállt.

2011.07.02 -- 1.4.03
  node:addtext(text)
  Egy text tartalmú #TEXT/#CDATA-t ad node content-jéhez.

2010.02.17 -- 1.4.02
  #TEXT és #CDATA node-ra gettext.

2010.02.12 -- 1.4.01
  Új kódblock: textnodeblock, ami  #TEXT-re és #CDATA-ra hívódik meg.

  nodeinfo-ban új attrib: userdata, ami tetszőleges adatot tartalmazhat,
  és ugyanúgy öröklődik a fában, mint buildflag.
   

2009.12.28 -- 1.4.00

  A Lemon nyelvtan újraírva, változások:

    Korábban az xml-ben elfogadtuk tagok sorozatát, amiket 
    betettünk egy mesterséges #ROOT típusú node content-jébe.
    Ez ellentétes a szabvánnyal, ami kimondja, hogy az xml pontosan 
    egy tagból áll, és ez a dom objektum gyökere.
    
    Most a parser:rootflag-gel lehet szabályozni, hogy készüljön-e
    #ROOT node. A régi programok nem működnének #ROOT nélkül, ezért
    parser:rootflag defaultja .t..  Az új elemző csak akkor fogad el 
    többgyökerű xml-t, ha a rootflag==.t. be van állítva.
    
    Korábban az <?xml ... ?> alakú deklarációkból node-ot építettünk,
    és betettük őket a dom-ba. Ez ellentétes a szabvánnyal. A szabvány
    szerint 0 vagy 1 darab <?xml ... ?>  deklaráció lehet az xml fájl 
    elején, ami nem node, és nincs értelme betenni a dom-ba.  
    
    Most az új elemző akkor kezeli node-ként a <?xml ... ?> deklarációt,
    ha a rootflag==.t. be van állítva.

    A CCC3 elemző automatikusan kezeli az <?xml ... ?> deklaráció 
    encoding attribútumát és beállítja a lexerben a megfelelő konverziót. 
    Akármi a bemenet kódolása, belül Unicode karakterek lesznek. 
    A default az UTF-8=>Unicode konverzió. Támogatott az ISO-8859-1=>Unicode 
    és az ISO-8859-2=>Unicode konverzió. Minden más úgy konvertálódik, 
    mint az ISO-8859-1 (azaz triviális  8bit->32bit konverzióval).  
    Az UTF-16 kódolás nincs támogatva, noha a szabvány megkövetelné.
    
    A CCC2 elemző nem csinál semmiféle konverziót, és abszolúte nem 
    szabványos, mert belül is csak Latin-1 kódolással működik.
    Megjegyzés: A CCC2 és CCC3 elemző forrása ugyanaz.
    
    Külön (nyelvtani) szabály teszi lehetővé a több fát tartalmazó 
    xml-ek elfogadását. Ezt a szabályt a <#ROOT#> token aktivizálja, 
    amit az elemző maga tesz be az input elejére az elemzés indulása 
    előtt a rootflag==.t. hatására.
    
    Az új xmlparser objektum rootflag==.t. beállítással kompatibilis 
    a régivel. Az xmlparser2 jobban követi a szabványt. Az xmlparser
    és xmlparser2 között az az egyetlen különbség, hogy xmlparser2 
    inicializátora rootflag==.f.-et állít be.

  
  A Lemon szabályokhoz rendelt kód most egységesen mindenhol
  egyetlen Clipper függvényhívás (az xmldom_lemon modulban),
  így minden tevékenység magas szinten (Clipperben) van kódolva.
  
  method  initialize
    Inkompatibilis, csak az elemzendő fname/fdesc adható meg,
    korábban egy csomó paramétert meg lehetett adni név/érték párokban.

  method  copy
    Új metódus, csinál egy másik parsert, amivel _másik_ bemenetből lehet 
    építeni folytatólagosan _ugyanazt_ a dom-ot. Inkludáláshoz használható.

  method  parse 
    Stringet, inputblock-ot, fájlt (név/leíró) elemez.
    Először a stringet elemzi, ha az elfogy, és van inputblock,
    akkor annak az eredményét elemzi. Az inputblock eredménye mindig
    hosszabbítja a bemeneti stringet. Ha ha nincs inputblock de van fájl,
    akkor a kezdő string után a fájlt elemzi. 
    
  method  parsefile
    A korábbihoz képest most hiba esetén is lezárja a fájlt egy finally 
    ágban (ha ő nyitotta).

  method  parsestring
    Stringet elemez.
    
  attrib  file
    Fájlnév, vagy fájlleíró.  
    
  attrib  inputblock
    Kódblokk, amit a lexer hív meg, amikor rövid az inputstring.
    Ha az inputstring teljesen elfogy, és az inputblock is NIL-t vagy 
    ""-t ad  vissza, akkor az elemzés befejeződik.

  attrib  cargo
    Új attribútum tetszőleges adat tárolására.

  attrib  rootflag        
    Új attribútum, készüljön-e mesterséges #ROOT node.
  
  attrib  lemon
    Új attribútum, a lemon stackkel párhuzamosan mozogó array (belső).
    A Lemon szimbólumokhoz rendelt érték egy index ebben a tömbben. 

  attrib  lexer       
    Új attribútum, pointer a lexerre (belső).
    Ezen keresztül elérhető a lexer (inputfspec, lineno, encoding).

  attrib  infodepth       // index, stackpointer
  attrib  infostack       // array, stack a nodeinfónak
    Új attribútumok, stack, ami tárolja a gyökértől az aktuális node-ig
    a node-okhoz rendelt kiegészítő infót. Az arraynek fix mérete van,
    és előre fel van töltve nodeinfo objektumokkal (belső).

  method  info
    Új metódus, az előző stack topját adja.
    A parser:info:buildflag bármikor ki/bekapcsolható. Ha ki van kapcsolva, 
    akkor csak rohan a fán, szintaktikailag ellenőriz, de nem készít node 
    objektumokat. Bármikor bekapcsolható, akkor elkezdi építeni a fát.
    A parser:info:buildflag automatikusan öröklődik a fában.

  method  infopush
  method  infopop
    Új metódusok, kezelik az előző stacket (belső).

  method  infosize
    Új metódus, a defaulttól eltérő stack méret állítható be.

  attrib  nodebeginblock
    Akkor hajtódik végre, amikor az elemző egy új taghoz ér.
    Ilyenkor nincs még elkészítve a node, csak a neve ismert.
    pl: {|parser,nodeinfo|nodebegin(*)}

  attrib  nodeendblock
    Akkor hajtódik végre, amikor az elemző egy tag végére ér.
    Lehetséges, hogy a node objektum el van készítve, lehet, hogy nem,
    attól függ, ki volt-e kapcsolva a node építés.
    pl: {|parser,nodeinfo,node|nodeend(*)}

  attrib  attribblock
    Akkor hajtódik végre, amikor az elemző egy attribútumot elemez.
    Ilyenkor a node objektum még nincs kész. Hogy melyik node attribútumáról
    van szó, azt a parser:info-ból lehet tudni.
    pl: {|parser,aname,avalue|attrib(*)}  

    A három új blokkal ki lehet választani egy XML részfát anélkül, 
    hogy a fa más (érdektelen) részeiből objektumot kellene építeni.
    Ehhez ügyesen kell a blokkokban ki/bekapcsolgatni a buildflag-et.

  attrib  contentblock
    Azelőtt hajtódik végre, mielőtt az elemző betenné a kész node-ot 
    a parent content-jébe. 
    pl: {|parser,node|content(*)}

        ha a contentblock .t.-t ad, beteszi
        ha a contentblock .f.-t ad, nem teszi be

    A contentblock  és a processblock közötti különbségek: 

        contentblock defaultja NIL,
        visszatérése kötelezően .t./.f., a NIL hiba,
        .t.-re kerül be a node a content-be (fordítva, mint a processblocknál)
        .f.-re lesz eldobva a node (fordítva, mint a processblocknál)

    A contentblock-kal meg lehet oldani az inkludálást,
    ami a processblock-kal nem megy a hiányos paraméterezés miatt.

    Akkor is használható, amikor egy nagy xml-t elemzünk ciklusban. 
    Pl. a gyökérnek van akárhány fia, a fiúkon megy a feldolgozás egy ciklusban, 
    miután egy fiú fel lett dolgozva el lehet/kell dobni. Ha nem dobnánk el, 
    akkor a futtatórendszernek  elfogynának az oref-jei. 
  
  attrib  processblock    // deprecated
  method  process         // deprecated
    Deprecated block.  Az a baja, hogy a block nem veszi át a parsert. 
    Bele lehet ugyan refesíteni, de az ilyen blokkot nem jól másolja a copy. 
    Új programokban a contentblock-ot kell használni.


2009.12.22 -- 1.3.04
  Az előző javítás (xmldom_lexer->getnext-ben) visszavéve,
  mert memóriaszivárgást okozott.

2009.11.11 -- 1.3.03
  xmldom_lexer->getnext-ben
    ahol elvileg text is tartozik/tartozhat a tokenhez,
    ott nem szabad null pointert adni a token helyett,
    akkor sem, ha a text üres (üres stringet kell adni).

  Az xmlparser.parsefile metódus javítva.

2009.11.10 -- 1.3.02
  Védekezés az inputon előforduló 0 byte ellen.
  Az xmldom_lexer.h-ban definiált ZEROCH (jelenleg '?') byteot 
  helyettesíti be filé és string inputnál egyaránt.

2009.11.05 -- 1.3.01
  ISO-8859-2 (Latin-2) támogatás.
  
  CCC2
    Byte-ok és karakterek között nem teszünk különbséget, 
    ezért nincs semmiféle konverzió.
    
  CCC3 
    Az elemzés eredményeként keletkező DOM mindig Unicode stringeket 
    tartalmaz (mivel a CCC3 kizárólag Unicode stringekkel dolgozik). 
    Az alábbiak szerint konvertál Unicodera:

      UTF-8      : ez default, ha az XML-ben nincs más előírva
      ISO-8859-1 : (Latin-1) triviális 8-bit -> 32-bit konverzió
      ISO-8859-2 : (Latin-2) befordított kódtábla alapján
      Egyéb      : minden egyéb úgy konvertálódik, mint a Latin-1
      
  Megjegyzés:
    Az XML elemző (csakúgy, mint a CCC elemző) bytesorozaton működik, 
    és csak a Flex elemzés után kerül sor (kizárólag) a szövegtartalmakban
    a byte->karakter konverzióra. Ezért az XML tag- és attribútumnevek
    (csakúgy, mint a CCC azonosítók) csak ASCII kódokat tartalmazhatnak 
    (eltérően pl. a Jávától).

2009.11.05 -- 1.3.00
  CCC2 és CCC3 kód egységesítve.
    A CCC2 base64.cpp átkerült az alapkönyvtárba.
    compat_ccc3.h további makrókkal bővült.
  Osztálydefiníciók class utasítással.
  Nincs szándékos változtatás működésben és az API-ban.

2007.10.24 -- 1.2.03
  _xmldom_parser_parseinput javítva: bin2str helyett str2bin

2006.11.16 -- 1.2.02
  eval(errorblock(),e) helyett break(e), ezeket dobja: 
  invalidoptionerror, fnferror, xmlsyntaxerror, xmltagerror

2004.06.18 -- 1.2.01
  <!DOCTYPE ...> ignored by the flex analyser.

2004.04.28 -- 1.2.00
  Unicode.

2004.08.01 -- 1.1.01
  A lex filében %option prefix="xmldom".
  FlexLexer.h-t a lex filében nem szabad inkludálni.
  Mindez a névütközések és többszörös definíciók elkerülésére,
  hogy egy programban egyszerre több Flex elemző is lehessen.

2004.07.12 -- 1.1.00
  Az egész újraírva:
  Áttérés Flex++/Lemon-ra, reentráns elemző, 2-szeres gyorsulás.
  A parsefile() csak azt a filét zárja le, amit ő nyitott meg.
  Megszűnt a yaccmaxidx() API.

2004.03.22 -- 0.9.18
  Az xmlrpc könyvtár DOM elemző része külön könyvtárba véve.
  Korábban az xml elemzéshez mindig az xmlrpc könyvtárat
  kellett linkelni (akkor is, ha az rpc rész nem kellett),
  ami mindig maga után húzta a socket könyvtárat.
  
  A DOM elemzőben fontos javítások vannak előirányozva:
  1) C++ Flex lexikai elemző lesz bevezetve.
  2) Bison helyett Lemon nyelvtani elemző lesz bevezetve.
  Ezekkel a javításokkal a domparser reentráns lesz.

2004.03.17 -- 0.9.17
  Kicsit optimalizálva a Flex/Bison nyelvtan.
  A szemétgyűjtésen látszik, hogy hihetetlenül sok objektum készül, 
  ezért a program nagyon lassú még az optimalizálással is (20%).

2004.02.18 -- 0.9.16
  yyparse_from_file(file) argumentuma nem csak filespec,
  hanem file descriptor is lehet, ebben az esetben az fdopen-nel
  kapott streamből történik az olvasás. Mindkét esetben
  az elemzés befejeztével fclose-zal lezáródik a stream
  (és mivel fdopen nem dup-ol, az eredeti descriptor is).
  A filedescriptor pipe is lehet.
 