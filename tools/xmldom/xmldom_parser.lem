
/*
 *  CCC - The Clipper to C++ Compiler
 *  Copyright (C) 2005 ComFirm BT.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

%include{

#include <stdlib.h>
#include <xmldom_lexer.h>


namespace _nsp_xmldom{
namespace _nsp_lemon{
extern void _clp_attrlist__(int argno);
extern void _clp_attrlist__attrlist_symbol_eq_string(int argno);
extern void _clp_content__(int argno);
extern void _clp_content__content_node(int argno);
extern void _clp_content__content_tnode(int argno);
static void _clp_lemstk(int argno);
extern void _clp_node__lpar_symbol_attrlist_rpar_content_lpar_slash_symbol_rpar(int argno);
extern void _clp_node__lpar_symbol_attrlist_slash_rpar(int argno);
extern void _clp_qsymbol__symbol(int argno);
extern void _clp_symbol__symbol(int argno);
extern void _clp_tnode__cdata(int argno);
extern void _clp_tnode__text(int argno);
extern void _clp_xmldecl__lparqm_qsymbol_attrlist_qmrpar(int argno);
extern void _clp_xmlv__root_xmldecl_content(int argno);
extern void _clp_xmlv__xmldecl_node(int argno);
}}//namespace xmldom.lemon

DEFINE_METHOD(lexer);

#define TBASE       VALUE*tokenbase=stack-1
//#define TPUSH(x)    push(tokenbase-x)
#define TPUSH(x)    stringn(x);free(x);x=0  //%token_type {CHAR *} eset

}//%include

%name xmldom_parser
%start_symbol xml

%stack_size 1000

%stack_overflow{
    fprintf(stderr,"Parser stack overflow\n");
}

%syntax_error{
    char desc[256];  
    push(parservp);
    _o_method_lexer.eval(1);
    xmldom_lexer *lexer=(xmldom_lexer*)(TOP()->data.pointer);
    pop();
    
    sprintf(desc,"syntax error near #line %d",lexer->lineno());

    _clp_xmlsyntaxerrornew(0);
    dup();stringnb("XMLDOM");_o_method_subsystem.eval(2);pop();
    dup();stringnb("xmldom_parser");_o_method_operation.eval(2);pop();
    dup();stringnb(desc);_o_method_description.eval(2);pop();
    dup();number(3);_o_method_subcode.eval(2);pop();
    if( lexer->inputfspec )
    {
        dup();stringnb(lexer->inputfspec);_o_method_filename.eval(2);pop();
    }
    //if( TOKEN )
    //{
    //    dup();stringn(TOKEN);array(1);_o_method_args.eval(2);pop();
    //}

    _clp_break(1);
    pop();
} 

//%parse_accept{
//    printf("Parsing complete.\n");
//} 

%extra_argument {VALUE *parservp} 

%token_type {CHAR *}
%token_destructor{ free($$); }
//%token_type {int}  
%type symbol {int}
%type qsymbol {int}
%type attrlist {int}
%type node {int}
%type tnode {int}
%type content {int}
%type xml {int}
%type xmldecl {int}


//minden szabály meghív egy Clipper függvényt,
//aminek a neve a szabályból van származtatva,
//ezek xmldom_lemon.prg-ben vannak

xml ::= xmlv.


xmlv ::= ROOT xmldecl content(C).{
    push(parservp);//parser objektum
    number(C);

    _nsp_xmldom::_nsp_lemon::_clp_xmlv__root_xmldecl_content(2); 

    // megvan a végeredmény
    // parseinput a mostani TOP-ot adja vissza 
    // a _rettop() makróval
}


xmlv ::= xmldecl node(N).{
    push(parservp);//parser objektum
    number(N);

    _nsp_xmldom::_nsp_lemon::_clp_xmlv__xmldecl_node(2); 

    // megvan a végeredmény
    // parseinput a mostani TOP-ot adja vissza 
    // a _rettop() makróval
}


xmldecl ::=.


xmldecl ::= LPARQM qsymbol(S) attrlist(A) QMRPAR.{
    push(parservp);//parser objektum
    number(S);
    number(A);
    
    _nsp_xmldom::_nsp_lemon::_clp_xmldecl__lparqm_qsymbol_attrlist_qmrpar(3);
    pop();
}


node(N) ::= LPAR symbol(S) attrlist(A) SLASH RPAR.{
    push(parservp);//parser objektum
    number(S);
    number(A);

    _nsp_xmldom::_nsp_lemon::_clp_node__lpar_symbol_attrlist_slash_rpar(3);
    N=D2INT((TOP()->data.number));
    pop();
}


node(N) ::= LPAR symbol(S1) attrlist(A) RPAR content(C) LPAR SLASH SYMBOL(S2) RPAR.{
    TBASE;
    push(parservp);//parser objektum
    number(S1);
    number(A);
    number(C);
    TPUSH(S2);

    _nsp_xmldom::_nsp_lemon::_clp_node__lpar_symbol_attrlist_rpar_content_lpar_slash_symbol_rpar(5);
    N=D2INT((TOP()->data.number));
    pop();
}

tnode(N) ::= TEXT(T).{
    TBASE;
    push(parservp);//parser objektum
    TPUSH(T);

    _nsp_xmldom::_nsp_lemon::_clp_tnode__text(2);
    N=D2INT((TOP()->data.number));
    pop();
}


tnode(N) ::= CDATA(T).{
    TBASE;
    push(parservp);//parser objektum
    //TPUSH(T); //rossz: üres CDATA-ra elszáll <![CDATA[]]>
    if(T){TPUSH(T);}else{string(CHRLIT(""));}  //2011.11.28 javítás

    _nsp_xmldom::_nsp_lemon::_clp_tnode__cdata(2);
    N=D2INT((TOP()->data.number));
    pop();
}


content(C) ::= .{
    push(parservp);//parser objektum
    
    _nsp_xmldom::_nsp_lemon::_clp_content__(1);
    C=D2INT((TOP()->data.number));
    pop();
}


content(L) ::= content(R) tnode(N).{
    push(parservp);//parser objektum
    number(R);
    number(N);
    
    _nsp_xmldom::_nsp_lemon::_clp_content__content_tnode(3);
    L=D2INT((TOP()->data.number));
    pop();
}


content(L) ::= content(R) node(N).{
    push(parservp);//parser objektum
    number(R);
    number(N);
    
    _nsp_xmldom::_nsp_lemon::_clp_content__content_node(3);
    L=D2INT((TOP()->data.number));
    pop();
}


symbol(S1) ::= SYMBOL(S).{
    TBASE;
    push(parservp);//parser objektum
    TPUSH(S);

    _nsp_xmldom::_nsp_lemon::_clp_symbol__symbol(2);
    S1=D2INT((TOP()->data.number));
    pop();
}


qsymbol(S1) ::= SYMBOL(S).{
    TBASE;
    push(parservp);//parser objektum
    TPUSH(S);

    _nsp_xmldom::_nsp_lemon::_clp_qsymbol__symbol(2);
    S1=D2INT((TOP()->data.number));
    pop();
}


attrlist(L) ::= .{
    push(parservp);//parser objektum

    _nsp_xmldom::_nsp_lemon::_clp_attrlist__(1);
    L=D2INT((TOP()->data.number));
    pop();
}


attrlist(L) ::= attrlist(R) SYMBOL(N) EQ STRING(V).{
    TBASE;
    push(parservp);//parser objektum
    number(R);
    TPUSH(N);
    TPUSH(V);

    _nsp_xmldom::_nsp_lemon::_clp_attrlist__attrlist_symbol_eq_string(4);
    L=D2INT((TOP()->data.number));
    pop();
}


